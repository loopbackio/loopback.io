"use strict";(self.webpackChunkloopback_blog=self.webpackChunkloopback_blog||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"happy-5th-bday","metadata":{"permalink":"/blog/happy-5th-bday","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2023/2023-10-10-happy-5th-bday.md","source":"@site/blog/2023/2023-10-10-happy-5th-bday.md","title":"Happy 5th Birthday LoopBack 4!","description":"Can you believe it\'s been 5 years that LoopBack 4 GA was announced at Node+JS Interactive conference?","date":"2023-10-10T00:00:00.000Z","formattedDate":"October 10, 2023","tags":[{"label":"Meta","permalink":"/blog/tags/meta"}],"readingTime":0.695,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Happy 5th Birthday LoopBack 4!","date":"2023-10-10T00:00:00.000Z","slug":"happy-5th-bday","authors":"dhmlau","tags":["Meta"]},"nextItem":{"title":"New Home for the LoopBack Blog","permalink":"/blog/new-home-for-the-loopback-blog"}},"content":"Can you believe it\'s been 5 years that LoopBack 4 GA was [announced](https://strongloop.com/strongblog/loopback-4-ga) at Node+JS Interactive conference?\\n  \\n\x3c!--truncate--\x3e\\n\\n![Happy birthday LoopBack](./images/bday.jpg)<span style={{fontSize:\'0.4em\', textAlign:\'center\'}}><i>Photo by <a href=\\"https://unsplash.com/@socialcut?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\\">S O C I A L . C U T</a> on <a href=\\"https://unsplash.com/photos/ww8hljWABIE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\\">Unsplash</a></i></span>\\n\\nSince then, the framework has gained stability and has gained users substantially. We also see more contributions from the community not only to the core framework, but also building extensions. Thank you for all your contributions to LoopBack and the [160+ extensions published on npmjs.com](https://www.npmjs.com/search?q=loopback-extension)!\\n\\nTo continue moving towards an open governace model, it\'s exciting to see LoopBack [joined the OpenJS foundation as the incubating project](https://openjsf.org/blog/2021/06/02/loopback-joins-openjs-foundation-as-new-incubating-project/) in 2021 and [graduated to at-large project](https://openjsf.org/blog/2022/04/25/node-js-framework-loopback-graduates-to-at-large-project-at-openjs-foundation/) the following year.\\n\\nLastly, don\'t forget that [HacktoberFest](https://hacktoberfest.com/) is on this month. No matter you\'re a new developer to LoopBack or seasoned contributors, your contributions are always welcomed!"},{"id":"new-home-for-the-loopback-blog","metadata":{"permalink":"/blog/new-home-for-the-loopback-blog","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2022/2022-04-03-new-home-for-the-loopback-blog.md","source":"@site/blog/2022/2022-04-03-new-home-for-the-loopback-blog.md","title":"New Home for the LoopBack Blog","description":"After a long hiatus, the LoopBack Blog has gotten a new home! Learn how it came","date":"2022-04-13T00:00:00.000Z","formattedDate":"April 13, 2022","tags":[{"label":"Meta","permalink":"/blog/tags/meta"}],"readingTime":4.665,"hasTruncateMarker":true,"authors":[{"name":"Rifa achrinza","title":"LoopBack Maintainer","url":"https://github.com/achrinza","imageURL":"https://avatars3.githubusercontent.com/u/25147899","key":"achrinza"}],"frontMatter":{"title":"New Home for the LoopBack Blog","date":"2022-04-13T00:00:00.000Z","slug":"new-home-for-the-loopback-blog","authors":"achrinza","tags":["Meta"]},"prevItem":{"title":"Happy 5th Birthday LoopBack 4!","permalink":"/blog/happy-5th-bday"},"nextItem":{"title":"LoopBack 4 November 2020 Milestone Update","permalink":"/blog/november-2020-milestone"}},"content":"After a long hiatus, the LoopBack Blog has gotten a new home! Learn how it came\\nto be and how we managed to modernise blogging stack along the way.\\n\\n\x3c!--truncate--\x3e\\n\\nAs part of the planning for LoopBack moving to OpenJS Foundation, there have\\nbeen discussions around finding a new home for the blog, parting from the\\nstrongloop.com web site. A few alternatives had brought up, such as having the\\nblog posts as part of the loopback.io repo, using a third party blog site and\\ncreating a blog site in a separate repo.\\n\\n## Coming Up With a Plan\\n\\nPutting the blog posts in the loopback.io repo is a natural progression, since\\nall the documentation and text-based content will be in the same repo. The\\nconcern is that is Jekyll-based. Although it worked fine and integrated well\\nwith GitHub Pages, many of the maintainers were not well-versed in the world of\\nRuby. This was compounded by shell scripts that pulled data from other Git\\nRepositories and modified the site as part of the build process. Hence, a lot of\\ntime was spent trying to understand how the website was put together and\\nfiguring out the best way to tweak it to integrate the new blog.\\n\\nThe \\"Strong Blog\\" was also written with Jekyll and hosted on GitHub Pages. Hence\\nlifting and shifting was a real possibility that we contemplated. However,\\nthe slow build times and the maintainers\' unfamiliarity with Ruby and Jekyll\\nmeant that we realised that the website\'s current stack wasn\'t worth keeping\\naround in the long run. At the same time, performing a full migration of the\\nwebsite, documentation, and blog in one go was too daunting of a task for the\\nmaintainers who were already working on the project on their own time.\\n\\nThe idea of using a third-party service such as [Medium](https://www.medium.com)\\nwas also considered. However utlimately, the lack of control over the interface,\\nthe inability to place it in the same domain name as the main website and\\ndocumentation, and the frustration that stem from a reader being forced to use\\na third-party service meant that it was quickly off the table.\\n\\nAs a result, we decided to come to a compromise.\\n\\n## Picking A Blogging Stack\\n\\nAfter some deliberation we decided to create a hybrid stack which left the\\nwebsite and documentation with Jekyll, and use\\n[Docosaurus 2](https://docusaurus.io) as the new blogging platform. We found\\nDocusaurus to be a good fit as it is a Facebook-maintained open source project\\nwhich was written on top of React. Besides its benefit of speedy build times,\\nthis JavaScript-based stack provides more opportunities for extensibility and a\\nreduced barrier for contributing and tweaking. The first-class support for MDX\\nwas also a plus as it meant we were able to copy over most of our posts with\\nonly a few tweaks, and the ability to generate the blog as build artifacts made\\nit compatible with the Jamstack-eque system of GitHub Pages.\\n\\nThanks to the amazing work done by [Diana](https://github.com/dhmlau), all of\\nthe LoopBack 4 blog posts from 2019 and 2020 were migrated to Docusaurus. With\\nher work, we were able to quickly build and see the new blog coming together\\nwith all of the past blog posts populating the blog.\\n\\n## Merging Jekyll and Docusaurus\\n\\nWhen we started building the blog, we hosted it on GitHub Pages in its own Git\\nRepository and served it in its own sub-domain. This allowed us to quickly build\\nand patch any bugs that may have cropped up. However the end-goal was to host it\\nunder the same domain as the main website and documentation:\\nhttps://loopback.io/blog. Hence, we had to create a solution which merged the\\nnew blog with the exsitng website codebase.\\n\\nThis solution? A shell script!\\n\\nSince we already had a precedence for using shell scripts to pull in data from\\nother Git Repositories, I\'ve decided to write one to do the same thing, but this\\ntime, specifically for the blog. This script clones the\\n[`loopbackio/loopback-blog` Git Repository](https://github.com/loopbackio/loopback-blog),\\ngenerates the blog\'s build artifacts, and copies it over to the `blog` directory\\nof the Jekyll website. There\'s additional logic in there to make it more\\nfool-proof and less verbose but in essence, that was what it did - Clone, build,\\nand copy. You can also view the\\n[source code](https://github.com/loopbackio/loopback.io/blob/8968cd6860c09a852ee4fd9ce07c7a1db3ce7771/update-blog.sh)\\nyourself if you\'d like to see how it was done. Over time, we hope to refine this\\nfurther and make it more reliable, such as using Git Submodules instead of a\\nclean clone on every build.\\n\\n## Future Work\\n\\nAs it stands, we now have a blog that all of the maintainers can now contribute\\nto. With this change, we now have revived a new way for us, the maintianers, to\\nengage with our community and we hope that the blog posts can complement the\\nexisting documentation and community channels such as Slack, GitHub\\nDiscussions, and the mailing list.\\n\\nThis is just the first step in modernising our website stack. There\'s still\\nplenty of work to do, and it\'s our vision to fully migrate our stack to one\\npowered by the JavaScript ecosystem.\\n\\n## Upcoming Blog Series: Maintainers\' Testimonial\\n\\nWith the launch of our new blog, we\'re excited to announce an upcoming blog\\nseries where the maintainers can share their expriences and journey in adopting\\nLoopBack 4. Through this series, we hope to share with the community the unique\\nperspectives of those who work closely on LoopBack 4, not only as users but as\\nmaintainers as well.\\n\\nDon\'t miss out on future blog posts by subscribing to our\\n[RSS](https://loopback.io/blog/rss.xml) or\\n[Atom](https://loopback.io/blog/atom.xml) feeds which contain the full articles."},{"id":"november-2020-milestone","metadata":{"permalink":"/blog/november-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-12-08-november-milestone.md","source":"@site/blog/2020/2020-12-08-november-milestone.md","title":"LoopBack 4 November 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-12-08T00:00:00.000Z","formattedDate":"December 8, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":2.68,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"slug":"november-2020-milestone","title":"LoopBack 4 November 2020 Milestone Update","date":"2020-12-08T00:00:00.000Z","authors":"jannyhou","tags":["Milestone update"]},"prevItem":{"title":"New Home for the LoopBack Blog","permalink":"/blog/new-home-for-the-loopback-blog"},"nextItem":{"title":"LoopBack 4 October 2020 Milestone Update","permalink":"/blog/october-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nHope you had a wonderful Thanksgiving for those who celebrate it! In November, LoopBack team focused on improving the context module and documentation, as well as bug fixes. The Toronto squad participated in the [CASCONxEVOKE](https://www-01.ibm.com/ibm/cas/cascon/) conference. Instead of a physical booth, we held a virtual one online. We welcomed [@nflaig](https://github.com/nflaig) as the new maintainer of [`loopback-next`](https://github.com/strongloop/loopback-next).\\n\\nRead more to know about the highlighted improvements:\\n\\n\x3c!--truncate--\x3e\\n\\n## Context\\n\\n- A new phase `init()` was added to the application life cycle events. It is used when a component need to contribute bindings asynchronously. For example:\\n\\n  ```ts\\n  export class MyComponent implements Component, LifeCycleObserver {\\n    // ...\\n    async init() {\\n      // Contribute bindings via `init`\\n      // This cannot be done via constructor since it\'s synchronous.\\n      const val = await readFromConfig();\\n      this.app.bind(\'abc\').to(val);\\n      this.status = \'initialized\';\\n      this.initialized = true;\\n    }\\n  }\\n  ```\\n  You can check the [Component](https://loopback.io/doc/en/lb4/Component.html#component-life-cycle) page to learn about its usage.\\n\\n- `toInjectable()` was introduced as a shortcut to decorate a common/provider/dynamic-value-factory class and automatically creating binding for them. For example:\\n  ```ts\\n  @injectable({scope: BindingScope.SINGLETON})\\n  class MyController {\\n    constructor(@inject(\'my-options\') private options: MyOptions) {\\n      // ...\\n    }\\n  }\\n\\n  binding.toInjectable(MyController);\\n  ```\\n  The decorator\'s usage is well documented on page [Binding](https://loopback.io/doc/en/lb4/Binding.html#an-injectable-class).\\n\\n- PR [#6701](https://github.com/strongloop/loopback-next/pull/6701) updated test cases to reflect how the design types of array/undefined/complex properties are retrieved.\\n\\n- Method injection is allowed for the lifecycle methods in PR [#6740](https://github.com/strongloop/loopback-next/pull/6740). For example:\\n\\n  ```ts\\n  class MyObserverWithMethodInjection implements LifeCycleObserver {\\n    status = \'not-initialized\';\\n    init(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:initialized`;\\n    }\\n    start(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:started`;\\n    }\\n    stop(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:stopped`;\\n    }\\n  }\\n  ```\\n\\n- In some cases, your Express middleware wants to access LoopBack\'s RequestContext to resolve certain bindings. This can be done via `MIDDLEWARE_CONTEXT` property of the Express request object, which is set up by LoopBack when the `RequestContext` is instantiated. For example:\\n\\n  ```ts\\n  import {MIDDLEWARE_CONTEXT, RequestContext} from \'@loopback/rest\';\\n  function expressHandler(req, res, next) {\\n    const reqCtx = (req as any)[MIDDLEWARE_CONTEXT];\\n    // Now you have access to the LoopBack RequestContext\\n  }\\n  ```\\n\\n## Documentation\\n\\n- The guide for calling REST APIs and SOAP services were separated to make the steps involved clearer. You can check the overview page [Accessing services](https://loopback.io/doc/en/lb4/Accessing-services.html) and its sub-topics [Calling SOAP web services](https://loopback.io/doc/en/lb4/Calling-soap-web-services.html) and [Calling REST APIs](https://loopback.io/doc/en/lb4/Calling-rest-apis.html) for details.\\n\\n- For troubleshooting, we added steps for creating breakpoints in vscode in the [documentation](https://loopback.io/doc/en/lb4/Troubleshooting.html#creating-breakpoints). You can find more details in PR [#6743](https://github.com/strongloop/loopback-next/pull/6743). \\n\\n## REST\\n\\n- Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected. PR [#6813](https://github.com/strongloop/loopback-next/pull/6813) updated the regular expression of hostnames accordingly.\\n\\n## Repository\\n\\n- [#6755](https://github.com/strongloop/loopback-next/pull/6755) threw 400 `BadRequestError` for invalid inclusion relation name by rejecting the request with statusCode as 400.\\n\\n## Examples\\n\\n- PR [#6598](https://github.com/strongloop/loopback-next/pull/6598) updated artifacts of the [todo-list](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list) example to the latest style generated by the LoopBack CLI.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"october-2020-milestone","metadata":{"permalink":"/blog/october-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-11-05-october-milestone.md","source":"@site/blog/2020/2020-11-05-october-milestone.md","title":"LoopBack 4 October 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-11-05T00:00:00.000Z","formattedDate":"November 5, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 October 2020 Milestone Update","date":"2020-11-05T00:00:00.000Z","authors":"jannyhou","slug":"october-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 November 2020 Milestone Update","permalink":"/blog/november-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Oct 2020","permalink":"/blog/2020-oct-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIn October, we were excited to see an increasing number of community contributions as people joined the [Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/) event. This month we had pretty balanced improvements in each area of the framework, including context, health check, OpenAPI specification and documentations. Keep reading to learn about the recently added features!\\n\\n\x3c!--truncate--\x3e\\n\\nWe welcomed [@mrmodise](https://github.com/mrmodise) as the maintainer of [`loopback4-shopping-example`](https://github.com/strongloop/loopback4-example-shopping). And we\'d like to thank everyone [@nflaig](https://github.com/nflaig), [@MattiaPrimavera](https://github.com/MattiaPrimavera), [@mdbetancourt](https://github.com/mdbetancourt), [@mrmodise](https://github.com/mrmodise), [@frbuceta](https://github.com/frbuceta), [@HrithikMittal](https://github.com/HrithikMittal), [@simlt](https://github.com/simlt), [@hectorleiva](https://github.com/hectorleiva), [@pktippa](https://github.com/pktippa), [@VergilSkye](https://github.com/VergilSkye), [@kerolloz](https://github.com/kerolloz), [@arondn2](https://github.com/arondn2), [@mayank-SFIN571](https://github.com/mayank-SFIN571) for your contributions in October!\\n\\nHere are the highlighted improvements:\\n\\n## Context\\n\\n- A set of fine-grained scopes `APPLICATION`, `SERVER` and `REQUEST` has been introduced to allow better\\nscoping of binding resolutions. The limitation of the previous scopes is explained in section [choose the right scope](https://loopback.io/doc/en/lb4/Binding.html#choose-the-right-scope), and section [resolve a binding value by key and scope within a context hierarchy](https://loopback.io/doc/en/lb4/Binding.html#resolve-a-binding-value-by-key-and-scope-within-a-context-hierarchy) explains how different scopes determine the binding resolutions.\\n\\n## REST\\n\\n- Allowed array query parameter for a single value, like `{tags: \'hello\'}` where parameter `tags` is a string array. See PR [#6542](https://github.com/strongloop/loopback-next/pull/6542).\\n\\n- Supported property level configuration for hidden fields, like `@property({type: \'string\', hidden: true}) password: string`. This is the shortcut for specifying the hidden properties in model settings. See PR [#6484](https://github.com/strongloop/loopback-next/pull/6484).\\n\\n- `save()` method throwing error due to missing `idName` is fixed in PR [#6640](https://github.com/strongloop/loopback-next/pull/6640).\\n\\n- `modifySpec()` turns to an async function to allow async spec updates. See PR [#6655](https://github.com/strongloop/loopback-next/pull/6655).\\n\\n## Build\\n\\n- A force clean rebuild was added to the pre-start script for the LoopBack 4 examples. You can run `npm start` after removing artifacts without manually cleaning the `/dist` files. See PR [#6588](https://github.com/strongloop/loopback-next/pull/6588).\\n\\n- Turned on `exit` for mocha tests for the created LoopBack applications. See PR [#6475](https://github.com/strongloop/loopback-next/pull/6475).\\n\\n## Extensions\\n\\n- Module [@loopback/socketio](https://github.com/strongloop/loopback-next/tree/master/extensions/socketio) was added to use socket.io to expose controllers as WebSocket friendly endpoints.\\n\\n- Enable/disable the metrics endpoints in explorer when mounting the metric and health extensions. See PR [#6646](https://github.com/strongloop/loopback-next/pull/6646) and PR [#6645](https://github.com/strongloop/loopback-next/pull/6645).\\n\\n- Only add `MetricsObserver`, `MetricsPushObserver` and expose `/metrics` endpoints when they are enabled. See PR [#6644](https://github.com/strongloop/loopback-next/pull/6644).\\n\\n- The health check for applications running in container now returns a more accurate HTTP status code based on the state. For example, checking `/health` for application in states \'STARTING\', \'STOPPING\' or \'STOPPED\' returns 503. You can find more details in PR [#6648](https://github.com/strongloop/loopback-next/pull/6648).\\n\\n## Documentation Restructure\\n\\n- LoopBack 4 targets both API developers and extension developers, while the current website doesn\'t distinguish them clearly. This month we restructured the sidebar to classify the documentation into two parts: \\"Building LoopBack Applications\\" and \\"Extending LoopBack Framework\\". You can check [https://loopback.io/doc/en/lb4/Customizing-server-configuration.html](https://loopback.io/doc/en/lb4/Customizing-server-configuration.html) to view the new layout.\\n\\n- The instructions for implementing HTTP redirects and mounting an Express router are extracted into a standalone page under \\"How-to guides\\". You can check [https://loopback.io/doc/en/lb4/Customizing-routes.html](https://loopback.io/doc/en/lb4/Customizing-routes.html) to view the content.\\n\\n- Moved server recipes to how-to guides [Customizing-server-configuration](https://loopback.io/doc/en/lb4/Customizing-server-configuration.html). See PR [#6663](https://github.com/strongloop/loopback-next/pull/6663).\\n\\n## Examples\\n\\nTwo examples were added last month:\\n\\n- Example [webpack](https://github.com/strongloop/loopback-next/tree/master/examples/webpack) was added to demo LoopBack running inside the browser as client-side JavaScript application.\\n\\n- Example [socketio](https://github.com/strongloop/loopback-next/tree/master/examples/socketio) gives a basic implementation of socketio with LoopBack 4.\\n\\nYou can also download the examples by using the `lb4 example` command.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-oct-slack-qa","metadata":{"permalink":"/blog/2020-oct-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-28-oct-slack-qanda.md","source":"@site/blog/2020/2020-10-28-oct-slack-qanda.md","title":"Community Q&A Monthly Digest - Oct 2020","description":"Originally published on strongloop.com","date":"2020-10-28T00:00:00.000Z","formattedDate":"October 28, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":3.415,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Oct 2020","date":"2020-10-28T00:00:00.000Z","authors":"dhmlau","slug":"2020-oct-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 October 2020 Milestone Update","permalink":"/blog/october-2020-milestone"},"nextItem":{"title":"LoopBack 4 2020 Q3 Overview","permalink":"/blog/loopback-4-2020-q3-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIt\'s been 6 months since we created the [Slack channel](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) for LoopBack community. Thanks to your support, over 500 members had joined and new members are joining almost everyday! Let\'s take a look at the October edition of the \u201cCommunity Q&A Monthly Digest\u201d, capturing some of the Q&A in this forum. \\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**Question:** How to get the raw request in LoopBack 4 in a function without changing the parsing for the entire app?\\n\\n**Answer:** \\nIt\'s possible to get the raw request body with `x-parser`: [https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing](https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing). \\n-- _Answered by @Rifa Achrinza_\\n\\n--- \\n\\n**Question:** Is there any solution for tracking database migration, for example, migrations has been already run and possible rollback of migration? \\n\\n**Answer:**\\nI created a module which tracks migrations and executes scripts based on the db version compared to the app version, see [https://www.npmjs.com/package/loopback4-migration](https://www.npmjs.com/package/loopback4-migration). \\n--_Answered by @nflaig_\\n\\n\\nIdeally, LoopBack generates the DDL for users to review, and then it\u2019s up to the users to run it or not. It\'s a feature to be implemented, see [https://github.com/strongloop/loopback-next/issues/4757](https://github.com/strongloop/loopback-next/issues/4757).\\n--_Answered by @Diana Lau_\\n\\n\\n--- \\n\\n**Question:** I want to check whether a specified `categoryId` exists in a Mongo datasource, how can I do that? For example,\\n\\n```json\\n{\\"categories\\" : [\\n    {\\n        \\"categoryId\\" : \\"e759c15e-3552-4557-aa6b-c1396674c7e6\\",\\n        \\"name\\" : \\"test\\"\\n    },\\n    {\\n        \\"categoryId\\" : \\"e759c15e-3552-4557-aa6b-c1396674c7e5\\",\\n        \\"name\\" : \\"test1\\"\\n    }\\n]}\\n```\\n\\nI tried `await this.usersRepository.find({\'categories.categoryId\': \'e759c15e-3552-4557-aa6b-c1396674c7e5\'});` but getting an error message below:\\n```\\n> { \'categories.categoryId\': string; }\' is not assignable to parameter of type \'Filter<Users>\'. Object literal may only specify known properties, and \'\'categories.categoryId\'\' does not exist in type \'Filter<Users>\'\\n```\\n\\n**Answer:** \\nThe object you pass into `.find()` needs to be a `Filter` object. Make sure you `import { Filter } from \'@loopback/repository\';`, then you can: \\n```ts\\nconst existingCategoryFilter: Filter = {\\n  //...filter properties in here...\\n};\\nlet existingCategories = await this.categoryRepository.find(existingCategoryFilter);\\n```\\n-- Answered by @Jackson Hyde\\n\\nTo add on what @Jackson Hyde has mentioned, due to limitations on TypeScript types, nested objects are not included in the typings. Hence, you\'ll also need to override TypeScript\'s check by adding `// @ts-ignore` just before the repository function.\\n-- Answered by @Rifa Achrinza\\n\\n--- \\n\\n**Question:** I want to implement JWT refresh token in LoopBack 4. Can you suggest any good tutorial?\\n\\n**Answer:** You can follow this [https://loopback.io/doc/en/lb4/JWT-authentication-extension.html](https://loopback.io/doc/en/lb4/JWT-authentication-extension.html). \\n--_Answered by @Pratik Jaiswal_\\n\\n--- \\n\\n\\n**Question:** I used LoopBack CLI to create a \\"SHIPPING\\" model but it tries to do lowercase \\"Shipping\\" in the SQL with the quotes. An error occurred in the SQL statement because it is case sensitive with the quotes around it. How can I fix this? I\'m on LoopBack 4 and using the `loopback-connector-ibmi`.\\n\\n**Answer:**\\nDid u try to give the name in your model?\\n```ts\\n@model({name: \'member_membership\'})\\nexport class MemberMembership extends Entity {\\n    //...\\n}\\n```\\nSo `member_membership` is the table in the database.\\n-- Answered by @Mohammed\\n\\nThe `name` property customizes the model name, which is default to the class name if not provided. The model name is then used as the default for table name unless you further customize it for specific databases.\\n-- Answered by @Raymond Feng\\n\\n\\n--- \\n**Question:** I have a CORS issue with `passport-login` example when trying to establish connection with Google using Angular Frontend. I keep getting CORS error:\\n> Access to XMLHttpRequest at \'https://accounts.google.com/o/oauth2/v2/auth?...\' (redirected from \'http://localhost:3000/api/auth/thirdparty/google\') from origin \'http://localhost:4200\' has been blocked by CORS policy: Response to preflight request doesn\'t pass access control check: No \'Access-Control-Allow-Origin\' header is present on the requested resource.\\"\\n\\nBut the application is working fine with jade.\\n\\n**Answer:**\\nIn your login component you could do something like:\\n```ts\\nOAUTH2_LINK_GOOGLE = this.api_url+\'/api/auth/thirdparty/google?redirect_uri=\' + this.redir_url\\n  onGoogleSignIn() {\\n    window.location.href = this.OAUTH2_LINK_GOOGLE;\\n  }\\n```\\nBind the Google link to the above in the HTML code.\\n\\n-- Answered by @marg330\\n\\n---\\n\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"loopback-4-2020-q3-overview","metadata":{"permalink":"/blog/loopback-4-2020-q3-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-14-loopback-q3-overview.md","source":"@site/blog/2020/2020-10-14-loopback-q3-overview.md","title":"LoopBack 4 2020 Q3 Overview","description":"Originally published on strongloop.com","date":"2020-10-21T00:00:00.000Z","formattedDate":"October 21, 2020","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":2.94,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"slug":"loopback-4-2020-q3-overview","title":"LoopBack 4 2020 Q3 Overview","date":"2020-10-21T00:00:00.000Z","authors":"dhmlau","tags":["Quarterly update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Oct 2020","permalink":"/blog/2020-oct-slack-qa"},"nextItem":{"title":"LoopBack 3 End-of-Life","permalink":"/blog/2020-lb3-eol"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nFall is the season of the harvest. We\'re glad to see the good progress that we\'ve made in the past 3 months, together with the contributions from the community. In September, there is record high percentage (25.6%) of the merged PRs which are coming from the community. Thank you all!\\n\\nIf you haven\'t heard of [Hacktoberfest](https://hacktoberfest.digitalocean.com/) happening this month, check out the details in our [previous blog on Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/). There\'s still time to join. For those who participated, we appreciated your contributions. \\n\\nLet\'s take a look some of the highlights in the last quarter by you and the LoopBack team.\\n\\n\x3c!--truncate--\x3e\\n\\n## Integrate with TypeORM, TypeGraphQL and MessagePack\\n\\nOne of our strategies to add value to LoopBack is to leverage third-party libraries and integrate with them. We created the following extensions:\\n\\n- [`@loopback/typeorm`](https://www.npmjs.com/package/@loopback/typeorm): enables [TypeORM](https://typeorm.io/) support in LoopBack\\n- [`@loopback/graphql`](https://www.npmjs.com/package/@loopback/graphql): integrates with [TypeGraphQL](https://typegraphql.com/) for creating GraphQL API https://loopback.io/doc/en/lb4/GraphQL.html\\n- [`@loopback/rest-msgpack`](https://www.npmjs.com/package/@loopback/rest-msgpack): adds support to allow receive [MessagePack](https://msgpack.org/index.html) requests and transparently convert it to a regular JavaScript object. It provides a BodyParser implementation and a component to register it. \\n\\n\\n## Reorganize and Enhance Documentation\\n\\nTo better organize our content and easier for navigation/discovery, we reorganized our content based on [four quadrants](https://documentation.divio.com): tutorials, how-to guides, concepts and reference guides. To find out more how our documentation is organized, see [this documentation page](https://loopback.io/doc/en/lb4/#how-is-our-documentation-organized).\\n\\nBesides the ongoing [refactoring work](https://github.com/strongloop/loopback-next/issues/5783), we enriched the content and clarified on some of the topics that are frequently asked by you. For example, we:\\n- [cleaned up the documentation about LoopBack extension](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html) so that your extension creation experience would be easier and smoother. We\'ll continue to make some more improvement in this area as well. \\n- enhanced the content for [authentication](https://loopback.io/doc/en/lb4/Authentication-overview.html) and [authorization](https://loopback.io/doc/en/lb4/Authorization-overview.html) to include basic concepts, usage and examples. \\n- added a section on [accessing multiple models inside a transaction](https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction)\\n\\n## Other Key Feature Highlights\\n\\nThere were many features, fixes and enhancements in the past few months, and here are some highlights:\\n- completed the [HasManyThrough relation](https://loopback.io/doc/en/lb4/HasManyThrough-relation.html)\\n- [improved REST experience](https://strongloop.com/strongblog/august-2020-milestone/#improving-rest-experience) by adding a [middleware based sequence](https://loopback.io/doc/en/lb4/REST-middleware-sequence.html)\\n- added [support for applying multiple authentication strategies to one endpoint](https://loopback.io/doc/en/lb4/Authentication-component-decorator.html)\\n- implemented the [refresh token service](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token) in the `@loopback/authentication-jwt` extension\\n- added the [support of OpenAPI parameter AJV validation](https://github.com/strongloop/loopback-next/pull/6285) on simple types and [AJV formats for OpenAPI spec data type formats](https://github.com/strongloop/loopback-next/pull/6262).\\n\\n## Encourage Community Contributions\\n\\nIn a [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), we shared our views on encouraging more community contributions to match with our growing user community. The [switch to Developer Certificate of Origin (DCO)](https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco) as the contribution method is a change we made to make your contribution process easier. We also created a [community extension documentation page](https://loopback.io/doc/en/lb4/Community-extensions.html) to showcase LoopBack extensions built by the community. \\n\\nIn addition, we are pleased to have [@nabdelgadir](https://github.com/nabdelgadir) and [@madaky](https://github.com/madaky) to be one of our community maintainers. We appreciate the great work you\u2019ve done and welcome to the team.\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q3 for more details:\\n- [July summary](https://strongloop.com/strongblog/july-2020-milestone)\\n- [August summary](https://strongloop.com/strongblog/august-2020-milestone)\\n- [Sept summary](https://strongloop.com/strongblog/september-2020-milestone/)\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nYour contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n- Limited time only: [Join the Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/) in the month of October\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-lb3-eol","metadata":{"permalink":"/blog/2020-lb3-eol","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-07-lb3-eol.md","source":"@site/blog/2020/2020-10-07-lb3-eol.md","title":"LoopBack 3 End-of-Life","description":"Originally published on strongloop.com","date":"2020-10-14T00:00:00.000Z","formattedDate":"October 14, 2020","tags":[{"label":"LoopBack 3","permalink":"/blog/tags/loop-back-3"}],"readingTime":2.055,"hasTruncateMarker":true,"authors":[{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"},{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 3 End-of-Life","date":"2020-10-14T00:00:00.000Z","authors":["raymondfeng","bajtos","dhmlau"],"slug":"2020-lb3-eol","tags":["LoopBack 3"]},"prevItem":{"title":"LoopBack 4 2020 Q3 Overview","permalink":"/blog/loopback-4-2020-q3-overview"},"nextItem":{"title":"LoopBack 4 September 2020 Milestone Update","permalink":"/blog/september-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nLoopBack 3 is [approaching its end-of-life](https://loopback.io/doc/en/contrib/Long-term-support.html) at the end of the year for community support. For LoopBack 3 users, we hope the [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) helps you migrate your applications to version 4. \\n\\n\x3c!--truncate--\x3e\\n\\nAt the same time, we understand you might still be using LoopBack 3 and/or in the process of migrating to LoopBack 4. For the next few months after the EOL date, we\'ll try to support the community in the following ways:\\n\\n- **Helping the community to migrate**: we will continue to help with questions on [GitHub](https://github.com/strongloop/loopback) and [Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw), but it will be on a best-effort basis.\\n- **Security vulnerabilities**: Critical security fixes will be applied as needed by [IBM API Connect](https://www.ibm.com/cloud/api-connect).\\n- **New features**: No features will be accepted.\\n- **Bugs**: We are not going to actively fix any bugs reported by the community users. For critical bugs, maintainers will review and assess the risks of community-submitted PRs. If you\u2019re planning to submit a fix, it\u2019s the best to open a GitHub issue to discuss with the maintainers before proceeding.\\n\\nPlease note that the December 2020 end-of-life date is applicable to community support. If you are using LoopBack as part of the [IBM API Connect](https://www.ibm.com/cloud/api-connect) v5 or v2018 product, check with the product announcement for its end-of-support schedule.\\n\\n## What Should I Do If I\'m Still Using LoopBack 3?\\n\\nIf you already have LoopBack 3 applications running in production, it is highly recommended for you to review the [Understanding the differences between LoopBack 3 and LoopBack 4 page](https://loopback.io/doc/en/lb4/Understanding-the-differences.html) as mentioned in [one of our older blog posts](https://strongloop.com/strongblog/lb3-extended-lts/). There is also the [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) helping you to migrate your LoopBack 3 applications incrementally.\\n\\n## What If I Cannot Migrate to LoopBack 4 Any Time Soon?\\n\\nYour LoopBack 3 applications will continue to work even after LoopBack 3 reaches end of life. There will be _very_ minimal, if any, changes going into the codebase. In the case of addressing security vulnerabilities, you might need to fork the corresponding GitHub repos and apply security fixes. See [this blog](https://strongloop.com/strongblog/lb3-entered-maintenance-mode/) for the list of Node.js packages reaching end-of-life along with `loopback` repo. \\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nYour contribution is important to make LoopBack a sustainable open source project. Here is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"september-2020-milestone","metadata":{"permalink":"/blog/september-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-07-september-milestone.md","source":"@site/blog/2020/2020-10-07-september-milestone.md","title":"LoopBack 4 September 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-10-07T00:00:00.000Z","formattedDate":"October 7, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":3.23,"hasTruncateMarker":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"}],"frontMatter":{"title":"LoopBack 4 September 2020 Milestone Update","date":"2020-10-07T00:00:00.000Z","authors":"hacksparrow","slug":"september-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 3 End-of-Life","permalink":"/blog/2020-lb3-eol"},"nextItem":{"title":"LoopBack is participating in Hacktoberfest 2020","permalink":"/blog/2020-hacktoberfest"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWe bring another month of new features, fixes, and improvements in documentation and developer experience in LoopBack. Make sure to update your compatible projects with `lb4 update` if you want to update the underlying libraries to their latest versions.\\n\\nAlso, as part of our long-term effort to encourage more community contributions, we are participating in this year\u2019s [Hacktoberfest](https://hacktoberfest.digitalocean.com/). You can read more about the event and participation details at our [Hacktoberfest blogpost](https://strongloop.com/strongblog/2020-hacktoberfest/). \\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Enhancements\\n\\nThere has been a continuous effort to improve our documentation. Below are some highlights for this month:\\n\\n- A new documentation page, [Accessing HTTP request and response objects](https://loopback.io/doc/en/lb4/Accessing-http-request-response.html), was added explaining the various ways and places to access the request and response objects.\\n- We are working on a series of troubleshooting guides for LoopBack. This month we completed the [basic guide](https://loopback.io/doc/en/lb4/Troubleshooting.html) and [Debugging tests with Mocha](https://loopback.io/doc/en/lb4/Debugging-tests-with-mocha.html). [A few more areas](https://github.com/strongloop/loopback-next/issues/5701#issuecomment-700955686) that can be added to the guide.\\n- We added an [example app](https://github.com/strongloop/loopback-next/tree/master/examples/binding-resolution) demonstrating LoopBack 4\'s context binding resolution and dependency injection within a context hierarchy.\\n\\n## New Experimental Features\\n\\n- We have created a [GraphQL extension](https://github.com/strongloop/loopback-next/tree/master/extensions/graphql) that provides integration with GraphQL using [type-graphql](https://typegraphql.com/). Check out the [GraphQL example app](https://github.com/strongloop/loopback-next/tree/master/examples/graphql) for a sample app.\\n- We added support for parsing [MessagePack](https://msgpack.org/index.html) bodies. For usage, refer to the [documentation](https://github.com/strongloop/loopback-next/tree/master/bodyparsers/rest-msgpack).\\n\\n## Investigation on Better Handling of ObjectID in MongoDB\\n\\nWe spent a good amount of time to improve the experience of using `ObjectID` with LoopBack. We have identified the direction we want to take and the tasks to work on. You can learn more about the spike in issue [3456](https://github.com/strongloop/loopback-next/issues/3456).\\n\\n\\n## Fixes and Improvements\\n\\n- [added `.onStart()` and `.onStop()` methods of the `Application`](https://github.com/strongloop/loopback-next/pull/6230), so that they can be used to register observers as plain functions for the start and stop life-cycle events.\\n- [enhanced the `lb4 update` command](https://github.com/strongloop/loopback-next/pull/6398) to be runnable against any projects that use `@loopback/*` dependencies in `dependencies` or `devDependencies`, or `peerDependencies`; not just LoopBack 4 projects.\\n- [included the application build when running `migrate` and `openapi-spec` scripts](https://github.com/strongloop/loopback-next/pull/6390).\\n- added `@injectable`, so that `@injectable` can be used instead of `@bind`, which is in tune with other frameworks using Dependency Injection. `@bind` is not removed from the framework, so apps using `@bind` will not be affected.\\n- made the `keepAliveTimeout`, `headersTimeout`, `maxConnections`, `maxHeadersCount`, and `timeout` properties of the underlying [HTTP server](https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_server) instance [configurable by specifying them in the application config object](https://github.com/strongloop/loopback-next/pull/6267).\\n- [updated the generated application directory name during application scaffolding](https://github.com/strongloop/loopback-next/pull/6429) when application names involve numbers\\n- added [the ability to boot dynamic value provider classes and classes with `@inject`](https://github.com/strongloop/loopback-next/pull/6315).\\n- removed the `extension-` prefix from the affected extensions for their names to be consistent with other extension modules.\\n- [improved the overall experience of graphql configuration and subscriptions](https://github.com/strongloop/loopback-next/pull/6313) in LoopBack. \\n- added the [support of OpenAPI parameter AJV validation](https://github.com/strongloop/loopback-next/pull/6285) on simple types and [AJV formats for OpenAPI spec data type formats](https://github.com/strongloop/loopback-next/pull/6262).\\n- [updated the REST middleware](https://github.com/strongloop/loopback-next/pull/6284) so that it can now cached by the use of singleton binding scope.\\n- added Twitter example in the [Passport login example app](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login).\\n\\n## Community Contributions\\n\\nShout out to [Rifa Achrinza](https://github.com/achrinza) for explaining the differences between weak and strong relations in PR [6404](https://github.com/strongloop/loopback-next/pull/6404), [MessagePack PR](https://github.com/strongloop/loopback-next/pull/6155), and his numerous other PRs.\\n\\nOpening issues are community contributions too, so thanks to all those who help LoopBack become better by reporting bugs and usability issue. We try to address popular issues with higher priority, so continue to let us know the problems you face on [GitHub](https://github.com/strongloop/loopback-next/issues) or [Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw).\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-hacktoberfest","metadata":{"permalink":"/blog/2020-hacktoberfest","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-29-hacktoberfest.md","source":"@site/blog/2020/2020-09-29-hacktoberfest.md","title":"LoopBack is participating in Hacktoberfest 2020","description":"Originally published on strongloop.com","date":"2020-09-29T00:00:00.000Z","formattedDate":"September 29, 2020","tags":[{"label":"hacktoberfest","permalink":"/blog/tags/hacktoberfest"}],"readingTime":1.96,"hasTruncateMarker":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack is participating in Hacktoberfest 2020","date":"2020-09-29T00:00:00.000Z","authors":"bajtos","slug":"2020-hacktoberfest","tags":["hacktoberfest"]},"prevItem":{"title":"LoopBack 4 September 2020 Milestone Update","permalink":"/blog/september-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Sept 2020","permalink":"/blog/2020-sept-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs part of our long-term effort to [encourange more community\\ncontributions](../2020-community-contribution/),\\nLoopBack is going to participate in this year\'s\\n[Hacktoberfest](https://hacktoberfest.digitalocean.com).\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Hacktoberfest?\\n\\nHacktoberfest is an annual event encouraging participation in the open source community, open to everyone. Whether you\u2019re new to development, a student, or a long-time contributor, you can help drive the growth of open source and make positive impact on an ever-growing community. All backgrounds and skills levels are encouraged to complete the challenge.\\n\\nYou can learn more about Hacktoberfest values at [https://hacktoberfest.digitalocean.com/details#values](https://hacktoberfest.digitalocean.com/details#values).\\n\\nParticipants completing the challenge (contributing at least 4 valid pull requests) will earn a limited edition T-shirt.\\n\\n_Please note that any prizes are subject to conditions set by Hacktoberfest. IBM and the LoopBack team are not involved and not responsible in any way._\\n\\n## How to participate\\n\\nJoining the effort is simple. Just pick any problem that is itching you and send a pull request to fix it. You can also choose one of LoopBack\'s issues labelled as [Hacktoberfest](https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3AHacktoberfest) or [good first issue](https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3A%22good+first+issue%22) if you need inspiration.\\n\\nMake sure to familiarize yourself with Hacktoberfest\'s [Participation rules](https://hacktoberfest.digitalocean.com/details#rules) and [Quality standards](https://hacktoberfest.digitalocean.com/details#quality); and also LoopBack\'s [Contributing guide](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md).\\n\\nAre you new to open source? No problem, we have you covered! Check out Hacktoberfest\'s [Beginners](https://hacktoberfest.digitalocean.com/details#beginners) guides and LoopBack\'s guide on [submitting a pull request to LoopBack 4](https://loopback.io/doc/en/lb4/submitting_a_pr.html).\\n\\nFor the entire month of October, LoopBack\'s maintainers team will be giving extra priority to pull request reviews and helping new contributors along their journey to the first accepted contribution.\\n\\n## Focus areas\\n\\nWe are primarily looking for quick wins with long term impact: small enhancements improving your day-to-day experience while using LoopBack.\\n\\nAs you may know, we have introduced a new documentation system in June to better organize the content and make it easier to find the information you need (see [New Documentation Structure](../june-2020-milestone/#new-documentation-structure) and [Alignment Along Abstraction Levels](../june-2020-milestone/#alignment-along-abstraction-levels)). The reorganization is still in progress and we would love to get some help. In particular, extracting recipes from \\"Concepts\\" explanations into proper \\"How-to guides\\" is an easy way how to quickly score valuable pull requests. See the GitHub issue [loopback-next#5783](https://github.com/strongloop/loopback-next/issues/5783) for the list of docs pages to rework.\\n\\nHaving said that, all improvements are welcome!\\n\\n## Closing thoughts\\n\\nWe are looking forward to receive and eventually land your pull requests. Let\'s make LoopBack a better framework together!"},{"id":"2020-sept-slack-qa","metadata":{"permalink":"/blog/2020-sept-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-16-sept-slack-qanda.md","source":"@site/blog/2020/2020-09-16-sept-slack-qanda.md","title":"Community Q&A Monthly Digest - Sept 2020","description":"Originally published on strongloop.com","date":"2020-09-16T00:00:00.000Z","formattedDate":"September 16, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Sept 2020","date":"2020-09-16T00:00:00.000Z","authors":"dhmlau","slug":"2020-sept-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack is participating in Hacktoberfest 2020","permalink":"/blog/2020-hacktoberfest"},"nextItem":{"title":"LoopBack 4 August 2020 Milestone Update","permalink":"/blog/august-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWelcome back to the September edition of the \\"Community Q&A Monthly Digest\\", in which we are curating some of the Q&A that we think it might be helpful to you. Thank you for posting your questions and helping your fellow LoopBack users. \\n\\nThe [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) is a platform where LoopBack users are helping each other out. If you haven\'t joined already, sign up today!\\n\\nLet\'s take a look at some of the questions and answers from the community.\\n\\n\x3c!--truncate--\x3e\\n\\n**Question:** Is it possible to use auto-generate timestamp property in a model?\\n\\n**Answer:** To set the property to the current datetime upon Model Create, you can:\\n```ts\\n@property({\\ntype: \'date\',\\ndefaultFn: \'now\',\\n})\\ntimestamp?: string;\\n```\\n\\n---\\n\\n**Question:** Does LoopBack has any built-in cache? Or should we implement that to make response even faster?\\n\\n**Answer:**\\nWe currently don\u2019t but there are some example implementations for your reference:\\n- [caching interceptor](https://github.com/strongloop/loopback-next/tree/master/packages/rest/src/__tests__/acceptance/caching-interceptor)\\n- [caching service](https://github.com/strongloop/loopback-next/blob/master/examples/greeting-app/src/caching-service.ts)\\n\\n--- \\n\\n**Question:** I want to perform schema migration but the order of tables is important beacause there are some relation and foreign key between them. How can I set the order of tables to be migrated?\\n\\n**Answer:** Within `migrate.ts`, `app.migrateSchema` accepts a `model` array. So it can be updated as such:\\n```ts\\nawait app.migrateSchema(Object.assign(<SchemaMigrationOptions>{\\nmodels: [/* Add model names here */]\\n}, existingSchema));\\n```\\nLike with any auto-migration, please do take a backup of the database before running the migration.\\n\\n---\\n\\n**Question:** I wanted to implement an API like the `file-transfer` example on the docs but with more endpoints with different storage directories. How is that possible?\\n\\n**Answer:** You can have different endpoints backed by different methods using `post /<url>` decoration as you see at [https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28](https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28). If you want to calculate the file path per request, you can instantiate a new upload service instance instead of using the injected one.\\n\\n---\\n\\n**Questions:** I work with LoopBack in a k8 cluster, when i try to implement JWT authentication, all users get the same token, and the data in that token is not equal to that user. Is there any way to fix it besides saving the token in a database? \\n\\n**Answer:** Typically JWT tokens are generated using a combination of a secret and some sort of UUID of the user. When they successfully authenticate, a token is generated and returned. When you need to verify the token, you decode it using the secret, giving you the UUID of the user. This means that you don\u2019t actually have to save a token at all. Here\u2019s how we are generating tokens for our users.\\n\\n```ts\\nconst userInfoForToken = {\\nid: userProfile.id,\\nname: userProfile.name,\\nroles: userProfile.roles,\\n};\\n// Generate a JSON Web Token\\nlet token: string;\\ntry {\\ntoken = await signAsync(userInfoForToken, this.jwtSecret, {\\nexpiresIn: Number(this.jwtExpiresIn),\\n});\\n} catch (error) {\\nthrow new HttpErrors.Unauthorized(`Error encoding token : ${error}`);\\n}\\n```\\nIn this context, `signAsync` is a `promisify`\u2019d version of `jsonwebtoken.sign()`.\\n\\n--- \\n\\n**Question:** I want to use the LoopBack app cli-command programmatically. Is this possible?\\n\\n**Answer:**\\nYou can try to `require(\'@loopback/cli/lib/cli\')`. See [https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js](https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js). `cli.js` has logic to create yeoman env and register generators.\\n\\n---\\n\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"august-2020-milestone","metadata":{"permalink":"/blog/august-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-02-august-milestone.md","source":"@site/blog/2020/2020-09-02-august-milestone.md","title":"LoopBack 4 August 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-09-02T00:00:00.000Z","formattedDate":"September 2, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":4.92,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 August 2020 Milestone Update","date":"2020-09-02T00:00:00.000Z","authors":"jannyhou","slug":"august-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Sept 2020","permalink":"/blog/2020-sept-slack-qa"},"nextItem":{"title":"Enriching LoopBack and its Community - You are Invited!","permalink":"/blog/2020-community-contribution"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nOur focus in August is the documentation restructure. The layout of several main sections are reorganized for easier navigation. Another significant improvement is about the request handling. More flexible approaches of adding LoopBack style middleware and express middleware are introduced in `@loopback/rest`.\\n\\nWe would like to appreciate [Agnes Lin](https://github.com/agnes512)\'s great contributions during her internship. There has been so much fun and pleasure working with her! She will be continue helping us part time. Good luck with your school.\\n\\nKeep reading to learn about the improved documentation and recently added features!\\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Enhancements\\n\\n### Reorganizing the Concepts List\\n\\nThe fundamental concepts were listed in section \\"Behind the Scene\\" sorted by the publish date. To have a concise name and a more organized layout for users to search, we renamed the section to be \\"Concepts\\" and restructured the documentations into the following sub-sections:\\n\\n- Crafting LoopBack 4\\n- Core\\n- REST APIs\\n- Data Access\\n\\nYou can visit the more organized contents in [https://loopback.io/doc/en/lb4/Concepts.html](https://loopback.io/doc/en/lb4/Concepts.html).\\n\\n### Reorganizing How-to Guide List\\n\\nThe \\"How-to Guide\\" is also reorganized by topics. The existing tutorials are classified into the following sections for users to search quickly:\\n\\n- Building REST APIs\\n- Creating Other Forms of APIS\\n- Accessing Databases\\n- Accessing Services\\n- Validating Data\\n- Securing Applications\\n- Deploying Applications\\n- Troubleshooting\\n\\nYou can visit the more organized contents in [https://loopback.io/doc/en/lb4/](https://loopback.io/doc/en/lb4/).\\n\\n### Adding Property Types\\n\\nWe added documentation for LoopBack 4 types including the syntax of model property definition in page [https://loopback.io/doc/en/lb4/LoopBack-types.html](https://loopback.io/doc/en/lb4/LoopBack-types.html).\\n\\n### Adding Application Layout\\n\\nWe added project layout for LoopBack 4 applications in page [https://loopback.io/doc/en/lb4/Loopback-application-layout.html](https://loopback.io/doc/en/lb4/Loopback-application-layout.html), users can find each file\'s meaning and responsibility in the application scaffolded by `lb4 app`.\\n\\n### Cleaning up Extensions\\n\\nWe are seeing more users creating extensions and it\'s a good time to make the extension creation experience easier and smoother. Therefore the extension generator and related documentations are updated to align with the latest code base. You can check the latest material in:\\n\\n- [Concept Component](https://loopback.io/doc/en/lb4/Component.html)\\n- [Creating Components](https://loopback.io/doc/en/lb4/Creating-components.html)\\n\\nAnd run `lb4 extension` to create extensions with the new component template.\\n\\n### Renaming Legacy Juggler\\n\\nThe term \\"legacy juggler bridge\\" might give the wrong impression to users that the `loopback-datasource-juggler` won\'t be supported or not working well because of the \\"legacy\\" word. So we removed the misleading word \\"legacy\\" across the documentations and CLI prompts.\\n\\n`loopback-datasource-juggler` is still well maintained and we have a plan to modernize it. Feel free to join the discussion in [issue #5956](https://github.com/strongloop/loopback-next/issues/5956) if you are interested.\\n\\n## Investigation\\n\\n### Restructuring Connector Reference\\n\\nThe current connector contents are mixed with how-to guides, references and tutorials. The spike story [5961](https://github.com/strongloop/loopback-next/issues/5961) came up with a better plan to reorganize them into the four quadrants layout:\\n\\n- Connector concepts, its role in the framework and its relations to other artifacts will go to section \\"Concepts/Datasources\\".\\n- Datasource level configurations and features like migration/discovery will go to section \\"How-to Guides/Configuring DataSource\\".\\n- All the other connector specific tutorials will go to section \\"Tutorials/Connect to back-end tutorial\\".\\n\\n## Improving REST Experience\\n\\n### REST Middleware\\n\\nA big feature took place in `@loopback/rest` to support more flexible ways to add express middleware for handling requests. PR [#5366](https://github.com/strongloop/loopback-next/pull/5366) added a middleware based sequence and wrapped existing actions as middleware. The new usage is documented in the following pages:\\n\\n- Concept [Middleware](https://loopback.io/doc/en/lb4/Middleware.html) in LoopBack 4.\\n- [Middleware-based Sequence for REST Server](https://loopback.io/doc/en/lb4/REST-middleware-sequence.html)\\n\\n### Optimizing Middleware Based Sequence\\n\\nPR [#6062](https://github.com/strongloop/loopback-next/pull/6062) optimized middleware based sequence and its middleware providers to be singletons:\\n\\n- MiddlewareSequence is now a singleton and it caches a list of middleware.\\n- Built-in middleware providers are now singletons.\\n- Validating sorted middleware groups is supported. Error will be reported if a middleware is unreachable.\\n\\n### Improving Serviceability of @loopback/rest\\n\\nThere are several improvements made for easier debugging and error tracing in `@loopback/rest` module:\\n\\n- PR [#6159](https://github.com/strongloop/loopback-next/pull/6159) added more debug information for request parsing, routing, and method invocation. The debugging keywords are `loopback:rest:find-route`, `loopback:rest:invoke-method`, and `loopback:rest:parse-param`.\\n\\n- The route description is improved in PR [#6188](https://github.com/strongloop/loopback-next/pull/6168) to include the verb and the path.\\n\\n- PR [#6171](https://github.com/strongloop/loopback-next/pull/6171) added HTTP server options and status information in the debug string. The debugging keyword is `loopback:http-server`.\\n\\n## Switching to DCO\\n\\nTo [make your contribution process simpler](https://strongloop.com/strongblog/switching-to-dco/), we have changed the contribution method from CLA to DCO for `loopback-next` and most of the connector repositories. Be sure to sign off your commits using the `-s` flag or adding `Signed-off-By: Name<Email>` in the commit message. For more details, see [https://loopback.io/doc/en/contrib/code-contrib.html](https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco).\\n\\n## Miscellaneous\\n\\n- PR [#6172](https://github.com/strongloop/loopback-next/pull/6172) makes sure the REST options are passed to http-server.\\n\\n- PR [#6105](https://github.com/strongloop/loopback-next/pull/6105) Reworked the validation code to use exiting `RestHttpErrors.invalidData` error. This way the error object includes the parameter name in the error message & properties and has a machine-readable code property.\\n\\n## Community Contributions\\n\\nThank you for the contribution coming from the community. Here are some of the contributions that we\'d like highlight:\\n\\n- Thanks to [Nico Flaig](https://github.com/nflaig)\'s [contribution](https://github.com/strongloop/loopback-next/pull/5735)! Now `@loopback/authenticate` supports applying multiple authentication strategies to one endpoint. The new syntax of decorator is:\\n  ```ts\\n  @authenticate(\\n    strategyOne | strategyOneWithOptions, \\n    strategyTwo | strategyTwoWithOptions\\n  )\\n  myFunction() {}\\n  ```\\n  The new syntax is well documented in page [Authentication Decorator](https://loopback.io/doc/en/lb4/Authentication-component-decorator.html).\\n\\n- We appreciate [Madaky](https://github.com/madaky)\'s feature PR [#5589](https://github.com/strongloop/loopback-next/pull/5589) which adds the token refresh service in extension `@loopback/authentication-jwt`. You can check the [new guide](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token) to try it.\\n\\n- Many thanks to [Rifa Achrinza](https://github.com/achrinza)\'s contribution in PR [6153](https://github.com/strongloop/loopback-next/pull/6153). The order filter now supports string value as the shortcut in addition to the existing array value. You can specify an order filter as `{order: \'name DESC\'}`.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-community-contribution","metadata":{"permalink":"/blog/2020-community-contribution","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-27-community.md","source":"@site/blog/2020/2020-08-27-community.md","title":"Enriching LoopBack and its Community - You are Invited!","description":"Originally published on strongloop.com","date":"2020-08-27T00:00:00.000Z","formattedDate":"August 27, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"}],"readingTime":5.32,"hasTruncateMarker":true,"authors":[{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"},{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Enriching LoopBack and its Community - You are Invited!","date":"2020-08-27T00:00:00.000Z","authors":["raymondfeng","bajtos","dhmlau"],"slug":"2020-community-contribution","tags":["Community"]},"prevItem":{"title":"LoopBack 4 August 2020 Milestone Update","permalink":"/blog/august-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - July 2020","permalink":"/blog/2020-jul-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAlmost two years ago, [LoopBack 4 was released and announced](https://strongloop.com/strongblog/loopback-4-ga) at Node+JS Interactive event. Thanks to your support, we now have over 110k downloads per month on npmjs.com and over 3000 GitHub stars on the [loopback-next repo](https://github.com/strongloop/loopback-next). Recently, we created the [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to provide a platform for the community and us helping each other. We are glad to see an increasing engagement in that front as well!\\n\\nWith the core of the framework maturing and contributions shifting to the LoopBack extensions, we think LoopBack has entered a new stage and it\'s time to revisit our approach to planning work, delivering features, fixing bugs, and improving documentation.\\n\\n\x3c!--truncate--\x3e\\n\\n## A Short History of LoopBack 4\\n\\nAs we started the rewrite of LoopBack from ground up back in early 2017 (see the [kick-off post](https://strongloop.com/strongblog/announcing-loopback-next/)), it quickly became clear the scope is huge and we must be very disciplined in planning and scoping features if we want to reach a meaningful release in a reasonable time. We were working in short iterations, burning through a backlog of tasks we identified as required for the initial release. Eventually we published the first [Developer Preview](https://strongloop.com/strongblog/loopback-4-developer-preview-release) in November 2017, followed by more preview releases, until we finally released [LoopBack 4 GA](https://strongloop.com/strongblog/loopback-4-ga) in October 2018. Keeping a tight control over backlog prioritization and milestone planning allowed us to achieve this great milestone.\\n\\nSuch a tight planning worked great while it was mostly the IBM core team working on the project. On the flip side, this process made it sometimes difficult to juggle our time between working on our roadmap vs helping community contributors; and often created the impression that the core team will eventually implement all missing features, given enough time, and community contributions are not really necessary. This was acceptable while the framework offered only a limited subset of features needed to build real applications, because there were only few early adopters to support and it was indeed the core team that was contributing most of the improvements.\\n\\nAs more and more users discover and try LoopBack, they may find feature gaps, identify bugs, or even come up great ideas. If the perception is that somebody else (the core team) will eventually implement those features, then there are little incentives for users to step up and join the project as contributors. As a result, the number of maintainers is not keeping up with the growing number of users, leading to ever-increasing load on existing maintainers and eventually maintainers burning out or leaving the project. (You can read more on this topic in [Healthy Open Source](https://medium.com/the-node-js-collection/healthy-open-source-967fa8be7951) and [Sustaining and growing LoopBack as a successful open source project](https://medium.com/loopback/sustaining-loopback-project-b67fd59673e4)).\\n\\nMany of us has experienced this ourselves in the past, when LoopBack 3 got to the stage where the maintainers were overwhelmed with the amount of incoming issues and pull requests. We feel it\'s time to turn the ship around and make sure we don\'t repeat the same mistakes in LoopBack 4. As LoopBack 4 user base grows, it is essential to grow our contributor community joining forces to enhance the framework together.\\n\\n## Encourage More Community Contributions\\n\\nWe have been always actively looking for new ways to attract more contributions from our community and grow contributors into maintainers.\\n\\nTo make it easy for our users to find easy-to-implement improvements to contribute, we are adding `good first issue` and `help wanted` labels on GitHub issues, and listing items we\'d like to see progress in our roadmaps and milestones.\\n\\nIn addition, we recently made [an announcement](https://strongloop.com/strongblog/switching-to-dco/) about switching the contribution method to Developer Certificate of Origin (DCO) from Contributor License Agreement (CLA). We hope this will make the contribution process easier for you.\\n\\nGoing forward, we would like to focus more on enabling more of you to contribute by mentoring and coaching them to complete their PRs and providing technical guidance on their work if needed. We would also like to create more examples and starter code for experimental features, and invite the community to enhance those features collectively.\\n\\nTo further encourage community contributions, we are going to open our planning process too and start building the roadmap together with our community, based on what tasks individual contributors would like to work on.\\n\\n## Inspire More Community Extensions\\n\\nOne of the strengths of LoopBack 4 is its extensibility. You can create extensions to extend the programming model and integration capability of the LoopBack 4 framework.\\n\\nWe created a number of extensions, for example, the recently published [TypeORM](https://github.com/strongloop/loopback-next/tree/master/extensions/typeorm) and [pooling service](https://github.com/strongloop/loopback-next/tree/master/extensions/pooling) extensions. These can be served as references to inspire you to build extensions to fit your needs. \\n\\nMoreover, we\'ll be working on [cleaning up the extension template and documentation](https://github.com/strongloop/loopback-next/issues/5336), so that the developer experience of building an extension is smoother.\\n\\nAt the same time, we\'re happy to see more extensions built by the community, see the [community extensions page](https://loopback.io/doc/en/lb4/Community-extensions.html). Let\'s build this list together by submitting a PR to include your extensions!\\n\\n## Potential Work under Our Radar\\n\\nWe have been investigating a few areas that can further improve LoopBack 4 based on our visions, even more importantly community feedbacks. There are some ideas for inspiration.\\n\\nModernizing the juggler has been under our radar. We would like to position LoopBack as the composition layer that brings API/microservice stories together. It will include built-in capabilities such as REST API and Data/Service access as well as integration with other frameworks. We\'re planning to publish a blog to cover that. Stay tuned.\\n\\nBelow are areas that we\'ve done some initial investigation/implementation and would like to invite you to join us to build a more complete story. It includes continuing to improve our documentation and building more education materials. Likewise, we\'ll be publishing blog posts to share our plans and visions in the following areas:\\n\\n- [Multi-tenancy](https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy)\\n- [Web socket](https://github.com/raymondfeng/loopback4-example-websocket)\\n- [Kafka integration](https://github.com/strongloop/loopback4-example-kafka)\\n- [GraphQL](https://github.com/strongloop/loopback-next/pull/5545)\\n- [gRPC](https://github.com/strongloop/loopback-next/pull/6134)\\n\\n\\n## Conclusion\\n\\nYour contribution is important to make LoopBack a sustainable open source project. We hope our plans to adopt DCO, improve the extension development experience and focus on enabling contributors would make your contribution experience smoother and better. We are also planning on sharing our views on a few technologies. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-jul-slack-qa","metadata":{"permalink":"/blog/2020-jul-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-19-july-slack-qanda.md","source":"@site/blog/2020/2020-08-19-july-slack-qanda.md","title":"Community Q&A Monthly Digest - July 2020","description":"Originally published on strongloop.com","date":"2020-08-19T00:00:00.000Z","formattedDate":"August 19, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":2.5,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - July 2020","date":"2020-08-19T00:00:00.000Z","authors":"dhmlau","slug":"2020-jul-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"Enriching LoopBack and its Community - You are Invited!","permalink":"/blog/2020-community-contribution"},"nextItem":{"title":"LoopBack 4 July 2020 Milestone Update","permalink":"/blog/july-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWelcome to the July edition of the \\"Community Q&A Monthly Digest\\", curating some of the Q&A that we think it might be helpful to you. Let\'s take a look.\\n\\n\x3c!--truncate--\x3e\\n\\n--- \\n**Question**: Is there a built-in support in LB4 for database retries if the db responds with 429 for example? Or is it possible to overwrite a single method to implement this for all db operations similiar to how entityToData can be overwriten if data should be added to all create/update operations.\\n\\n**Answer**: It\'s better to intercept execution errors inside the datasource, not at repository level. I created a small example to demonstrate the approach. In a real app, I would extract the code into a mixin that can be applied on any DataSource class.\\nhttps://gist.github.com/bajtos/2379d7c6df31e477aaa3a3f6ea87886c\\n\\n--- \\n\\n**Question**: Is it possible to connect my API to a webhook, so that when an event is triggered, it notifies my API? What documentation could I read about doing this?\\n\\n**Answer**: A webhook is just another HTTP request. Depending on the architecture of the lb4 app, this request can be done in a Service, an Interceptor, or a Controller, using either the built-in Node.js API or third-party HTTP request modules such as Axios.\\nBesides that, no special configuration is needed for web hooks.\xa0\\n\\n---\\n\\n**Question**: How to implement\xa0`findOrCreate`\xa0instead\xa0`await exists`\xa0+\xa0`await create`?\\n\\n**Answer**: You can extend\xa0`DefaultCrudRepository`\xa0with\xa0`findOrCreate`\xa0\u2019s implementation.\\nThen your repositories extend the custom one. Similar to\xa0how `AccountRepository` extends `MyDefaultCrudRepository` in the tutorial [https://loopback.io/doc/en/lb4/Repositories.html#define-repositories](https://loopback.io/doc/en/lb4/Repositories.html#define-repositories).\\n\\n---\\n\\n**Question**: I started using Loopback 4. How to redirect home screen of LB4 to angular 8 running on some other port?\\n\\n**Answer**: It should be possible to replace the `.static` function in the app class with `.redirect`: [https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html](https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html).\\n\\n---\\n\\n**Question**: The compiler throws the error `error TS2322: Type \'string\' is not assignable to type PredicateComparison<..>` when I tried some repository CRUD methods. Is it a bug or anything wrong with my setup?\\n\\n**Answer**: It is a type issue. For [repository CRUD methods](https://loopback.io/doc/en/lb4/apidocs.repository.defaultcrudrepository.html#methods), they may take in `Filter` or `Where` type parameters. For those cases, you will need to specify the type of it, for example:\\n\\n```ts\\nconst userCount = await this.userRepository.count({tags: \'admin\'} as Where<User>);\\nconst vipUser = await this.userRepository.find({where:{tags: \'vip\'}} as Filter<User>);\\n```\\n\\n---\\n\\n**Question**: We have a project which includes multi-tenancy based multi-database pattern (We have Common DB which stores Client Informations (Users, DB configs etc), and each clients has own database). How can I perform switching datasource dynamically with the multi-tenancy based project?\\n\\n**Answer**: You can check out [the multi-tenancy example](https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy) and [the GH issue](https://github.com/strongloop/loopback-next/issues/5056) that discusses about multi-tenancy and dynamic schema selection. You can create datasources at runtime. Meanwhile, if the number of dbs is limited, you can define them upfront and reuse them, see [Creating a datasource at runtime](https://loopback.io/doc/en/lb4/DataSources.html#creating-a-datasource-at-runtime). Then the tenant strategy can inject a repository talking to your common DB to load configs per logged in user.\\n\\n---\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"july-2020-milestone","metadata":{"permalink":"/blog/july-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-05-july-milestone.md","source":"@site/blog/2020/2020-08-05-july-milestone.md","title":"LoopBack 4 July 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-08-05T00:00:00.000Z","formattedDate":"August 5, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":5.975,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 July 2020 Milestone Update","date":"2020-08-05T00:00:00.000Z","authors":"agnes512","slug":"july-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"Community Q&A Monthly Digest - July 2020","permalink":"/blog/2020-jul-slack-qa"},"nextItem":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","permalink":"/blog/switching-to-dco"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWe can\'t believe that it is already August! Let\'s check out the work we did in July:\\n\\n- [HasManyThrough Relation](#hasmanythrough-relation)\\n- [Documentation Enhancements](#documentation-enhancements)\\n- [Reorganize Code and Docs Along Abstraction Levels](#reorganize-code-and-docs-along-abstraction-levels)\\n- [Bug Fixes](#bug-fixes)\\n- [Community Contribution](#community-contribution)\\n\\n\x3c!--truncate--\x3e\\n\\n## HasManyThrough Relation\\n\\nA `HasManyThrough` relation sets up a many-to-many connection through another model. A real-world example is a doctor has many patients through appointments. The relation can be defined with `@hasMany` decorator as:\\n\\n```ts\\n  //...\\n  @hasMany(() => Patient, {through: {model: () => Appointment}})\\n  patients: Patient[];\\n```\\n\\nWe finished most of implementation in June, and we added `HasManyThrough` to the relation CLI and also related documentation so that users could learn it better. Please make sure you have `@loopback/repository` with version 2.10.0 or higher installed.\\n\\n### Documentation\\n\\nThe [`hasManyThrough` Relation](https://loopback.io/doc/en/lb4/HasManyThrough-relation.html) page is being added under [Relations](https://loopback.io/doc/en/lb4/Relations.html) page. We introduced the use cases, definitions, and examples of how you can customize the relation to meet your requirements. Nevertheless, as mentioned in the docs, because it is an experimental feature, there are some missing functionalities such as [`inclusionResolver`](https://github.com/strongloop/loopback-next/issues/5946). Feel free to join discussions on GitHub or even contribute :D\\n\\n### CLI Command\\n\\nCommand line interfaces (CLI) is a convenient tool to help you create artifacts quickly. We added `hasManyThrough` relation to `lb4 relation` command. With a few prompts, you can define a `hasManyThrough` relation easily:\\n\\n```sh\\n$ lb4 relation\\n? Please select the relation type hasManyThrough\\n? Please select source model Doctor\\n? Please select target model Patient\\n? Please select through model Appointment\\n? Foreign key name that references the source model to define on the through model\\n doctorId\\n? Foreign key name that references the target model to define on the through model\\n patientId\\n? Source property name for the relation getter (will be the relation name)\\n patients\\n```\\n\\nDon\'t forget to install the latest `@loopback/cli` to try it out!\\n\\n## Documentation Enhancements\\n\\nOne of our recent targets is to upgrade the documentation system. As you can see on the site, we reorganized most of the items in sidebar. In the overview page, the section [How is our documentation organized](https://loopback.io/doc/en/lb4/index.html#how-is-our-documentation-organized) introduces how you can find documentation in the four quadrants.\\n\\nBesides improving the structure, here are some documentation enhancements we\'d like to share:\\n\\n### Apply JWT Authentication Component to Shopping Example\\n\\nThe [`@loopback/authentication-jwt`](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) component was created to make adding JWT authentication to your application earlier. We\'ve applied it to the [shopping example](https://github.com/strongloop/loopback4-example-shopping). To find out more, see the [JWT authentication extension documentation page](https://loopback.io/doc/en/lb4/JWT-authentication-extension.html).\\n\\n### How to Access Multiple Models in a Single Transaction\\n\\nA _transaction_ is a sequence of data operations performed as a single logical\\nunit of work. LoopBack 4 has many relational database connectors support such logic requirements. We added a section [Accessing multiple models inside one transaction](https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction) to show how it can be achieved.\\n\\n### Custom AJV Validation\\n\\nWe realized that the current AJV Validation documentation is missing a crucial information piece on how to enable custom validation and error messages. Please check out the section [Custom validation rules and error messages](https://loopback.io/doc/en/lb4/Model.html#custom-validation-rules-and-error-messages) and [Validation example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) for details.\\n\\n## Reorganize Code and Docs Along Abstraction Levels\\n\\nAs LoopBack 4 is growing larger, we decide to hide some low-level tools from users so that the framework looks neat and friendly. In July, we hid module [`@loopback/openapi-v3`](https://github.com/strongloop/loopback-next/tree/master/packages/openapi-v3) as it can be loaded from [`@loopback/rest`](https://github.com/strongloop/loopback-next/tree/master/packages/rest).\\n\\nWe removed `@loopback/openapi-v3` from dependencies and also our CLI template dependencies. If you check the page [Extending OpenAPI Specification](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) or other related pages, you will notice it is now hidden and replaced by `@loopback/rest`.\\n\\n## Execute Raw NoSQL Queries\\n\\nIf you have a SQL database as back-end service, you can execute raw queries using the `execute` method that we have in `Repository`, and it works great. Unfortunately, `execute` does not work for NoSQL connectors such as MongoDB as they require more than just a `command` string and `args` array.\\n\\nIn July, we started working on how we can improve LB4 API and MongoDB connector API to make it easy to execute raw MongoDB commands. We added a `DataSource.execute` method to the Juggler, and leveraged it to support different `execute` styles. We also added support for non-SQL variants of `Repository.execute()` in the `loopback/repository` module. More works will be done in August. You can check the progress in story [Execute raw NoSQL queries](https://github.com/strongloop/loopback-next/issues/3342) on GitHub if you\'re interested.\\n\\n## Bug Fixes\\n\\nThere was a story that a boy woke up in one morning and found himself transformed into a gigantic bug. We don\'t want that to happen, so we fixed a few bugs in July:\\n\\n### Unable to Perform Nested Filters\\n\\nAs we added the support for coercing query object with schema last month, it exposed a bug that the nested scope filters don\'t have the correct constraints. It is being fixed and released in `@loopback/rest@5.2.1`. Now you can include nested navigational properties using filter like:\\n\\n```ts\\n{\\n  include: [\\n    {\\n      relation: \\"orders\\",\\n      scope: {\\n        // nested relation\\n        include: [\\n          {\\n            relation: \\"someOtherRelation\\",\\n          },\\n  ...\\n}\\n```\\n\\n### Query with Dollar Signs in MongoDB Connector\\n\\nIf you\'re using MongoDB, you would be used to have dollar signs ($) in your queries. However, the dollar signs are not needed in LB4 general queries, and that\'s why [loopback-mongodb-connector](https://github.com/strongloop/loopback-connector-mongodb) users get confused usually. To improve the user experience, we made some changes in the connector [loopback-mongodb-connector](https://github.com/strongloop/loopback-connector-mongodb), so that the connector users won\'t get errors even if the queries contain extra dollar signs. The change is released in `@loopback-connector-mongodb@5.3.0`\\n\\n## Community Contribution\\n\\n### New Community Maintainers\\n\\nWe are glad to have [@nabdelgadir](https://github.com/nabdelgadir) and [@madaky](https://github.com/madaky) to be one of our community maintainers. We appreciate your great work you\'ve done and welcome to the team.\\n\\n### Highlights\\n\\n- As LoopBack 4 is designed to be more scalable and extensible, there are numbers of extensions created by the open source community. You may find some interesting and helpful extensions under the [Community extensions](https://loopback.io/doc/en/lb4/Community-extensions.html) page. We are also considering adding example usages of LB4 from the community. Please let us know if you got any great extensions or examples you would like to share with us!\\n- The community user [@zyqVizzzzz](https://github.com/zyqVizzzzz) translated several tutorials for LB4 in Chinese. They can be found in the page [\u6559\u7a0b\uff08Tutorials\uff09](https://loopback.io/doc/zh/lb4/Tutorials). We really appreciate it! If you\'re interested in translating LB4 documentation, the instructions can be found in the page [Translation](https://loopback.io/doc/en/contrib/translation.html).\\n\\nIn order to make your contribution process simpler, we will be gradually changing the contribution method from Contribution License Agreement (CLA) to Developer Certificate of Origin (DCO). Take a look at [this blog](https://strongloop.com/strongblog/switching-to-dco/) to find out what the changes are and what it means to you.\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [August Milestone](https://github.com/strongloop/loopback-next/pull/6028).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"switching-to-dco","metadata":{"permalink":"/blog/switching-to-dco","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-29-dco.md","source":"@site/blog/2020/2020-07-29-dco.md","title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","description":"Originally published on strongloop.com","date":"2020-07-29T00:00:00.000Z","formattedDate":"July 29, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Contribution","permalink":"/blog/tags/contribution"}],"readingTime":1.615,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","date":"2020-07-29T00:00:00.000Z","authors":"dhmlau","slug":"switching-to-dco","tags":["Community","Contribution"]},"prevItem":{"title":"LoopBack 4 July 2020 Milestone Update","permalink":"/blog/july-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Jun 2020","permalink":"/blog/2020-Jun-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nSince the beginning of the LoopBack project, we have been using the Contributor License Agreement (CLA) as the contribution method. Contributors need to sign each CLA for each LoopBack repository they\'re contributing. To simplify the contribution process and encourage community contributions, we are planning to gradually switch to use [Developer Certificate of Origin (DCO)](https://developercertificate.org/) as the contribution method. \\n\\n\x3c!--truncate--\x3e\\n\\n## What Is Developer Certificate of Origin (DCO)?\\n\\nAs an alternative to CLA, a Developer Ceritifcate of Origin (DCO) is a more lightweight contribution method. According to [Wikipedia](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin):\\n\\n> Instead a signed legal contract, a DCO is an affirmation that the source code being submitted originated from the developer, or that the developer has permission to submit the code.\\n\\nThe full text of DCO can be found: [https://developercertificate.org/](https://developercertificate.org/). \\n\\n## Why Are We Switching?\\n\\nCommunity contributions are vital to the success of LoopBack. Since DCO simply needs your affirmation that you are the one who is submitting the code, we hope this switch would make the contribution process simpler and thus encourages more contributions from you!\\n\\nIn addition, this change can help us to reduce the infrastructure cost, including the team\'s time and effort, to maintain the CLA server. \\n\\n\\n## What Does It Mean To You?\\n\\nCurrently, the [loopback4-example-shopping](https://github.com/strongloop/loopback4-example-shopping) is already using DCO. \\n\\nTo sign off the commit, you can:\\n```\\ngit commit -s -m \\"feat: my commit message\\"\\n```\\n\\nOver the next little while, we\'ll start the switch for the repositories with the most community contributions, namely [loopback-next](https://github.com/strongloop/loopback-next), [loopback.io](https://github.com/strongloop/loopback.io) and [loopback-datasource-juggler](https://github.com/strongloop/loopback-datasource-juggler), then we\'ll roll it out for the connector repos. \\n\\n## Start Contributing!\\n\\nYou are more than welcome to contribute on something that you find it relevant and interesting to you. If you\'re simply looking for items that we want help, you can look for GitHub issues with [`help wanted`](https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22help+wanted%22) or [`good first issue`](https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22good+first+issue%22) labels. \\n\\nMore questions? Feel free to ask in the #loopback-contributors channel of the [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)."},{"id":"2020-Jun-slack-qa","metadata":{"permalink":"/blog/2020-Jun-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-22-jun-slack-qa.md","source":"@site/blog/2020/2020-07-22-jun-slack-qa.md","title":"Community Q&A Monthly Digest - Jun 2020","description":"Originally published on strongloop.com","date":"2020-07-16T00:00:00.000Z","formattedDate":"July 16, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Jun 2020","date":"2020-07-16T00:00:00.000Z","authors":"dhmlau","slug":"2020-Jun-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","permalink":"/blog/switching-to-dco"},"nextItem":{"title":"LoopBack 4 2020 Q2 Overview","permalink":"/blog/loopback-4-2020-q2-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWelcome back to the \\"Community Q&A Monthly Digest\\", in which we highlight some of the questions and answers in [our LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) here.\\n\\n\x3c!--truncate--\x3e\\n\\n**Question:** Has anyone implemented Casbin on a brand new project? or is there a good tutorial for lb4? I need to have some rbac / roles system in an app.. or what would you suggest to achieve that?\\n\\n**Answer:** We have an access control example uses casbin, see the [access-control-migration example](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration) and [its tutorial](https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html). The logic on casbin side is only a prototype, the example mainly shows the integration between casbin and LoopBack authorization system.\\n\\n---\\n\\n**Question:** I am new to LoopBack and so far I really like what it has to offer. I was wondering if anyone knows of a good online course to learn LoopBack. I have worked through the basic tutorials found in the documentation, but I find it easier to listen and follow along to videos. \\n\\n**Answer:** Recently one of our community member posts a [YouTube tutorial for LoopBack 4 beginners](https://www.youtube.com/watch?v=cgBCRY169qg). There is another series of educational videos on [a LoopBack introduction](https://www.youtube.com/watch?v=pDGWb-q65qM) and [installation](https://www.youtube.com/watch?v=1U9ZCDlBtjc). \\n\\nFrom our side, there are a few recent videos on our [StrongLoop YouTube channel](https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw/videos) and we\'re trying to add more. Hope it helps.\\n\\n---\\n\\n**Question:** I am trying to disable the openapi.json from showing in my loopback 4 application and its not working. I was able to disable the explorer. Any ideas?\\n\\n**Answer:** You can use `openApiSpec: {disabled: true}` in `index.ts`. i.e. \\n\\n```ts\\nconst config = {\\n    rest: {\\n      //..\\n      openApiSpec: {\\n        disabled: true\\n        //..\\n      },\\n    },\\n  };\\n```\\n---\\n\\n**Question:** Does Loopback 4 support extracting cookies from the header? Currently I had to integrate Express server to achieve this. \\n\\n**Answer:** You can use express middleware like [http://expressjs.com/en/resources/middleware/cookie-parser.html](http://expressjs.com/en/resources/middleware/cookie-parser.html) see how to use middleware in [https://loopback.io/doc/en/lb4/Express-middleware.html](https://loopback.io/doc/en/lb4/Express-middleware.html).\\n\\n---\\n\\n**Question:** Is there a quick way to generate timestamp? Like at the model level `generated:true`?\\n\\n**Answer:** I recommend to use defaultFn set to one of the following string values:\\n- \\"guid\\": generate a new globally unique identifier (GUID) using the computer MAC address and current time (UUID version 1).\\n- \\"uuid\\": generate a new universally unique identifier (UUID) using the computer MAC address and current time (UUID version 1).\\n- \\"uuidv4\\": generate a new universally unique identifier using the UUID version 4 algorithm.\\n- \\"now\\": use the current date and time as returned by new Date()\\n\\nSee also [https://github.com/strongloop/loopback/issues/292](https://github.com/strongloop/loopback/issues/292) and [https://loopback.io/doc/en/lb4/Model.html#property-decorator](https://loopback.io/doc/en/lb4/Model.html#property-decorator).\\n\\nIt would be great to capture these options in our TypeScript definitions, see [https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42](https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42).\\n\\n---\\n\\n**Question:** Can I use MongoDB update operators in LoopBack apps? How can I enable it?\\n\\n**Answer:** Yes, except comparison and logical operators, the mongo connector also supports MongoDB update operators such as `max`, `rename`, etc. You will need to set the flag `allowExtendedOperators` to `true` in the datasource configuration. You can find details and examples at [MongoDB connector - update operators](https://loopback.io/doc/en/lb4/MongoDB-connector.html#update-operators).\\n\\n---\\n\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"loopback-4-2020-q2-overview","metadata":{"permalink":"/blog/loopback-4-2020-q2-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-14-loopback-q2-overview.md","source":"@site/blog/2020/2020-07-14-loopback-q2-overview.md","title":"LoopBack 4 2020 Q2 Overview","description":"Originally published on strongloop.com","date":"2020-07-14T00:00:00.000Z","formattedDate":"July 14, 2020","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":7.055,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 2020 Q2 Overview","date":"2020-07-14T00:00:00.000Z","authors":"agnes512","slug":"loopback-4-2020-q2-overview","tags":["Quarterly update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Jun 2020","permalink":"/blog/2020-Jun-slack-qa"},"nextItem":{"title":"LoopBack 4 June 2020 Milestone Update","permalink":"/blog/june-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nOver the recent months, this global pandemic has affected our lives in different ways; we hope you all stay safe during these difficult times. The LoopBack team has adapted to new ways of working, including virtually and in new settings. Even though it could be challenging sometimes, we are glad that we were able to complete most of our Q2 plan. Thanks to all the support from the team and the community!\\n\\nHere\'s a brief look at the Q2 summary:\\n\\n- [Migration Guide](#migration-guide)\\n- [Enhancing Documentation](#enhancing-documentation)\\n- [Leveraging Authentication System](#leveraging-authentication-system)\\n- [APIC/LB4 Integration](#apic/lb4-integration)\\n- [Other Highlights](#other-highlights)\\n- [Building LoopBack Community](#building-loopBack-community)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nOne of our main targets in Q2 was to finish the migration guide, and we did it! We accomplished all the items on the [migration plan](https://github.com/strongloop/loopback-next/issues/453). The [Migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) can be found easily on the LB4 home page. We have instructions that helps you migrate various artifacts and also have docs to explain similarities and differences between LB3 and LB4. From request/response infrastructure to datasource setup, from model definitions to the authentication and authorization, we hope the guide is useful for you when migrating your LoopBack 3 applications to LoopBack 4.\\n\\n## Enhancing Documentation\\n\\n### New Documentation Structure\\n\\nThis quarter, one of our targets was to upgrade the documentation system. As we are adding more features and documentation to LoopBack 4, the abundant amount of sidebar entries was overwhelming and difficult to navigate with the old documentation system. We reorganized most of them into the following four parts:\\n\\n- \\"Tutorials\\"\\n- \\"How-to guides\\"\\n- \\"Behind the scenes\\"\\n- \\"References guides\\"\\n\\nFor example, if you\'d like to learn how you can secure your LoopBack 4 application, now you can find it easily under the \\"Tutorials\\" sections instead of searching through the whole path \\"Concept -> Authentication -> Authentication tutorial\\".\\n\\nMoreover, we also started working on reorganizing most of our documentation to focus on framework-level APIs and de-emphasizing the lower-level building blocks to reduce the complexity. For example, we removed `@loopback/express` from framework-level documentation and replaced references to use `@loopback/rest instead`.\\n\\nThis is just the first step of our long journey of improving the documentation system. Please let us know if you have any feedback.\\n\\n### Rewriting your favorite LB3 content to LoopBack 4\\n\\nWe\'ve been using shared content for some topics in both LB3 and LB4, but this might be confusing if the user is not familiar with LB3. To reduce the gap between these two versions, we also rewrote some documentation from LB3 in LB4 style. For example, now you can check usage examples written in LB4 style for the Filters under the page [Working with data](https://loopback.io/doc/en/lb4/Working-with-data.html). What\'s more is that we also created tutorials for connecting to [MySQL](https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html), [Oracle](https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html), [PostgreSQL](https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html), and [MongoDB](https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html) databases. By following the steps in these tutorials, you\'ll find it easy to connect to databases with LB4 applications.\\n\\n## Leveraging Authentication System\\n\\nThe authentication system has changed a lot since it was being used as an experimental feature. It is now more reliable and flexible. We improved it in the following aspects:\\n\\n### Examples\\n\\nWe added two examples for different authentication strategies:\\n\\n- [TODO example with JWT](https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt) demos enabling JWT authentication in the Todo application. This is a good example for beginners to follow the authentication system.\\n\\n- [Passport Login example](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login) shows how to use [Passport Strategies](http://www.passportjs.org/docs/) in LoopBack 4. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.\\n\\n### Documentation\\n\\nWe reorganized the authentication documentation to make it more easy to adopt. Instead of throwing all the details to users, now the [authentication docs](https://loopback.io/doc/en/lb4/Authentication-overview.html) starts with a simple high-level explanation, then it walks through users with several examples with different difficulties to show what the system is capable of and how they can be achieved.\\n\\nBesides, as we mentioned above, we also added page [Migrating authentication and authorization](https://loopback.io/doc/en/lb4/migration-auth-overview.html) as part of the migration plan as well.\\n\\n## APIC/LB4 Integration\\n\\n[API Connect](https://developer.ibm.com/apiconnect/) is a complete, intuitive and scalable API platform provided by IBM.\\n\\nIn Q2, we completed the integration of LoopBack 4 with API Connect v10 which was released in June. When a LoopBack application is scaffolded through the APIC toolkit, the LoopBack-generated OpenAPIv3 spec comes with API Connect specific metadata added, thanks to the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect). If you\'re interested, we\'ve been preparing an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned!\\n\\n## Other Highlights\\n\\nHere are some highlights of our work we would like to share!\\n\\n### Supporting TypeORM\\n\\nYou might decide to use an alternative ORM/ODM in your LoopBack 4 application, and LoopBack 4 also has such flexibility as it no longer expects you to provide your data in its own custom Model format for routing purposes, which means you are free to alter your classes to suit these ORMs/ODMs.\\n\\n[TypeORM](https://typeorm.io/#/) is an ORM that can run in NodeJS and others platforms and can be used with TypeScript and JavaScript, which fits LoopBack 4 well. We implemented initial support for TypeORM in LoopBack 4 in the `@loopback/typeorm` package. Please check the [README](https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md) file for the usage and limitations.\\n\\n### Express Middleware\\n\\nLoopBack 4 leverages Express behind the scenes for its REST server implementation. The new [Express Package](https://github.com/strongloop/loopback-next/tree/master/packages/express), has enabled injecting single and multiple express middleware functions as `Interceptor`s into `Controller` invocations and also as a middleware step in the application `Sequence`.\\n\\n### Component Application Booter\\n\\nSometimes it might be the case that we want to break our complex application into multiple smaller LoopBack applications. The component application booter composes these sub applications into the main application. This is helpful for building a scalable micro-services application. See the page [Booting an Application](https://loopback.io/doc/en/lb4/Booting-an-Application.html).\\n\\n### HasManyThrough Relation\\n\\nWith help from the community users, the experimental feature [`HasManyThrough` relation](https://github.com/strongloop/loopback-next/blob/master/packages/repository/src/relations/has-many/has-many-through.repository.ts) is added to LB4. Currently it only has some basic functionalities. The documentation and related CLI will be updated in the near future.\\n\\n### Run Tests in Parallel\\n\\nWe upgraded `mocha` to the new version 8, and it enable parallel execution of Mocha tests. With the option, we can control the number of worker processes and make the testing process more efficient. Details can be found in [Running tests](https://loopback.io/doc/en/lb4/code-contrib-lb4.html#running-tests) section.\\n\\n### Extensions\\n\\nExtensions/Extension points is one of the main features of LB4 to make the application extensible. We added the following two extensions in Q2:\\n\\n- JWT authentication: as the authentication system gets popular and more solid, we extracted the JWT authentication system into a separate extension package as an experimental feature, so that users can quickly mount a component to try out the feature. Check [`authentication-jwt`](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) for details.\\n\\n- LoopBack APIConnect extension: the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is ready for use. It provides `ApiConnectComponent` that adds an `OASEnhencer` extension to contribute `x-ibm-configuration` to the OpenAPI spec generated by LoopBack applications.\\n\\n## Building LoopBack Community\\n\\nWe\'re happy to see more users/developers join our community. We appreciate all the help! We\'ve opened a public [Slack](https://slack.com/) channel so that developers can ask questions, discuss issues, and share their knowledge to help each other easily.\\n\\nWe also had a several video-calls with LoopBack maintainers. It\'s nice to get to know each other, share the plans & visions and discuss topics by talking together. Let\'s continue building LoopBack a better framework together.\\n\\nWanna join us? Yes! You\'re invited :point_right: [Join LoopBack Channel on Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw).\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q2 for more details:\\n\\n- [April 2020](https://strongloop.com/strongblog/april-2020-milestone/)\\n- [May 2020](https://strongloop.com/strongblog/may-2020-milestone/)\\n- [June 2020](https://strongloop.com/strongblog/june-2020-milestone/)\\n\\n## What\'s Next?\\n\\nWe have published a blog [LoopBack - 2020 Goals and Focus](https://strongloop.com/strongblog/2020-goals/) about our plans this year. Here is a summary of the [Q3 2020 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q3-2020-roadmap):\\n\\n- finish migration guide for both general runtime and authentication & authorization\\n- continue with API Connect and LoopBack integration\\n- look into feature parity gaps that are highly requested by users\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"june-2020-milestone","metadata":{"permalink":"/blog/june-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-08-june-milestone.md","source":"@site/blog/2020/2020-07-08-june-milestone.md","title":"LoopBack 4 June 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-07-08T00:00:00.000Z","formattedDate":"July 8, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":7.23,"hasTruncateMarker":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack 4 June 2020 Milestone Update","date":"2020-07-08T00:00:00.000Z","authors":["hacksparrow","bajtos"],"slug":"june-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2020 Q2 Overview","permalink":"/blog/loopback-4-2020-q2-overview"},"nextItem":{"title":"Community Q&A Monthly Digest - May 2020","permalink":"/blog/2020-may-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nDocumentation restructuring, TypeORM support, and HasManyThrough were the three main accomplishments in the month of June. Based on the community feedback, documentation improvement remains our number one priority in the coming month. Besides, while welcoming Nathan Chen join as a maintainer of the `strong-globalize` repo, we said farewell to Deepak. \\n\\nHere is what we did in the month June:\\n\\n- [Documentation Improvements](#documentation-improvements)\\n- [HasManyThrough](#hasmanythrough)\\n- [TypeORM Support](#typeormsupport)\\n- [Miscellaneous](#miscellaneous)\\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Improvements\\n\\n### New Documentation Structure\\n\\nWhen writing documentation for new features, we were often struggling to find the right place to put the content and the right form to frame the information. Recently, we discovered a documentation system based on four different functions. It explains why we were struggling and provides a structure to guide us when writing new content.\\n\\n> Documentation needs to include and be structured around its four different functions: tutorials, how-to guides, technical reference and explanation. Each of them requires a distinct mode of writing. People working with software need these four different kinds of documentation at different times, in different circumstances - so software usually needs them all, and they should all be integrated into your documentation.\\n\\nIn June, we explored how to apply this documentation system to our content and implemented first high-level changes in the way how our content is organized. Check out [loopback-next#5549](https://github.com/strongloop/loopback-next/issues/5549) to find more resources about our new documentation system.\\n\\nIn a series of incremental pull requests, we reworked our documentation structure as follows:\\n\\n- Renamed \\"Usage scenarios\\" to \\"How-to guides\\" to make it clear what kind of content is there.\\n- Placed all explanation-related pages in \\"Behind the scenes\\" section and removed the section \\"Key concepts\\".\\n- Relocated all reference guides to be nested under \\"Reference guides\\". We moved pages like \\"Error handling\\" and \\"Reserved binding keys\\" to references guides to make them easier to find.\\n- Moved pages from \\"Using components\\" to \\"How-to guides\\".\\n- Added support for sidebar sections that are just grouping related pages together but don\'t have a page of their own. This allowed us to remove few section pages that were rather anemic: \\"Access databases\\", \\"Reference guides\\", \\"How-to guides\\".\\n- Reworked the \\"Server\\" page in \\"Behind the scenes\\" because there was a mix of different kinds of content in the page. We extracted some of the guides into new pages nested under \\"How-to guides\\".\\n\\nThe re-organized documentation is already live at [loopback.io](https://loopback.io/doc/en/lb4), take a look and let us know what do you think!\\n\\nNow that the new structure is in place, we are going to gradually review and update existing documentation content to align it with the new system. You can find the list of relevant tasks in [loopback-next#5113](https://github.com/strongloop/loopback-next/issues/5113). As always, your help is welcome!\\n\\n### Alignment Along Abstraction Levels\\n\\nAs we were incrementally adding new features to the framework and extracting building blocks into standalone packages, our documentation ended up describing concepts from different abstraction layers in the same place, mixing information for framework users with references to low-level building blocks. This resulted in a steep learning curve for new users, because there were so many concept and packages to learn about!\\n\\nIn June, we reorganized most of our documentation to focus on framework-level APIs and deemphasize lower-level building blocks. As a result, we updated our developer documentation to describe which packages are considered as building blocks, see [Organization of content](https://loopback.io/doc/en/lb4/code-contrib-lb4.html#organization-of-content). We also:\\n\\n- [updated our packages and documentation pages to use `@loopback/core` instead of `@loopback/context`](https://github.com/strongloop/loopback-next/pull/5625)\\n- [removed `@loopback/metadata` from framework-level documentation and replaced references to use `@loopback/core` instead](https://github.com/strongloop/loopback-next/pull/5696)\\n- [removed `@loopback/express` from framework-level documentation and replaced references to use `@loopback/rest` instead](https://github.com/strongloop/loopback-next/pull/5693)\\n\\nNow we need to update places referring to `@loopback/openapi-v3`, as discussed in [loopback-next5692](https://github.com/strongloop/loopback-next/issues/5692). Want to contribute those changes yourself? Submit a PR today!\\n\\n### Refactoring of Authentication-related Documentation\\n\\nWe refactored the authentication documentation so that it is easier for beginners to follow. As the new entry page, the [authentication overview page](https://loopback.io/doc/en/lb4/Authentication-overview.html) describes a typical scenario for securing APIs and it also helps you understand what \\"authentication\\" means in LoopBack 4. Next you can follow a simple hands-on tutorial [secure your LoopBack 4 application with JWT authentication](https://loopback.io/doc/en/lb4/Authentication-tutorial.html) to start exploring this feature. Then you can gradually learn the authentication system\'s mechanism and how to implement your own authentication strategies.\\n\\n### Adding LoopBack 4 Content to Connector Pages\\n\\nAs the continuation of improving connector documentation, after updating the PostgreSQL connector, we updated the connector page and added three more tutorials for [MySQL](https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html), [Oracle](https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html), and [MongoDB](https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html) connectors in June. By walking you through the steps of creating a LB4 application and connecting to a certain database, we hope new users find the tutorial helpful to adopt LoopBack 4 better. Besides the basic setup steps, we also added some sections to explain those questions that are being asked a lot from the community. Check out these documentations under [Database connectors](https://loopback.io/doc/en/lb4/Database-connectors.html).\\n\\n## HasManyThrough\\n\\nA `HasManyThrough` relation sets up a many-to-many connection through another model. At the moment, LB4 only supports three basic relations: `HasMany`, `BelongsTo`, and `HasOne`.\\n\\nThanks to the initial work by [`codejamninja`](https://github.com/codejamninja) and [`derdeka`](https://github.com/derdeka), we have a working prototype of the feature.\\n\\nWhile functional, the [PR](https://github.com/strongloop/loopback-next/pull/2359) is pretty huge and some of the parts are up for discussion. As a result, we started to extract the core parts of the implementation into smaller PRs so that it\'s easier for review. In June, we had the basic operations working and tests are added. As the next step, we\'ll be adding documentation.\\n\\nStay tuned with the progress by going to [loopback-next #5835](https://github.com/strongloop/loopback-next/issues/5835).\\n\\n## TypeORM Support\\n\\nWe have implemented initial support for TypeORM in LoopBack. All it takes to enable TypeORM is to compose your app with the `TypeOrmMixin` mixin.\\n\\n```ts\\nimport {BootMixin} from \'@loopback/boot\';\\nimport {RestApplication} from \'@loopback/rest\';\\nimport {TypeOrmMixin} from \'@loopback/typeorm\';\\nexport class MyApplication extends BootMixin(TypeOrmMixin(RestApplication)) {\\n  ...\\n}\\n```\\n\\nFor details about using TypeORM with LoopBack, refer to the `@loopback/typeorm` [doc](https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md).\\n\\nComplete support for TypeORM is a significant amount of work. While the initial work is done, we\'re looking for ways to improve the implementation in the following areas.\\n\\n1. Complete TypeORM to OpenAPI data type conversion (currently only `number`,\\n   `string`, and `boolean` are supported)\\n2. Full JSON/OpenAPI schema for models, including variants like with/without id,\\n   with/without relations, partial, etc.\\n3. Json/OpenAPI schema to describe the supported filter format\\n4. Support for LoopBack-style filters\\n5. Custom repository classes (e.g. to implement bookRepo.findByTitle(title)).\\n6. Database migration\\n\\n## Miscellaneous\\n\\nWe upgraded `mocha` to the new version 8. This version brings support for running tests in parallel (yay!), but also drops support for `--opts` argument and `test/mocha.opts` file. See [Mocha 8.0.0 release notes](https://github.com/mochajs/mocha/releases/tag/v8.0.0) for the full list of breaking changes and instructions on migrating existing projects. Our changes were introduced by [loopback-next#5750](https://github.com/strongloop/loopback-next/pull/5750) and [loopback-next#5710](https://github.com/strongloop/loopback-next/pull/5710); and published in `@loopback/build` version `6.0.0`.\\n\\n[Miroslav](https://strongloop.com/authors/Miroslav_Bajto\u0161) benchmarked the performance of LoopBack and found an opportunity for a quick but significant improvement. By changing the algorithm used in `@loopback/context` to generate unique context instance names, we managed to improve the performance of our REST API layer by 45%! Learn more in the blog post [How We Improved LoopBack REST Performance by 45%](https://strongloop.com/strongblog/2020-improve-looopback-performance-uuid/).\\n\\nA new method `exportOpenApiSpec()` was added to the `RestServer` for generating OpenAPI specs in JSON or YAML format. This method can be called from the project directory by running the `openapi-spec` script.\\n\\nWhen a binding key is not bound,`ResolutionError` now captures more contextual information. Earlier it used to print a long stack trace and was not easy to find out where the failure happened.\\n\\nThe implementation of binding cache was [improved](https://github.com/strongloop/loopback-next/pull/5731) to prevent race conditions and better handle bindings in async conditions.\\n\\n`CoreBindings.APPLICATION_INSTANCE` now has corresponding `@config()` decorator.\\n\\n## July Milestones\\n\\nIn the month of July we will continue focusing on improving the documentation. You can see the whole list on the [July milestone issue](https://github.com/strongloop/loopback-next/issues/5837).\\n\\nThere is also ongoing work to have [native GraphQL support](https://github.com/strongloop/loopback-next/pull/5545) and a [new extension for pooling service](https://github.com/strongloop/loopback-next/pull/5681). Your feedback is welcome.\\n\\n## Welcome and Goodbyes\\n\\nWe\'re pleased to welcome [Nathan Chen](https://github.com/codechennerator) as the maintainer of the [strong-globalize](https://github.com/strongloop/strong-globalize) repo. Thank you Nathan for all the good work you\'ve done. On the other hand, it\'s sad to see [Deepak](https://strongloop.com/authors/Deepak_Rajamohan/) leaving the LoopBack team. We wish him best of luck in his new adventure.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-may-slack-qa","metadata":{"permalink":"/blog/2020-may-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-10-may-slack-qa.md","source":"@site/blog/2020/2020-06-10-may-slack-qa.md","title":"Community Q&A Monthly Digest - May 2020","description":"Originally published on strongloop.com","date":"2020-06-11T00:00:00.000Z","formattedDate":"June 11, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":2.225,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - May 2020","date":"2020-06-11T00:00:00.000Z","authors":"dhmlau","slug":"2020-may-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 June 2020 Milestone Update","permalink":"/blog/june-2020-milestone"},"nextItem":{"title":"How We Improved LoopBack REST Performance by 45%","permalink":"/blog/2020-improve-looopback-performance-uuid"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nSince we made the [LoopBack Slack community](https://loopbackio.slack.com/) available, we are happy to see more and more users are joining. Let\'s see some of the questions and answers that we\'ve highlighted below.\\n\\n\x3c!--truncate--\x3e\\n\\n--- \\n**Question**: In the [Model documentation page](https://loopback.io/doc/en/lb4/Model.html#using-the-juggler-bridge), it says \\"To define a model for use with the juggler bridge, extend your classes from Entity\\". What\'s the juggler bridge?\\n\\n**Answer**: the Juggler bridge is used to bridge the gap between `@loopback/repository` and `loopback-datasource-juggler`. The former is used by LoopBack 4 to help define Models, Repositories, etc. It also allows for cross-datasource relations, etc. as they are enforced at the application level instead of the database.\\n\\nThe latter is the ORM/ODM that builds the queries and interacts with the database. It\'s from LoopBack 3 and is probably the only major component that didn\'t get revamped to keep backwards-compatibility.\\n\\nHence, the Juggler bridge helps bridge the gaps between these Node.js packages.\\n\\n`Entity` is, at it\'s core, a model that has an ID property. Looking at the source code for `Entity`, there\'s quite a bit of boilerplate code added.\\n\\n---\\n\\n**Question:** Is there a way to change the application port to string ? I am trying to deploy the application under Azure web app where the port is a string.\\n\\n**Answer**: Use `port: +(process.env.BILLING_PORT || 3000),`. The `+` converts a string to number. For the pipe, you should use `path` property instead of `port`. See [https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/__tests__/integration/http-server.integration.ts#L272](https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/__tests__/integration/http-server.integration.ts#L272).\\n\\n---\\n\\n**Question:** I have a model with a field which is defined as \u201cnumber\u201d. Working with Postgres. How should I define it to have the field as a double and not an integer ?\\n\\n**Answer:** You can specify the dataType field to define a certain type of that column. For type Double, for example,\\n```ts\\n@model()\\nexport class Item extends Entity {\\n  @property({\\n    type: \'number\',\\n    id: true,\\n    generated: false,\\n  })\\n  id?: number;\\n  @property({\\n    type: \'number\',\\n    postgresql: {\\n      dataType: \'double precision\',\\n    },\\n  })\\n  price?: number;\\n....\\n```\\n\\nThen run `npm run build` and then `npm run migrate` commands, the table should have columns:\\n```\\nprice       |                | double precision\\n```\\n\\nBesides the data type, LB4 also allows you to describe tables via the model definition and/or property definition. See [Data Mapping Properties](https://loopback.io/doc/en/lb4/Model.html#data-mapping-properties) for information.\\n\\n---\\n**Question:** Is there client sdk for lb4 for api code generation? I tried with swagger codegen, but the generated code seems doesn\'t work.\\n\\n**Answer:** You should try `lb4 openapi --client`. It generates strongly-typed LoopBack service proxies over openapi spec using TypeScript. We use it to generate SDKs in TS.\\n\\n---\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"2020-improve-looopback-performance-uuid","metadata":{"permalink":"/blog/2020-improve-looopback-performance-uuid","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-09-improve-uuid-performance.md","source":"@site/blog/2020/2020-06-09-improve-uuid-performance.md","title":"How We Improved LoopBack REST Performance by 45%","description":"Originally published on strongloop.com","date":"2020-06-09T00:00:00.000Z","formattedDate":"June 9, 2020","tags":[{"label":"REST","permalink":"/blog/tags/rest"},{"label":"Performance","permalink":"/blog/tags/performance"}],"readingTime":7.12,"hasTruncateMarker":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"How We Improved LoopBack REST Performance by 45%","date":"2020-06-09T00:00:00.000Z","authors":"bajtos","slug":"2020-improve-looopback-performance-uuid","tags":["REST","Performance"]},"prevItem":{"title":"Community Q&A Monthly Digest - May 2020","permalink":"/blog/2020-may-slack-qa"},"nextItem":{"title":"LoopBack 4 May 2020 Milestone Update","permalink":"/blog/may-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nRecently, I measured the performance of LoopBack 4 and found an opportunity for an easy but significant improvement in the way how we are building per-request context instances.\\n\\n\x3c!--truncate--\x3e\\n\\nI have been always interested in performance, from high-level design patterns like caching & memoization, to micro-optimizations at language level (anybody remembers [CrankShaftScript](https://stackoverflow.com/a/44765284/69868) from Node.js 0.10 days?), all the way down to Mechanical Sympathy.\\n\\nSince we started rewritting LoopBack from scratch in 2016/17, our primary focus was on features; performance aspects were a bit off the radar. (Not entirely, we were careful to design our HTTP routing layer to avoid the low performance of regexp-matching approach used by Express.) Now that LoopBack 4 is pretty mature, I though it\'s a good time to take a quick look on how fast is our framework.\\n\\nTo quickly get a high-level overview, I installed [Clinic.js](https://clinicjs.org) and benchmarked our [TodoList example application](https://loopback.io/doc/en/lb4/todo-list-tutorial.html). I used the following TodoList query (`filter`) for all benchmarks:\\n\\n```json\\n{\\n  \\"include\\": [\\n    {\\n      \\"relation\\": \\"todos\\"\\n    }\\n  ]\\n}\\n```\\n\\nThe filter value needs to be URL-encoded, producing the following URL to pass to Clinic.js - let\'s save it to a shell variable for later use.\\n\\n```shell\\n$ URL=\\"/todo-lists?filter=%7B%0A%20%20%22include%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22relation%22%3A%20%22todos%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D\\"\\n```\\n\\n## Clinic.js Doctor\\n\\nThe Doctor component performs an overall diagnosis looking for common anti-patterns. After installing Clinic.js globally, I ran the following command in `examples/todo-list` directory of loopback-next monorepo:\\n\\n```shell\\n$ clinic doctor --debug --autocannon $URL -- node .\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n(...)\\n18k requests in 11.05s, 11.1 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/41598.clinic-doctor.html\\nYou can use this command to upload it:\\nclinic upload .clinic/41598.clinic-doctor\\n```\\n\\nThe report says there were no issue detected, hooray!\\n\\n<img class=\\"aligncenter size-full\\" src=\\"./images/uuid-clinic-doctor.png\\"/>\\n\\nA closer inspection shows that our process is consuming quite a lot of memory.  We don\'t have any memory leaks, which is most important. However, excessive allocations put more pressure on garbage collector which does impact application\'s performance. Let\'s set the memory usage aside for now and check how much time is the application spending on waiting for asynchronous operations.\\n\\n## Clinic.js Bubbleprof\\n\\nQuoting from [ThoughtWorks Technology Radar](https://www.thoughtworks.com/radar/languages-and-frameworks/clinic-js-bubbleprof):\\n\\n> Clinic.js Bubbleprof represents visually the async operations in Node.js processes, drawing a map of delays in the application\'s flow. We like this tool because it helps developers to easily identify and prioritize what to improve in the code.\\n\\nLet\'s see how the bubbles look like for a LoopBack application!\\n\\n```shell\\n$ clinic bubbleprof --debug --autocannon $URL -- node .\\nWarning: The code is transpiled, bubbleprof does not support source maps yet.\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n(...)\\n2k requests in 10.06s, 1.28 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/42229.clinic-bubbleprof.html\\nYou can use this command to upload it:\\nclinic upload .clinic/42229.clinic-bubbleprof\\n```\\n\\nThere isn\'t much to see in the report, the application spent less than 20ms waiting for async operations. I guess that was kind of expected considering that our example application is using in-memory storage and not communicating with any external service.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"./images/uuid-clinic-bubbleprof.png\\"/>\\n\\n\\n## Clinic.js Flame\\n\\nThe last item in Clinic.js toolbox is Flame. Quoting from Clinic\'s website:\\n\\n> (...)  flamegraphs are a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately. Clinic.js Flame is specifically for Node.js and is built into Clinic.js. It collects metrics using by CPU sampling, then tracks top-of-the-stack frequency and creates flamegraphs.\\n\\nCan we find anything interesting in the flames? Let\'s see.\\n\\n```shell\\n$ clinic flame --debug --autocannon $URL -- node .\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n15k requests in 10.03s, 9.44 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/42454.clinic-flame.html\\nYou can use this command to upload it:\\nclinic upload .clinic/42454.clinic-flame\\n```\\n\\nThere is a lot of information packaged into a flame graph. Initially, Clinic.js is selecting the hottest frame - the stack that was observed most often while running the application. In our case, the hottest frame is pointing to Node.js internals dealing with writing data to streams.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"./images/uuid-clinic-flame-1.png\\"/>\\n\\n![](./images/uuid-clinic-flame-1.png)\\n\\nThere isn\'t much we can do about Node.js streams. Our application is writing HTTP responses so it has to spend some time writing the data. The third hottest frame is `parseQueryStringValues` from the module `qs`, this is again not something we can easily improve. Let\'s remove all components except `dist` in the check-box list at the bottom of the screen to focus on LoopBack code only.\\n\\n![](./images/uuid-clinic-flame-2.png)\\n\\nNow the list of hot frames looks much more actionable! Here are the top entries:\\n\\n1. `handle` in `sequence.js` was 11.4% of time on top of stack\\n2. `buildLookupMap` in `relation.helpers.js` was 6.3% of time on top of stack\\n3. `findByForeignKeys` in `relation.helpers.js` was 5.7% of time on top of stack\\n\\nAnd so the list goes on. The entry number 7 caught my attention: the application is spending 1.3% of the time in `generateName` from `context.js`.  That\'s suspicious, why is generating context names so expensive?\\n\\nIt turns out we are generating unique context names to make it easier to debug binding-related issues. Our initial implementation was based on [UUID version 4 (random)](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) algorithm. Universally unique ids are great when you are aggregating debug logs from a mesh of microservices. However, most of the time, context names are just a hidden property of context instances that\'s not surfaced anywhere.  Applications shouldn\'t be paying performance tax for something they don\'t use. Let\'s see if we can find a better solution.\\n\\n## UUID Alternatives\\n\\nWhat other options are there to generate unique ids?\\n\\n- We can use UUID version 1 that\'s based on date-time and MAC address.\\n- If we didn\'t need universally unique values, then a simple counter (perhaps prefixed with the current process id) could be a viable alternative.\\n- Surely somebody else must have encountered this problem before us. Aren\'t there any fast id generators on npmjs.com? Of course there are! The search for [\\"fast unique id\\"](https://www.npmjs.com/search?q=fast%20unique%20id) returned\\n[hyperid](https://www.npmjs.com/package/hyperid) as the best match.\\n\\nLet\'s compare the performance of these alternatives. I wrote a simple benchmark which you can find in this [Gist](https://gist.github.com/bajtos/6343512b171156872d3b701b2c10a682) and measured the following data:\\n\\n|method|ids/second|\\n|-|-:|\\n|numeric counter |`11095k`|\\n|hyperid         |`10234k`|\\n|UUID v1         | `1649k`|\\n|UUID v4         |  `325k`|\\n\\nInitially, I wanted to use a numeric counter because it has the best performance. However, that would mean losing uniqueness of context names.  At the end, I decided to go with `hyperid`. It combines UUID v4 with a counter to achieve almost the same performance as the counter-only algorithm while preserving universal uniqueness of the generated ids.\\n\\nTo better measure the impact on performance, I created a small REST application that does not parse the query string and returns the response data directly, without going through `@loopback/repository`. Replacing `uuid/v4` with `hyperid` improved the performance of my test application from `~2.4k` requests/second to `~3.5k` requests/second on average. The average request latency has improved from `3.8ms` to `2.6ms`.\\n\\nThe pull request [loopback-next#5628](https://github.com/strongloop/loopback-next/pull/5628) improving `generateName` performance has been already landed and will become publicly available in the next framework release.\\n\\n## Summary\\n\\nAs the popular saying goes, performance is not a problem until it becomes a problem. Even if your project is not performance sensitive, it\'s still good to pay attention to how much resources it consumes at runtime.\\n\\n1. Watch for warning signs. Maybe an existing test has suddenly started to fail on a timeout? When that happens, try to take the hard path: investigate the problem, dig deep to find the root cause and fix it.\\n\\n2. Measure, measure, measure. Always create a reproducible benchmark to measure the effect of the changes you are going to make. Performance tuning is full of surprises and not all changes are for better.\\n\\n3. Know the tooling. Node.js is compatible with many tools provided by Chrome\'s Developer Tools, it provides also tracing functionality for a more fine-grained analysis. You can learn more in Node.js documentation, starting from [Debugging - Getting Started](https://nodejs.org/en/docs/guides/debugging-getting-started/), [Easy profiling for Node.js Applications](https://nodejs.org/en/docs/guides/simple-profiling/) and [Flame Graphs](https://nodejs.org/en/docs/guides/diagnostics-flamegraph/).\\n\\n4. Optimize hot paths. A semi-expensive function can become a performance problem when it\'s called for every incoming request.\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Join the community Slack chat](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"may-2020-milestone","metadata":{"permalink":"/blog/may-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-03-may-milestone.md","source":"@site/blog/2020/2020-06-03-may-milestone.md","title":"LoopBack 4 May 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-06-04T00:00:00.000Z","formattedDate":"June 4, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.88,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 May 2020 Milestone Update","date":"2020-06-04T00:00:00.000Z","authors":"jannyhou","slug":"may-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"How We Improved LoopBack REST Performance by 45%","permalink":"/blog/2020-improve-looopback-performance-uuid"},"nextItem":{"title":"How to reuse custom LoopBack Repository code","permalink":"/blog/2020-share-repository-code"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe completion of the migration epic would be the biggest news in May. Now LoopBack 3 users can find the migration guide [here](https://loopback.io/doc/en/lb4/migration-overview.html). Meanwhile, we have feature contributions and bug fixes happened across all the functional areas. \\n\\nThere are more than 20 community PRs merged in May and we really appreciate every community member\'s help. We set up community calls every four weeks to keep in touch with our maintainers. See the latest schedule and recording in [this story](https://github.com/strongloop/loopback-governance/issues/4).\\n\\nKeep reading to learn about what happened in May.\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Epic\\n\\n### Migrating components\\n\\nThe migration guide for components, which is a powerful way to contribute any artifacts, is the last but most widely covered story in the migration epic. To make the migration guide easier to navigate, we split component-related instructions into several sub-sections as \\"project layout\\", \\"models, entities and repositories\\", \\"current context\\", \\"model mixins\\", \\"REST API endpoints\\". You can check the documentation [migration-extensions-overview](https://loopback.io/doc/en/lb4/migration-extensions-overview.html) and its sub-pages to learn the details.\\n\\n### Migrating LoopBack 3 tests to LoopBack 4\\n\\nWhen a LoopBack 3 application is mounted in a LoopBack 4 project, its endpoints are exposed through the LoopBack 4\'s REST server. To reuse the existing LoopBack 3 tests, you can easily migrate them by following the instructions in [example `lb3-application`](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application#running-lb3-tests-from-lb4). It covers how to set up clients to test requests and how to test runtime functions.\\n\\n## Features\\n\\n### Preserving prototype for toObject\\n\\nLoopBack CRUD operations invoke `toObject` function internally to return a model instance. `toObject` converts a value to a plain object as DTO (Data transfer object). It returned a JSON representation before, which doesn\'t preserve the prototype of complicated types like `Date`, `ObjectId` but returned the value as a string instead. Now such values\' prototypes are kept, for example:\\n\\n```ts\\nconst DATE = new Date(\'2020-05-01\');\\nconst created = await repo.create({\\n  createdAt: DATE,\\n});\\n// The returned model instance has `createdAt` as type Date\\nexpect(created.toObject()).to.deepEqual({\\n  id: 1,\\n  createdAt: DATE,\\n});\\n```\\n\\n### Express Middleware\\n\\nLookBack 4 leverages Express behind the scenes for its REST server implementation. We decided to not use Express middleware as-is but now we support integrating the middleware in different ways. You can invoke it explicitly in the sequence, or register it to be executed by `InvokeMiddleware` action, or use it as controller interceptors.\\n\\nPage [Express middlware](https://loopback.io/doc/en/lb4/Express-middleware.html) explains all the scenarios and usages. And page [Middleware](https://loopback.io/doc/en/lb4/Middleware.html) provides the general knowledge of LoopBack 4 middleware.\\n\\n### Context Improvements\\n\\n- Function `createBindingFromClass` allow bindings to be created from dynamic value provider classes, for example: \\n  ```ts\\n  @bind({tags: {greeting: \'c\'}})\\n  class DynamicGreetingProvider {\\n    static value(@inject(\'currentUser\') user: string) {\\n      return `Hello, ${this.user}`;\\n    }\\n  }\\n  // toDynamicValue() is used internally\\n  // A tag `{type: \'dynamicValueProvider\'}` is added\\n  const binding = createBindingFromClass(GreetingProvider);\\n  ctx.add(binding);\\n  ```\\n\\n- A provider class can use dependency injection to receive resolution-related\\nmetadata such as context and binding. But the overhead to wrap a factory\\nfunction is not desired for some use cases. [PR#5370](https://github.com/strongloop/loopback-next/pull/5370) introduces a lightweight alternative using toDynamicValue as follows:\\n\\n  ```ts\\n  import {ValueFactory} from \'@loopback/context\';\\n  // The factory function now have access extra metadata about the resolution\\n  const factory: ValueFactory<string> = resolutionCtx => {\\n    return `Hello, ${resolutionCtx.context.name}#${\\n      resolutionCtx.binding.key\\n    } ${resolutionCtx.options.session?.getBindingPath()}`;\\n  };\\n  const b = ctx.bind(\'msg\').toDynamicValue(factory);\\n  ```\\n  A benchmark is added to measure the performance of\\n  different styles of context bindings in package [@loopback/benchmark](https://github.com/strongloop/loopback-next/tree/master/benchmark). You can run `npm run -s benchmark:context` to see the result.\\n\\n- [PR#5378](https://github.com/strongloop/loopback-next/pull/5378) introduced a model booter to automatically bind model classes to the application during boot. You can retrieve and inject model constructors using key `models.<model_name>`. For example:\\n\\n  ```ts\\n  @model()\\n  class MyModel extends Model {}\\n\\n  class MyModelComponent {\\n    models = [MyModel];\\n  }\\n  // you can get MyModel by `models.MyModel`\\n  const modelCtor = myApp.getSync<typeof MyModel>(\'models.MyModel\');\\n  ```\\n\\n### Build Improvements\\n\\n- We upgraded the dependency to TypeScript@3.9.2. Code adjustments including `null` check and type intersection were made to be compatible with the new version. You can check [PR#5041](https://github.com/strongloop/loopback-next/pull/5041/commits) for more details.\\n\\n- Replace eslint rule `no-invalid-this` with TypeScript-aware one: In code accessing `this` variable, eslint-ignore comment for `no-invalid-this` will no longer work. You can either\\nchange those comments to disable `@typescript-eslint/no-invalid-this`,  or better tell TypeScript what is the type of `this` in your function.\\n\\n  A TypeScript example:\\n\\n  ```ts\\n  import {Suite} from \'mocha\';\\n  describe(\'my mocha suite\', function(this: Suite) {\\n    this.timeout(1000);\\n    it(\'is slow\', function(this: Mocha.Context) {\\n      this.timeout(2000);\\n    });\\n  })\\n  ```\\n\\n  A JavaScript example:\\n\\n  ```js\\n  describe(\'my mocha suite\', /** @this {Mocha.Suite} */ function() {\\n    this.timeout(1000);\\n    it(\'is slow\', /** @this {Mocha.Context} */ function() {\\n      this.timeout(2000);\\n    });\\n  })\\n  ```\\n\\n- Remove hand-written index files: We removed the root level dummy index files and changed the entry point of project to be the index file inside `src` folder. An example of the latest layout of a package can be found in the [Todo application](https://github.com/strongloop/loopback-next/tree/master/examples/todo).\\n\\n### Application Booter\\n\\n- You can register a booter to boot a sub-application as:\\n\\n  ```ts\\n  class MainAppWithSubAppBooter extends BootMixin(Application) {\\n    constructor() {\\n      super();\\n      this.projectRoot = __dirname;\\n      // boot a sub-application `app`, its bindings will be added as well\\n      this.applicationBooter(app);\\n    }\\n  }\\n  ```\\n\\n## Documentation and Blog\\n\\n### What LoopBack can offer on top of Express\\n\\nLoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and micro-services development and easy maintenance. Last month we published a blog summarizing the points that make LoopBack a compelling choice for Express developers when it comes to API development. You can read [this blog](https://strongloop.com/strongblog/express-to-loopback/) to see how LoopBack can bring Express to the next level.\\n\\n### Managing LoopBack APIs with IBM APIConnect\\n\\nLoopBack 4 application can integrate with API Connect framework. We\'ve prepared an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned for the published article.\\n\\n\x3c!-- Add more stuff when https://github.com/strongloop/strongloop.com/pull/262 finishes --\x3e\\n\\n### Setting Debug String\\n\\nDocumentation [setting debug string](https://loopback.io/doc/en/lb4/Setting-debug-strings.html) explains the usage of running a LoopBack 4 application with debug string turned on. You can check the documentation above to learn the debug string pattern and the format in each package.\\n\\n### Strong Error Handler\\n\\nAs a dependency of [`@loopback/rest`](https://github.com/strongloop/loopback-next/tree/master/packages/rest), package `strong-error-handler` is an error handler for use in both development (debug) and production environments. You can use it to customize the error rejection in the LoopBack 4 sequence. For its detailed usage, please read the documentation [using string error handler](https://loopback.io/doc/en/lb4/Using-strong-error-handler.html).\\n\\n### Postgresql Connector\\n\\nWe\'ve been sharing the connector documentation with LB3, which might be confusing, especially for new LB4 users. We updated the PostgreSQL connector page and also the tutorial. By walking you through the steps of creating a LB4 application and connecting to the PostgreSQL database, we hope the new tutorial helps new users to pick up LoopBack 4 better.\\n\\nYou can read page [connecting to PostgreSQL](https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html) to follow the tutorial.\\n\\n## Youtube Videos\\n\\nFor creating tutorials, we have more materials than documentations. Last month, one of our core maintainers [Miroslav](https://github.com/bajtos) published two video tutorials on [our StrongLoop YouTube channel](https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw):\\n\\n- How to reuse LoopBack repository code: [Click to watch the video](https://www.youtube.com/watch?v=s2yDaKiNYCg)\\n- Migrate LoopBack 4 datasource config to TypeScript: [Click to watch the video](https://www.youtube.com/watch?v=S3BKXh7wDYE)\\n\\n## Authentication\\n\\nThere are several documentation and user experience improvements happened this month to make the authentication system more automatic and easy to use:\\n\\n- Added example [`@loopback/todo-jwt`](https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt) to demo enabling JWT authentication in the Todo application. Its corresponding tutorial [JWT authentication tutorial](https://loopback.io/doc/en/lb4/Authentication-Tutorial.html) is coming soon.\\n\\n- Added security specification enhancer in [@loopback/authentication-jwt](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) to automatically bind the JWT scheme and global security specification to application. You don\'t need to manually add them in the application constructor anymore. The updated usage is documented in the [README.md](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#usage) file.\\n\\n## June Milestones\\n\\nThis month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more details, take a look at our [June milestone list on GitHub](https://github.com/strongloop/loopback-next/issues/5607).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-share-repository-code","metadata":{"permalink":"/blog/2020-share-repository-code","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-02-share-repository-code.md","source":"@site/blog/2020/2020-06-02-share-repository-code.md","title":"How to reuse custom LoopBack Repository code","description":"Originally published on strongloop.com","date":"2020-06-02T00:00:00.000Z","formattedDate":"June 2, 2020","tags":[{"label":"Feature","permalink":"/blog/tags/feature"},{"label":"Repository","permalink":"/blog/tags/repository"}],"readingTime":6.09,"hasTruncateMarker":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"How to reuse custom LoopBack Repository code","date":"2020-06-02T00:00:00.000Z","authors":"bajtos","slug":"2020-share-repository-code","tags":["Feature","Repository"]},"prevItem":{"title":"LoopBack 4 May 2020 Milestone Update","permalink":"/blog/may-2020-milestone"},"nextItem":{"title":"LoopBack - Taking Express to the Next Level","permalink":"/blog/express-to-loopback"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWhen building a LoopBack 4 application, we often need to tweak or improve the default data access behavior provided by the framework. It\'s usually desirable to apply the same set of customizations for multiple models, possibly across several microservices. In this post, I\'d like to share a few tips and tricks for reusing such repository code.\\n\\n\x3c!--truncate--\x3e\\n\\n## Using a Repository Base Class\\n\\nIn this approach, you insert a new repository class (the Repository Base Class, e.g. `AuditableRepository`) between your model-specific repository class (e.g. `ProductRepository`) and the repository class provided by the framework (typically `DefaultCrudRepository`). The base class will hold any code you want to reuse in multiple model-specific repositories.\\n\\nA week ago, I recorded a screencast showing the concept of Repository base classes in practice, you can watch it here:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/s2yDaKiNYCg\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nThe first step is to create a new source code file and implement an empty Repository Base Class. It\'s important to use `.repository.base.ts` suffix in the file name, this will allow `lb4 repository` to recognize the file as contributing a base class.\\n\\n```ts\\n// src/repositories/auditing.repository.base.ts\\nimport {\\n  DefaultCrudRepository,\\n  Entity,\\n  juggler,\\n} from \'@loopback/repository\';\\n\\nexport class AuditingRepository<\\n  T extends Entity,\\n  ID,\\n  Relations extends object = {}\\n> extends DefaultCrudRepository<T, ID, Relations> {\\n  // put the shared code here\\n}\\n```\\n\\nYou should also add an entry to `src/repositories/index.ts` file to re-export the new class:\\n\\n```ts\\n// src/repositories/index.ts\\nexport * from \'./auditing.repository.base\';\\n```\\n\\nWhen you run `lb4 repository` command now, it will find our new base class and offer it in the prompts:\\n\\n```\\n$ lb4 repository\\n? Please select the datasource DbDatasource\\n? Select the model(s) you want to generate a repository for Product\\n? Please select the repository base class (Use arrow keys)\\n\u276f DefaultCrudRepository (Legacy juggler bridge)\\n  ----- Custom Repositories -----\\n  AuditingRepository\\n```\\n\\nI will not go into details on implementing custom persistence behavior here, please watch the screencast to learn how to create a repository class that sets the model property `modifiedBy` to the currently authenticated user on every write operation.\\n\\nOnce you have the repository base class implemented, you may want to share it between multiple projects (e.g. microservices). I recommend creating a LoopBack 4 extension providing the base class and packaging the extension as a standalone npm module..\\n\\n1. Create a new LoopBack 4 extension using `lb4 extension`\\n2. Move `src/repositories/auditing.repository.base.ts` file to the extension (you can use the same file name and path, i.e. `src/repositories/auditing.repository.base.ts`)\\n3. In the extension, update `src/repositories/index.ts` and `src/index.ts` to re-export (new) artifacts.\\n4. Publish the extension to your (private) npm registry or add it as a new package to your monorepo.\\n\\nIn order to use the repository base class from the extension in an application project, we have a bit of work to do. At the moment, `lb4 repository` does not scan dependencies in `node_modules` for repository base classes. To make the base class discoverable by LoopBack\'s CLI, you can add a tiny wrapper file to your application into a location discoverable by the CLI. Implementation-wise, the wrapper just re-exports the base class provided by the extension.\\n\\n```ts\\n// src/repositories/auditing.repository.base.ts\\nexport {AuditingRepository} from \'my-extension-name\';\\n```\\n\\nThat\'s it! Now you can easily create new model-specific repositories using `lb4 repository` and select your shared repository as the base class.\\n\\n## Using a Repository Mixin\\n\\nWhile easy to use, Repository Base Classes have few shortcomings too.\\n\\n1. JavaScript does not support multiple inheritance, thus it\'s not possible to combine behavior from multiple repository base classes in the same model-specific repository class.\\n\\n2. Inheritance-based reuse is considered to be an anti-pattern in Object Oriented Design; it\'s recommended to use composition instead (\\"prefer composition over inheritance\\").\\n\\nLet\'s take a look on how to use Mixins to share bits of repository code via composition.\\n\\nInstead of creating a repository base class, we will create a repository mixin using the [mixin class pattern](https://loopback.io/doc/en/lb4/Mixin.html).\\n\\n```ts\\nimport {MixinTarget} from \'@loopback/core\';\\nimport {CrudRepository, Model} from \'@loopback/repository\';\\n\\nexport function AuditingRepositoryMixin<\\n  M extends Model,\\n  R extends MixinTarget<CrudRepository<M>>\\n>(superClass: R) {\\n  return class extends superClass {\\n    // put the shared code here\\n  };\\n}\\n```\\n\\nBecause `lb4 repository` does not support repository mixins yet, you have to edit model repository classes manually to apply your new mixin.\\n\\n```ts\\nimport {Constructor, inject} from \'@loopback/core\';\\nimport {DefaultCrudRepository} from \'@loopback/repository\';\\nimport {DbDataSource} from \'../datasources\';\\nimport {AuditingRepositoryMixin} from \'../mixins/auditing.repository-mixin\';\\nimport {Product, ProductRelations} from \'../models\';\\n\\nexport class ProductRepository extends AuditingRepositoryMixin<\\n  Product,\\n  Constructor<\\n    DefaultCrudRepository<\\n      Product,\\n      typeof Product.prototype.id,\\n      ProductRelations\\n    >\\n  >\\n>(DefaultCrudRepository) {\\n  constructor(@inject(\'datasources.db\') dataSource: DbDataSource) {\\n    super(Product, dataSource);\\n  }\\n}\\n```\\n\\nWe are discussing CLI support for repository mixins in [loopback-next#5565](https://github.com/strongloop/loopback-next/issues/5565), please leave a comment to let us know if you are interested in this feature.\\n\\nMixins are easy to share via LoopBack extensions too:\\n\\n1. Create a new LoopBack 4 extension using `lb4 extension`\\n2. Move `src/mixins/auditing.repository-mixin.ts` file to the extension\\n3. In the extension, update `src/mixins/index.ts` and `src/index.ts` to re-export (new) artifacts.\\n4. Publish the extension to your (private) npm registry or add it as a new package to your monorepo.\\n5. In your application, update `import` statements to import the shared repository mixin from the extension.\\n\\n## Composing mixins together\\n\\nWhen using a repository base class, it\'s easy to apply all project-specific behavior via a single base class. We can build a composite mixin to achieve the same easy of use with mixins too.\\n\\nLet\'s say we already have `AuditingRepositoryMixin` and `TimeStampRepositoryMixin` implemented, and now we want to create `MyProjectRepositoryMixin` that will apply those two mixins, so that repository classes in our project don\'t have to repeat the list of mixins to apply.\\n\\n```ts\\n// src/mixins/my-project.repository-mixin.ts\\nexport function MyProjectRepositoryMixin<\\n  M extends Model,\\n  R extends MixinTarget<CrudRepository<M>>\\n>(superClass: R) {\\n  return AuditingRepositoryMixin(TimeStampRepositoryMixin(superClass));\\n}\\n```\\n\\n\\n## TypeScript limitations\\n\\nNow you may be thinking: can we define a repository base class that would be recognized by `lb4 repository` and would apply all required mixins?  Unfortunately, the answer is NO.\\n\\nConsider the following code:\\n\\n```ts\\n// src/repositories/base.repository.base.ts\\nexport class BaseRepository<\\n  T extends Entity,\\n  ID,\\n  Relations extends object = {}\\n> extends MyProjectRepositoryMixin<\\n  T,\\n  Constructor<DefaultCrudRepository<T, ID, Relations>>\\n>(DefaultCrudRepository) {\\n  // empty class\\n}\\n```\\n\\nTypeScript reports the following error during compilation:\\n\\n```\\nerror TS2562: Base class expressions cannot reference class type parameters.\\n```\\n\\nYou can learn more about this problem and the reasoning for the current compiler behavior in GitHub issue [Mixin does not allow Generic](https://github.com/Microsoft/TypeScript/issues/26154).\\n\\n## Conclusion\\n\\nIn this post, I explained how to extract bits of Repository code into a reusable form and how to share them by creating a new LoopBack extension. We discussed two options: an inheritance-based approach that uses Repository Base Class and a composition-based approach that uses Repository Mixin. Along the way, we discovered a few areas where TypeScript and LoopBack could improve the developer experience.\\n\\nI hope you will find these techniques useful.\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- Join the discussion in [loopback-next#5565](https://github.com/strongloop/loopback-next/issues/5565) and let us know if you are interested in CLI support for repository mixins.\\n- [Join the community Slack chat](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"express-to-loopback","metadata":{"permalink":"/blog/express-to-loopback","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-05-21-express-to-loopback.md","source":"@site/blog/2020/2020-05-21-express-to-loopback.md","title":"LoopBack - Taking Express to the Next Level","description":"Originally published on strongloop.com","date":"2020-05-27T00:00:00.000Z","formattedDate":"May 27, 2020","tags":[{"label":"Express","permalink":"/blog/tags/express"},{"label":"JavaScript","permalink":"/blog/tags/java-script"}],"readingTime":12.035,"hasTruncateMarker":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"}],"frontMatter":{"title":"LoopBack - Taking Express to the Next Level","date":"2020-05-27T00:00:00.000Z","authors":"hacksparrow","slug":"express-to-loopback","tags":["Express","JavaScript"]},"prevItem":{"title":"How to reuse custom LoopBack Repository code","permalink":"/blog/2020-share-repository-code"},"nextItem":{"title":"LoopBack 4 April 2020 Milestone Update","permalink":"/blog/april-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nExpress is the most popular Node.js package for web server development. Its lightweight, extensible, and flexible nature makes it a perfect fit for projects, small and large, from simple websites to complex web frameworks.\\n\\nLoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and microservices development and easy maintenance.\\n\\nIn this post we will explore the points that make LoopBack a compelling choice for Express developers when it comes to API development.\\n\\n\x3c!--truncate--\x3e\\n\\n## Express and LoopBack Are Not Mutually Exclusive\\n\\nFirst off, let\'s make it clear that Express and LoopBack are not mutually exclusive. You can very well use an existing Express app or middleware with LoopBack. This capability enables gradual migration from Express to LoopBack, that way you don\'t have to throw away your existing code and re-write everything from scratch. \\n\\n![](./images/express-loopback.png)\\n\\n### Extending an Existing Express Application With LoopBack\\n\\nTo use an existing Express app with LoopBack, you can mount the LoopBack app on your Express app.\\n\\nFor a tutorial on how to do that, refer to \\"[Creating an Express Application with LoopBack REST API](https://loopback.io/doc/en/lb4/express-with-lb4-rest-tutorial.html)\\".\\n\\n### Using Express Middleware With LoopBack\\n\\nLoopBack provides three broads ways for loading Express middleware.\\n\\n#### 1. mountExpressRouter()\\n\\nThe `mountExpressRouter()` method of the [RestApplication](https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.html) and [RestServer](https://loopback.io/doc/en/lb4/apidocs.rest.restserver.html) class mounts an express router or application at a path, and supports OpenAPI specification for describing the endpoints provided by the router. It is the preferred choice for mounting data endpoints, like an existing REST API app.\\n\\nFor more details refer to \\"[Mounting an Express Router](https://loopback.io/doc/en/lb4/Routes.html#mounting-an-express-router)\\".\\n\\n#### 2. invokeMiddleware()\\n\\nExpress middleware can also be plugged into the [Sequence](https://loopback.io/doc/en/lb4/Sequence.html) class using the `invokeMiddleware()` action. This approach is recommended when you are not looking beyond a hard-coded list of middleware, when it comes to flexibility and configurability.\\n\\nRefer to \\"[Use Express middleware within the sequence of actions](https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-within-the-sequence-of-actions)\\" for more details.\\n\\n#### 3. Middleware as Interceptors\\n\\nExpress middleware can act as interceptors to controller methods at global, class, or method levels. It is not as simple as the previous two methods, but it provides the most configurability.\\n\\nThe following helper methods from the `@loopback/express` package enable Express middleware to be wrapped into LoopBack interceptors.\\n\\n- `toInterceptor` - Wraps an Express handler function to a LoopBack interceptor function\\n- `createInterceptor` - Creates a LoopBack interceptor function from an Express factory function with configuration\\n- `defineInterceptorProvider` - Creates a LoopBack provider class for interceptors from an Express factory function with configuration. This is only necessary that injection and/or change of configuration is needed. The provider class then needs to be bound to the application context hierarchy as a global or local interceptor.\\n\\nRefer to \\"[Middleware](https://loopback.io/doc/en/lb4/Middleware.html)\\" and \\"[Use Express middleware as interceptors for controllers](https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-as-interceptors-for-controllers)\\" for more information.\\n\\n## What Does LoopBack Offer on Top of Express?\\n\\nExpress is a very extensible but bare-bones web server implementation. What LoopBack offers on top of Express is a set of tools and capabilities that make rapid API and microservices development possible and maintenance easy. REST API and microservices development with Express is possible but after a certain level of complexity, it can become a bug-ridden repetitive exercise for each new project. Using a REST API framework like LoopBack cuts down the development time and reduces maitenance headache.\\n\\nHere are some of the points that makes LoopBack an excellent API development framework for Express developers.\\n\\n### 1. REST API Specialist\\n\\nLoopBack is specially crafted for REST API development. The framework\'s architecture, developer experience, and everything around it are designed primarily with REST API on mind.\\n\\n#### i. Model-View-Controller (MVC) Pattern\\n\\n[MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) is a popular software design pattern that seprates the internal representation of data, implementation of access to this data, and what is presented to the client. This enables clear decoupling of the components that make up the application, which in turn leads to fewer bugs and better management of the development process.\\n\\nLoopBack implements the MVC pattern. The models are defined in model files, controllers provide the REST API interface, and views are JSON objects returned by the controller. This not only allows modular development of the project, but also prevents the codebase from getting messy and unmanageable as the project grows.\\n\\n#### ii. Repository Pattern\\n\\n[Repository pattern](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#the-repository-pattern) is an abstraction for data access logic. It is a great way to decouple data access details from models.\\n\\nIn LoopBack, model files define only the shape and properties of models, connection and queries are handled by repositories which are bound to the models.\\n\\n#### iii. OpenAPI\\n\\nLoopBack uses [OpenAPI specification](http://spec.openapis.org/oas/v3.0.3) for describing the data request and response formats. This highly descriptive standard specification greatly reduces the friction involved in the structural aspect of API development and consumption.\\n\\nLoopBack exposes an OpenAPI specification file created out of the controllers in the app, which is essentially the documentation of the whole REST API of the app.\\n\\n#### iv. CRUD\\n\\nWith a [datasource](https://loopback.io/doc/en/lb4/DataSources.html) defined and configured, once a model and its corresponding repository and controller are created, a [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) functionality is automatically available for the model without any additional work.\\n\\nThe auto-generated functionality and implementation can be modified by editing the controller and/or the respository files of the model.\\n\\n#### v. Support for Numerous Databases\\n\\nConfiguring database connectivity and executing queries is one of the most crucial tasks when developing APIs. With the numerous database options available, writing optimal queries, and maybe even switching to a different database altogether can become a very tedious and time-consuming task.\\n\\nLoopBack provides an abstraction for database access using [datasources](https://loopback.io/doc/en/lb4/DataSources.html). All you have to do is select the database you want to use for your app and provide the connectivity details. LoopBack then takes care of making the connection and running the queries in the context of a REST API implementation.\\n\\nAny time you want to switch to a different database, it is just a matter to speciying a new datasource. You don\'t have to worry about re-writing the queries, LoopBack takes care of it for you.\\n\\nThe following datasources are supported by LoopBack: In-memory db, In-memory key-value, IBM Object Storage, IBM Db2 (for Linux, Unix, Windows), IBM Db2 for i, IBM Db2 for z/OS, IBM DashDB, IBM MQ Light, IBM Cloudant DB, Couchdb 2.x, IBM WebSphere eXtreme Scale key-value, Cassandra, gRPC, Redis, MongoDB, MySQL, PostgreSQL, OracleDB, Microsoft SQL, and z/OS Connect Enterprise Edition.\\n\\nNon-database datasources supported by LoopBack includes: OpenAPI, REST services, SOAP webservices, Email, and ElasticSearch.\\n\\nCommunity supported datasources includes: Couchbase, Neo4j, Twilio, Kafka, and SAP HANA.\\n\\nThis wide of array of datasources covers almost all the popular databases used for REST API development, which significantly reduces the development time and effort in the database department.\\n\\n#### vi. Integration Capabilities With External APIs\\n\\nApart from using the non-database datasources provided by LoopBack, you can create your own [services](https://loopback.io/doc/en/lb4/Services.html) for connecting to external REST/SOAP/gRPC APIs.\\n\\nThese services can then be used in the controllers, effectively creating an OpenAPI-compliant proxy to those remote services. This usage scenario is perfect for proving a custom interface to an existing (legacy) API.\\n\\n\\n![](./images/req-res-high-level.png)\\n\\n### 2. Dependency Injection\\n\\nConventionally, dependencies are passed as function parameters. This method works fine if the dependency is used only in the invoked function, however it can get pretty complex and unwieldy in certain scenarios because the dependency parameter is a factor that prevents the caller and the called function from being [loosely coupled](https://en.wikipedia.org/wiki/Loose_coupling).\\n\\nImagine, a dependency is used within a function within a function within a function within a function. You will need to pass the dependency from the called function to the next function to the next function to the next function. Now imagine, the dependency has been changed to a different object in one or more places. You will now have to change it in the \\"top\\" function and all the places where it was being passed around. It is a mess.\\n\\nEnter [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) (DI). Dependency injection enables dependent code to inject the dependencies themselves, instead of relying on the caller function to pass the dependency in function arguments. That way, any time something changes, it never includes the caller. The caller and called functions are loosely coupled.\\n\\nLoopBack\'s [Context](https://loopback.io/doc/en/lb4/Context.html) object is a DI container. It makes it possible to inject dependencies in classes, properties, and methods without having to pass dependecies in constructor or method parameters.\\n\\nThe ability to use DI in your codebase can greatly improve the overall quality of code, increase development productivity, improve tests cases, and reduce maintenance costs.\\n\\n### 3. Extensibility\\n\\nLoopBack is designed to be highly extensible. It provides extensibility using different artifacts and patterns in different layers of the framework.\\n\\n#### i. Sequence\\n\\nThe LoopBack [Sequence](https://loopback.io/doc/en/lb4/Sequence.html) class contains the whole request-response handling infrastructure of the framework, therefore the `Sequence` is the perfect place for implementing functionality that requires access to the beginning and the end of the request-response cycle - like logging, authentication, etc.\\n\\nIt is very easy to modify the existing functionality or add new ones by implementing a custom [SequenceHandler](https://loopback.io/doc/en/lb4/apidocs.rest.sequencehandler.html) for your app\'s `Sequence`. The `Sequence` file is located at `src/sequence.ts`.\\n\\n#### ii. Components\\n\\n[Components](https://loopback.io/doc/en/lb4/Components.html) are great for grouping different but related artifacts for implementing a feature or functionality in the app.\\n\\nComponents can contribute the following artifacts to the app:\\n\\n- [Controllers](https://loopback.io/doc/en/lb4/Controllers.html)\\n- [Providers](https://loopback.io/doc/en/lb4/Services.html)\\n- [Classes](https://www.typescriptlang.org/docs/handbook/classes.html)\\n- [Servers](https://loopback.io/doc/en/lb4/Server.html)\\n- [Lifecycle observers](https://loopback.io/doc/en/lb4/Life-cycle.html)\\n- [Bindings](https://loopback.io/doc/en/lb4/Binding.html)\\n\\n#### iii. Extensions\\n\\n[Extension points and extensions](https://loopback.io/doc/en/lb4/Extension-point-and-extensions.html) are the interfaces for developing plugins for LoopBack apps. It is an excellent pattern for adding decoupled extensibility to a software system.\\n\\nLoopBack provides the following helper decorators and functions for implementating extension points and extensions on top of its [Inversion of Control](https://loopback.io/doc/en/lb4/Context.html) and [Dependency Injection](https://loopback.io/doc/en/lb4/Dependency-injection.html) container.\\n\\n- `@extensionPoint` - decorates a class to be an extension point with an optional custom name\\n- `@extensions` - injects a getter function to access extensions to the target extension point\\n- `@extensions.view` - injects a context view to access extensions to the target extension point. The view can be listened for context events.\\n- `@extensions.list` - injects an array of extensions to the target extension point. The list is fixed when the injection is done and it does not add or remove extensions afterward.\\n- `extensionFilter` - creates a binding filter function to find extensions for the named extension point\\n- `extensionFor` - creates a binding template function to set the binding to be an extension for the named extension point(s). It can accept one or more extension point names to contribute to given extension points\\n- `addExtension` - registers an extension class to the context for the named extension point\\n\\n#### iv. Life Cycle Observers\\n\\n[Life cycle observers](https://loopback.io/doc/en/lb4/Extension-life-cycle.html) are artifacts that can take part in the starting and stopping processes of the application. They can execute code as the app is starting (such as configuring something) or is shutting down (such as closing the connection to a server).\\n\\n#### v. Servers\\n\\nThe LoopBack REST API server is just one of the many possible server capabilities of LoopBack. LoopBack can start multiple [servers](https://loopback.io/doc/en/lb4/Creating-servers.html) together of similar or different implementations, making LoopBack an excellent microservices hub. You can use this to create your own implementations of REST, SOAP, gRPC, MQTT and more protocols. For an overview, see [Server](https://loopback.io/doc/en/lb4/Server.html).\\n\\n#### vi. Interceptors\\n\\nLoopBack supports [Interceptors](https://loopback.io/doc/en/lb4/Interceptors.html). They are reusable functions to provide [aspect-oriented](https://en.wikipedia.org/wiki/Aspect-oriented_programming) logic around method invocations. There are many use cases for interceptors, such as:\\n\\na. Add extra logic before / after method invocation, for example, logging or measuring method invocations.\\nb. Validate/transform arguments\\nc. Validate/transform return values\\nd. Catch/transform errors, for example, normalize error objects\\ne. Override the method invocation, for example, return from cache\\n\\nFor more details about extensibility in LoopBack, refer to \\"[Extending LoopBack 4](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html)\\".\\n\\n### 4. Authentication and Authorization\\n\\nAuthentication and authorization form the basis of securing and controlling access to protected resources, and is a requirement for any app that deals with protected data. Authentication is responsible for verifying the user\'s identity before allowing access to a protected resource. Authorization is responsible for deciding if a user can perform a certain action on a protected resource or not.\\n\\nLoopBack comes with an [authentication component](https://loopback.io/doc/en/lb4/apidocs.authentication.html), which enables developers to plug in different authentication strategies (custom and standard) to the app. It also supports all the [Passport](http://www.passportjs.org/) authentication strategies.\\n\\nYou can read more about authentication in LoopBack in the [authentication doc](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html).\\n\\nLoopBack\'s [authorization component](https://loopback.io/doc/en/lb4/apidocs.authorization.html) is a highly configurable authorization system, which allows you to write your own authorization rules or use an existing one.\\n\\nAll the details about authorization in LoopBack can be found in the [authorization doc](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html).\\n\\n### 5. Great command-line Tools\\n\\nDatasources, models, controllers, repositories are great for modularizing the app, but manually creating the files and writing repetitive code with minimal differences for each new entity would be a tedious time-consuming activity.\\n\\nLoopBack comes with a utility command-line tool, [lb4](https://www.npmjs.com/package/@loopback/cli). It has commands for generating datasources, models, controllers, repositories, and other LoopBack artifacts so that you don\'t have to create them manually.\\n\\nGiven a datasource, the `discover` command can generate models files from the database. This can be a great time saver if you are using an existing database of your LoopBack app, and especially if the database had a lot of tables with many columns (or their equivalent structures). If an OpenAPI specification is provided, the `openapi` command will not only create the model files, it will also create the controller files. This can save even more time.\\n\\nRefer to the [documentation](https://loopback.io/doc/en/lb4/Command-line-interface.html) for all the details about the `lb4` command.\\n\\n### 6. TypeScript Support\\n\\nLoopBack is a [TypeScript](https://www.typescriptlang.org/) framework. TypeScript is a typed superset of JavaScript.\\n\\nAlthough not directly a LoopBack feature, using a typed language for development prevents many bugs and steers developers towards using optimized coding practices. This can make a significant difference in the development and maintenance efforts when compared to using plain JavaScript.\\n\\n### 7. The IBM Confidence\\n\\nLoopBack is an open source project backed by IBM, used by IBM products and customers. Hopefully, this gives you assurance on the quality and the longevity of this framework.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"april-2020-milestone","metadata":{"permalink":"/blog/april-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-05-06-april-milestone.md","source":"@site/blog/2020/2020-05-06-april-milestone.md","title":"LoopBack 4 April 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-05-06T00:00:00.000Z","formattedDate":"May 6, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":7.915,"hasTruncateMarker":true,"authors":[{"name":"Deepak Rajamohan","title":"LoopBack Maintainer","url":"https://github.com/deepakrkris","imageURL":"https://avatars0.githubusercontent.com/u/7688315","key":"deepakrkris"}],"frontMatter":{"title":"LoopBack 4 April 2020 Milestone Update","date":"2020-05-06T00:00:00.000Z","authors":"deepakrkris","slug":"april-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack - Taking Express to the Next Level","permalink":"/blog/express-to-loopback"},"nextItem":{"title":"Community Q&A Monthly Digest - April 2020","permalink":"/blog/2020-april-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIn April, we focused mostly on completing migration activities, like the migration guide and other related\\ntasks like running existing tests in a LoopBack 3 application after composing it within a LoopBack 4 application. But, that didn\'t stop us from exploring and adding some cool features.\\n\\nWe now have a new [Express](https://github.com/strongloop/loopback-next/tree/master/packages/express) package, which enables modeling Express middleware functions as an interceptor chain. Also it is possible now to break a complex application into much smaller components and wire them in a main application. You can find more details on thsese below in [`Exploring new territories`](#exploring-new-territories).\\n\\nAlso our community has published many [LoopBack 4 extensions in NPM](https://www.npmjs.com/search?q=keywords:loopback-extension). Many of these extensions are addressing a variety of usecases like pub-sub messaging, mqtt, graphql, rate-limiting, authentication, logging, AWS cloud integration, etc. The extensibility of LoopBack in real time use cases are even surprising us and the possibilities seems to be endless.\\n\\n- [Migration Guide](#migration-guide)\\n- [Exploring new territories](#exploring-new-territories)\\n- [APIConnect Extension](#apiconnect-extension)\\n- [Miscellaneous](#miscellaneous)\\n- [Documentation](#documentation)\\n- [Community Contributions](#community-contributions)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nWe have made very good progress with migration guides and LoopBack 3 users should have a solid ground now to explore and migrate to LoopBack 4. The well used LoopBack 3 components are all covered with migrations examples and tutorials. There are certain components which are having fewer downloads per day, that are not covered yet. But we are pursuing steadily to address all migration questions.\\n\\n### Differences in Request-Response Cycle\\n\\nWe have created a document describing the differences between the [request-response cycle](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html) in LoopBack 3 and LoopBack 4. Those of you coming from LoopBack 3 will have a better understanding about how the request-response cycle works in LoopBack 4 compared to LoopBack 3.\\n\\nThe [LoopBack 4 request-response cycle documentation](https://loopback.io/doc/doc/en/lb4/Request-response-cycle.html) contains the details in more depth for LoopBack 4.\\n\\n### Example to use Passport Strategies for Authentication in LoopBack 4\\n\\nA new [Passport Login example](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login) is now available. It shows how to use [Passport Strategies](http://www.passportjs.org/docs/) in LoopBack 4 as an independent authentication step in the application `Sequence` as well as standard express middleware. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.\\n\\n### Booting Migration Guide\\n\\nBecause of the architectural differences, the booting process is very different in LoopBack 3 and LoopBack 4. [This document](https://loopback.io/doc/en/lb4/LB3-vs-LB4-booting.html) describes the differences and lists the various artifacts that take part in the booting process in LoopBack 4.\\n\\n### Custom Validation\\n\\nThe [data coercion and validation](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#data-coercion-and-validation) and [access to data before writing to the databases](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#access-to-data-before-writing-to-the-databases) sections of the [LB3 to LB4 request-response migration guide](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html) deals with the topic of access and application of custom validation to data in Loopback 4.\\n\\n### Differences between LB3 and LB 4 CLI Commands\\n\\nThe command line interfaces of LoopBack 3 and LoopBack 4 have some similarities, but also some differences. We have outlined these similarities and differences in [Migrating CLI usage patterns](https://loopback.io/doc/en/lb4/migration-cli.html).\\n\\n## Exploring New Territories\\n\\n### The NEW Express Package and Enabling Express Middleware as Interceptors\\n\\nThe new [Express Package](https://github.com/strongloop/loopback-next/tree/master/packages/express), has enabled injecting single and multiple express middleware functions as `interceptors` into `Controller` invocations and also as a middleware step in the application `Sequence` as follows:\\n\\nThe default sequence now has a Middleware step. It creates an invocation chain to call registered middleware handlers with the extension pattern. The sequence can be customized to have more than one Middleware step. Express middleware can also be wrapped as LB4 interceptors, which can in turn be added to global/class/method level. Move built-in cors and openapi endpoints as express middleware functions.\\n\\nYou can check the [express middleware page in loopback docs](https://loopback.io/doc/en/lb4/Express-middleware.html).\\n\\n### Spike - Migrating OAuth2 Component\\n\\nIn story [#3959](https://github.com/strongloop/loopback-next/issues/3959) we explored the possibility and evaluated the required effort to migrate module [`loopback-component-oauth2`](https://github.com/strongloop/loopback-component-oauth2). Considering that LoopBack 4 currently focuses on the integration with third party OAuth 2.0 providers, and the module is complicated, we decide to defer the migration guide and demo a simplified server with OAuth 2.0 enabled on it.\\n\\nYou can find details about the mock server on page [migration-auth-oauth2](https://loopback.io/doc/en/lb4/migration-auth-oauth2.html).\\n\\n### Running LoopBack 3 Tests when Mounted on a LoopBack 4 project\\n\\nWith users being able to [mount their LoopBack 3 tests on a LoopBack 4 project](https://loopback.io/doc/en/lb4/migration-mounting-lb3app.html), we explored how they can also migrate their LB3 tests onto the LB4 project. Documentation is [coming](https://github.com/strongloop/loopback-next/issues/5298), but if you want to see how an example of how to do it now, see the [spike](https://github.com/strongloop/loopback-next/pull/5251). The spike demonstrates running LB3 tests in the [`lb3-application` example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application).\\n\\n### Simplify your Complex Applications - Booting Component Applications\\n\\nUsers can now break down a complex application into much smaller components and wire them all together in a main application, with a new feature to [Boot up Component Applications](https://github.com/strongloop/loopback-next/pull/5304).\\n\\n## APIConnect Extension\\n\\nThe [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is now tested by [publishing shopping app APIs, enhanced with the extension, on a IBM DataPower Gateway](https://github.com/strongloop/loopback-next/issues/4498).\\n\\nWe took the shopping example for a close-to-real-life scenario. This would help IBM APIConnect customers to develop their applications with LoopBack and manage them with IBM APIConnect.\\n\\nOnce LoopBack developers have their REST APIs created they could use the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) to enhance their OpenAPI spec with `x-ibm-` OpenAPI metadata. For the shopping example, we followed the [steps in the example repository](https://github.com/strongloop/loopback4-example-shopping/blob/master/kubernetes/docs/deploy-to-ibmcloud.md) to deploy to IBM Cloud and then imported the OpenAPI specification to APIConnect with [steps explained in the IBM developer portal](https://developer.ibm.com/apiconnect/2019/10/30/manage-and-enforce-openapi-v3-oai-v3/).\\n\\n## Miscellaneous\\n\\n### Extracting JWT Authentication to an Extension Module\\n\\nAfter creating the demo for JWT authentication in [`loopback4-shopping-example`](https://github.com/strongloop/loopback4-example-shopping), and applied a similar auth system in [`access-control-migration`](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration), we think it\'s time to extract the JWT authentication system into a separate extension package, so that people can quickly mount a component to try out the feature. \\n\\nLast month, we created the extension as [authentication-jwt](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt), and its usage is well documented in the [README.md file](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt).\\n\\n### Strong-Soap Features and Support\\n\\nStrong-Soap now supports validation of [anonymous simple types](https://github.com/strongloop/strong-soap/pull/275) and [RPC suffixes](https://github.com/strongloop/strong-soap/pull/271).\\n\\n### Customizing Explorer Theme\\n\\nAs many community users show the interests in changing the look of explorer, we introduced a configuration property called `swaggerThemeFile` to specify user provided .css themes. For example:\\n\\n```ts\\n// Inside application constructor\\n// customize the swagger-ui\\nthis.configure(RestExplorerBindings.COMPONENT).to({\\n  swaggerThemeFile: \'/theme-newspaper.css\',\\n});\\n```\\n\\nYou can check the complete guide in section [customizing Swagger UI theme](https://github.com/strongloop/loopback-next/blob/956a6aa574995c6cdd5066f6af7b92a93382eefc/packages/rest-explorer/README.md#customizing-swagger-ui-theme).\\n\\n### Move Datasource Configurations from .json to .ts File\\n\\nTo align with existing typescript files and dynamic configuration of datasources, we have [switched datasource configurations to .ts files](https://github.com/strongloop/loopback-next/pull/5000) from LoopBack 3 style json files. Please watch the [video tutorial](https://www.youtube.com/watch?v=S3BKXh7wDYE&feature=youtu.be) from Miroslav on migrating `Migrate LoopBack 4 datasource config to TypeScript`.\\n\\n### Build with TS Project-References\\n\\nLoopBack monorepo was configured in a hacky way to allow TypeScript to build individual packages. We have made [changes to leverage TypeScript\'s Project-References](https://github.com/strongloop/loopback-next/pull/5155). Project references are a new feature in TypeScript 3.0 that allow to structure TypeScript projects into smaller pieces.\\n\\n### Other Build Features\\n\\nChanges done to make [default compilation target as ES2018](https://github.com/strongloop/loopback-next/pull/5205) and enable all ES2020 features for `lib` configuration.\\n\\n### Complex OpenAPI Validations\\n\\nA list of AJV features have been added in the past few months including [AJV keywords](https://github.com/strongloop/loopback-next/pull/3539), [AJV extensibility](https://github.com/strongloop/loopback-next/pull/4979), [AJV service provider](https://github.com/strongloop/loopback-next/pull/4808) and [asynchronous validations](https://github.com/strongloop/loopback-next/pull/4762).\\n\\n## Documentation\\n\\n### Working with Data\\n\\nIn LoopBack 4, models describe the shape of data, repositories provide behavior like CRUD operations, and controllers define routes. It\'s easy to manipulate and query data with LB4. However, for a long time LoopBack 4 documentation was missing the _Woring with Data_ section and users were referencing the old docs in LoopBack 3. Even though LB3 has almost the same querying rules as LB4, the different styles between LB4 and LB3 sometimes are still causing confusion.\\n\\nGladly, we added that section with different filters under the page [Usage Scenarios - Working with Data](https://loopback.io/doc/en/lb4/Working-with-data.html). For each filter, we introduced the basic usage with Node.js and REST APIs and also show examples of using both APIs. For instance, we have an example of showing how the `limit` filter works with Node.js API and also the corresponding example of using REST. \\n\\n```\\nNode.js API:\\n\\nawait orderRepository.find({limit: 5});\\n\\nREST:\\n\\n/orders?filter[limit]=5\\n```\\n\\n### Calling APIs with OpenAPI Specification\\n\\nIf you want to connect to a REST service with an OpenAPI description, the [OpenAPI connector](https://github.com/strongloop/loopback-connector-openapi) would be what you need. We updated the documentation in the [Calling other APIs and web services\\n](https://loopback.io/doc/en/lb4/Calling-other-APIs-and-web-services.html) to include this usage. Besides, we added more configuration details in the [OpenAPI connector docs page](https://loopback.io/doc/en/lb4/OpenAPI-connector.html).\\n\\n## Community Contributions\\n\\n### Added tsdocs for LoopBack Packages\\n\\nAutogenerated API docs had descriptions empty for all packages which now fixed by [adding ts docs to all packages](https://github.com/strongloop/loopback-next/pull/4711). Please take a look at the [API docs](https://loopback.io/doc/en/lb4/apidocs.index.html) to see the difference.\\n\\n### Consolidate Openapi Schema using a New Spec Enhancer\\n\\nLoopBack users will be able to automatically extract schemas used in multiple places into `#/components/schemas` and replace the references with a `$ref`, with a [new OAS enhancer](https://github.com/strongloop/loopback-next/pull/4365).\\n\\n## May Milestones\\n\\nThis month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more detials, take a look at our [May milestone list on GitHub](https://github.com/strongloop/loopback-next/issues/5301).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-april-slack-qa","metadata":{"permalink":"/blog/2020-april-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-27-april-slack-qa.md","source":"@site/blog/2020/2020-04-27-april-slack-qa.md","title":"Community Q&A Monthly Digest - April 2020","description":"Originally published on strongloop.com","date":"2020-04-29T00:00:00.000Z","formattedDate":"April 29, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"},{"label":"Slack","permalink":"/blog/tags/slack"},{"label":"Q&A","permalink":"/blog/tags/q-a"}],"readingTime":5.87,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - April 2020","date":"2020-04-29T00:00:00.000Z","authors":"dhmlau","slug":"2020-april-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 April 2020 Milestone Update","permalink":"/blog/april-2020-milestone"},"nextItem":{"title":"Build REST APIs for CRUD operations from a model without coding","permalink":"/blog/model-to-rest-api-feature"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIn the past, we\'ve explored a few options on providing a forum for our users to help each other: [Google group](https://groups.google.com/forum/#!forum/loopbackjs), [Gitter](https://gitter.im/strongloop/loopback) and GitHub. We are pleased to announce that the LoopBack Slack workspace, [https://loopbackio.slack.com/](https://loopbackio.slack.com/), is available for our users to join. Since Slack is quite commonly used, we thought it would be a good time for us to modernize our tooling for the LoopBack community helping out each other out. Also, the LoopBack core team uses Slack on a daily basis; it is helpful because it allows us to get notifications and communicate efficiently.\\n\\nThere have been lots of great questions and answers. We thought it would be helpful to curate some of the discussions here. Thanks again for submitting the questions and answers! \\n\\n\x3c!--truncate--\x3e\\n\\n**Question: I am trying to find a working implementation for TimeStamp Mixin to have time stamp automatic fields in the database. In the older version of LoopBack, I was capable to create a BaseEntity and BaseRepository and to extend them but now it is not working anymore. If I extend in the same way the controllers are not working anymore. The current example in the docs is based on adding the mixin to the Controller which I like much less. Any suggestions? Thanks.**\\n\\n**Answer:** For specifying the creation timestamp, you can use the `default` property for the `@property` decorator in your model. Something like:\\n```ts\\n  @property({\\n    type: \'date\',\\n    default: () => new Date(),\\n  })\\n  createDate: string;\\n```\\nYou can also use [Moment.js](https://momentjs.com/) to format the timestamp. \\n\\nUpdating updatedAt field should be possible via 2 ways:\\n1. Via controller\\n    When a controller function is invoked, the current timestamp could be taken and then injected into the original request query before being passed into the repository function.\\n    You can also write your own base class (without the `@model` decorator) and then extend it where necessary.\\n2. Via datasource\\n    It is possible to add a new function to the datasource which can mutate the query object and then pass it on.\\n\\n---\\n**Question: Kinda new to loopback, I want to learn more about decorators and how to custom loopback logic for more advanced usages, can you walk me through the process of creating custom decorators to create my own \\"hook\\" around a controller?**\\n\\n**Answer:** A great starting point would be the [Extending LoopBack 4](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html) docs.\\n\\nThese concepts are the building blocks of LB4. They serve a specific purpose while following the OOP paradigm.\\nIt may look like a lot, but these are essentially the different extension points in LoopBack 4 (hence why LB4 is extremely extensible).\\nLet\'s see if we can break it down:\\n\\n**Decorators (in general)**\\nThe decorators in LB4 are no different to the standard decorators in TypeScript. They add metadata to classes, methods. properties, or parameters. They don\'t actually add any functionality, only metadata.\\nThink of it like the file properties on your file system: It\'s not visible when interacting with the file normally, but those who want to access those properties will be able to via a standard interface.\\nThere\'s more benefits to Decorators, but the above explanation is the watered-down gist of it.\\n\\n**Sequence (in general)**\\nSequences are a group of Actions. It simply indicates which actions should be used by the server to process the request.\\n\\n**Sequence Actions (in general)**\\nSequence Actions (or simply \\"Actions\\") are stateless, meaning that they only have the basic concept Elements.\\nConverting into Express.js terminology; Think of an Action as an middleware. And think of an Element as the contents that a middleware receives. They work differently, but the high-level idea is about the same.\\nThey are unaware of other higher-level concepts such as Controllers, DataSource, Models, etc.\\n\\n**Components (in general)**\\nWhen adding functionality to LB4, you\'ll usually need to add a combination of Providers, Booters, etc. This can tedious to manage. Hence, Components are registered once in the LB4 Application, which will then register the other stuff for you.\\n**@authenticate**\\nAdds authentication metadata.\\n\\n**AuthenticationComponent**\\nA component to register the necessary artifacts.\\n\\n**AuthenticationActionProvider**\\nThis is a Sequence Action. Essentially, it adds an \\"authentication\\" step to the Sequence.\\n\\n**AuthenticationStrategyProvider**\\nThis is a standard interface that the @loopback/authentiation package understands. Hence, any authentication strategy that adopts this interface can be used in @loopback/authentication. Think of it like the standard interface for Passport.js uses to interface with many different authentication strategies\\n\\n---\\n**Question: I have experience with other ActiveRecord implementations. If I was able to utilize TypeORM, this would be more straightforward. You mentioned TypeORM is coming soon as an option for LoopBack 4?**\\n\\n**Answer:** You can track progress of a proof of concept here: [https://github.com/strongloop/loopback-next/pull/4794](https://github.com/strongloop/loopback-next/pull/4794)\\nLoopback 4 has been designed to allow flexibility so you can for example use TypeORM if you prefer.\\n\\n**Question: I am using mysql connector,  I have generated models using LB4 model, But when I migrate the models from loopback to database using `npm run migrate`. The foreign key constraints were missing in database. I have many.model.ts files. How to have foreign key in database with npm run migrate.**\\n\\n**Answer:** AFAIK, you\u2019ll need to add some settings in the `@model` decorator on the FK configuration so that npm run migrate can pick up.\\nI\u2019ve tried that for postgresql using [this snippet](https://github.com/dhmlau/loopback4-coffeeshop/blob/master/src/models/review.model.ts#L4-L15).  Hope it works for you for mysql as well.\\n\\nThere is an GitHub issue tracking the work to add constraints in db migration: [https://github.com/strongloop/loopback-next/issues/2332](https://github.com/strongloop/loopback-next/issues/2332).\\n\\n---\\n**Question: Can anyone point me in the right direction on how to do loggig in LB4?**\\n\\n**Answer:** You have lots of options.  If you want to do it inside of the context of the loopback application, with IoC binding, you can create a singleton service provider that returns the log utility of your choice.  For example, with winston:\\n```ts\\n// services/logger.service.ts\\nimport { bind, BindingScope, Provider } from \'@loopback/core\';\\nimport * as winston from \'winston\';\\nimport * as Transport from \'winston-transport\';\\n@bind({ scope: BindingScope.SINGLETON })\\nexport class LogService implements Provider<winston.Logger> {\\n  logger: winston.Logger;\\n  constructor() {}\\n  value() {\\n    if (!this.logger) {\\n      const transports: Transport[] = [];\\n      transports.push(\\n        new winston.transports.File({\\n          handleExceptions: true,\\n          format:winston.format.json(),\\n          filename: \'/path/t\'\\n        }),\\n      );\\n      this.logger = winston.createLogger({\\n        transports,\\n        exitOnError: false,\\n      });\\n    }\\n    return this.logger;\\n  }\\n}\\n```\\n\\n**application.ts**\\n```ts\\n// in constructor\\nthis.bind(\'loggingKey\').toProvider(Logger).inScope(BindingScope.SINGLETON);\\n```\\n\\n**controller.ts (also applies for service.ts and others)**\\n```ts\\nexport class HelloWorldController {\\n  @get(\'/hello-world\')\\n  public async getHelloWorld(\\n    @inject(\'loggingKey\') logger: winston.Logger\\n  ) {\\n    logger.info(\'logging to a file!\');\\n    return \'Hello World\';\\n  }\\n}\\n```\\n\\nWith binding and injection, you can do some pretty cool stuff, like this extension that gives you a `@log(LOG_LEVEL.INFO)` decorator that can be used to time a request:\\n[https://github.com/strongloop/loopback-next/tree/master/examples/log-extension](https://github.com/strongloop/loopback-next/tree/master/examples/log-extension)\\n\\nThere\'s also the old school nodejs way of just importing a file that exports a log utility, all set up in the global scope. I believe most tutorials for utilities like winston start with that :)\\n\\n--- \\n**Question: Are there any solution to see the errors of model in the response of the request?**\\n\\n**Answer:** See [https://loopback.io/doc/en/lb4/Sequence.html#handling-errors](https://loopback.io/doc/en/lb4/Sequence.html#handling-errors) for reference.\\n\\n--- \\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: https://github.com/strongloop/loopback-next/issues/5048."},{"id":"model-to-rest-api-feature","metadata":{"permalink":"/blog/model-to-rest-api-feature","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-22-model-to-rest-api.md","source":"@site/blog/2020/2020-04-22-model-to-rest-api.md","title":"Build REST APIs for CRUD operations from a model without coding","description":"Originally published on strongloop.com","date":"2020-04-22T00:00:00.000Z","formattedDate":"April 22, 2020","tags":[{"label":"feature","permalink":"/blog/tags/feature"},{"label":"REST","permalink":"/blog/tags/rest"}],"readingTime":2.765,"hasTruncateMarker":true,"authors":[{"name":"Nora Abdelgadir","title":"LoopBack Maintainer","url":"https://github.com/nabdelgadir","imageURL":"https://avatars0.githubusercontent.com/u/42985749","key":"nabdelgadir"}],"frontMatter":{"title":"Build REST APIs for CRUD operations from a model without coding","date":"2020-04-22T00:00:00.000Z","authors":"nabdelgadir","slug":"model-to-rest-api-feature","tags":["feature","REST"]},"prevItem":{"title":"Community Q&A Monthly Digest - April 2020","permalink":"/blog/2020-april-slack-qa"},"nextItem":{"title":"LoopBack 4 2020 Q1 Overview","permalink":"/blog/loopback-4-2020-q1-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nAs LoopBack 3 is expected to reach its EOL by the end of this year, we have been working hard to achieve feature parity between LoopBack 3 and LoopBack 4. One feature of LoopBack 3 that we did not have in LoopBack 4 yet was the ability to go directly from only a model definition and model configuration to fully-featured CRUD REST API. Unlike LoopBack 3, LoopBack 4 relied on intermediate repository and controller classes in order to go from a model defintion class to use REST API. One thing that LoopBack 4 strives to do is make common tasks as easy as possible, while allowing advanced composition with loosely-coupled artifacts. So, after completing tasks from the related [epic](https://github.com/strongloop/loopback-next/issues/2036), we are now proud to announce that LoopBack 4 now offers support for going from a model definition to REST API with no custom repository or controller classes. \\n\\n\x3c!--truncate--\x3e\\n\\nIn LoopBack 4, the [model definition](https://loopback.io/doc/en/lb4/Model.html) provides the schema and the [datasource](https://loopback.io/doc/en/lb4/DataSources.html) configures how to access the database. Starting with these two artifacts, the user can directly expose REST API by using the following CLI command:\\n\\n```sh\\nlb4 rest-crud\\n```\\n\\nFor example, if you have a model `Product` and datasource `db`, you can use the command as follows:\\n\\n```sh\\nlb4 rest-crud --model Product --datasource db\\n```\\n\\nThe command can also take in multiple models at the same time. You can find more information on how to use the command in the [REST CRUD generator documentation](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\nWhat the command does is it creates a configuration file describing properties of the REST API:\\n\\n`/src/model-endpoints/product.rest-config.ts`\\n\\n```ts\\nimport {ModelCrudRestApiConfig} from \'@loopback/rest-crud\';\\nimport {Product} from \'../models\';\\n\\nmodule.exports = <ModelCrudRestApiConfig>{\\n    model: Product, // name of the model\\n    pattern: \'CrudRest\', // make sure to use this pattern\\n    dataSource: \'db\', // name of the datasource\\n    basePath: \'/products\',\\n};\\n```\\n\\nThen it adds `CrudRestComponent` from `@loopback/rest-crud` to the application:\\n\\n`src/application.ts`\\n\\n```ts\\nimport {CrudRestComponent} from \'@loopback/rest-crud\';\\n```\\n\\n```ts\\nthis.component(CrudRestComponent);\\n```\\n\\nDocumentation for this feature can be found in [Creating CRUD REST APIs from a model](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html). \\n\\n## Implementation\\n\\nWe implemented [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) based on the [`@loopback/model-api-builder`](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) package. This model API builder is what builds CRUD REST API from the model definition and datasource.\\n\\n## Example Application\\n\\nTo demonstrate this functionality with an example, we added a new example based on the [`Todo` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo). [`@loopback/example-rest-crud`](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) mimics the behavior of the `Todo` example, but does not include any custom repository or controller classes like the `Todo` example. To download this example, use the following command:\\n\\n```sh\\nlb4 example rest-crud\\n```\\n\\n## Future Work\\n\\nWhile the main epic is now complete, there are additional out of scope tasks that are part of future work. If you would like to contribute, please see the following issues:\\n\\n- [From relation definition to REST API with auto-generated repository/controller classes](https://github.com/strongloop/loopback-next/issues/2483)\\n- [KeyValueRestController extension](https://github.com/strongloop/loopback-next/issues/2737)\\n- [Expose custom remote methods](https://github.com/strongloop/loopback-next/issues/2482)\\n\\nThe LoopBack team appreciates all your contributions!\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-4-2020-q1-overview","metadata":{"permalink":"/blog/loopback-4-2020-q1-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-15-loopback-q1-overview.md","source":"@site/blog/2020/2020-04-15-loopback-q1-overview.md","title":"LoopBack 4 2020 Q1 Overview","description":"Originally published on strongloop.com","date":"2020-04-15T00:00:00.000Z","formattedDate":"April 15, 2020","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":6.26,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 4 2020 Q1 Overview","date":"2020-04-15T00:00:00.000Z","authors":"dhmlau","slug":"loopback-4-2020-q1-overview","tags":["Quarterly update"]},"prevItem":{"title":"Build REST APIs for CRUD operations from a model without coding","permalink":"/blog/model-to-rest-api-feature"},"nextItem":{"title":"LoopBack 4 March 2020 Milestone Update","permalink":"/blog/march-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe past few weeks have been challenging for many of us. While this pandemic situation affected our lives in different ways, we hope you all stay safe.\\n\\nIn Q1, we continued to make good progress in the following areas:\\n\\n- [Migration guide](#migration-guide)\\n- [Migration Tooling and Examples](#migration-tooling-and-examples)\\n- [From Model Definitions to REST APIs](#from-model-definitions-to-rest-apis)\\n- [Newly added examples](#newly-added-examples)\\n- [Newly added extensions](#newly-added-extensions)\\n- [Enhancements in LoopBack core and OpenAPI areas](#enhancements-in-loopback-core-and-openapi-areas)\\n- [Rework of shopping example](#rework-of-shopping-example)\\n- [Refreshed look for LoopBack documentation](#refreshed-look-for-loopback-documentation)\\n\\nLet\'s take a closer look.\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nBuilding the migration guide is one of the key focuses for us this year. We made good progress in completing the migration guide. Please check out our [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html). LoopBack 3 is currently in maintenance LTS. Read [this blog](https://strongloop.com/strongblog/lb3-entered-maintenance-mode/) to find out what it means and how it affects you.\\n\\nIn LB3, it was possible to use mixins to enhance a model with a new property, a custom method, or a custom remote method. In LB4, this can be accomplished by using a mixin class factory function against model, repository, or controller classes.\\nWe added a [Migrating model mixins](https://loopback.io/doc/en/lb4/migration-models-mixins.html) page to demonstrate how to accomplish this.\\n\\nIn LB3, Operation hooks are useful tools that are triggered by all methods that execute a particular high-level CRUD operation. However, LB4 hasn\'t supported this feature yet. To help LB3 users to continue using the feature, we provide a workaround and explain how they can migrate LB3 operation hooks to LB4 repositories in page [Migrating operation hooks](https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html).\\n\\nLB3 has the built-in User/AccessToken model based authentication. In LB4, we provide a more flexible authentication system. We explain how LB3 users can migrate it to LB4 with handy LB4 CLI tools. The content can be found in page [Migrating built-in authentication](https://loopback.io/doc/en/lb4/migration-authentication.html).\\n\\nIn addition, we added the [LB3 features not in-plan documentation page](https://loopback.io/doc/en/lb4/migration-not-planned.html) to clarify which LB3 features are not supported in LB4 or the workarounds for those features if users would like to continue using them in LB4. \\n\\n## Migration Tooling and Examples\\n\\nBesides documentation, we migrated the [LoopBack 3 access control example to LoopBack 4](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration). In the [lb3-application example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application), we added instructions on how to move the middleware from the LoopBack 3 application to a common location where both the LB3 and LB4 applications can use it.\\n\\nFor tooling that helps your migration process easier, the `lb4 import-lb3-models` command now supports migrating models inheriting from all other models, including LoopBack 3 built-in models.\\n\\n## From Model Definitions to REST APIs\\n\\nOne of the frequent inputs we got from users is that they would like to see fewer steps from creating the models to having runnable endpoints. We now have the [`rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package, the app booter, and the CLI command. You can see how to create a simple LoopBack 4 app with the [`lb4 rest-crud` CLI command](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\nTo glue these pieces together and helper users to understand the feature, we added a page [Creating CRUD REST APIs](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html). You can also run this [CRUD REST example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud).\\n\\n## Integrate with IBM API Connect\\n\\nEarlier, we identified the work items required for the integration with [IBM API Connect](https://www.ibm.com/cloud/api-connect). When importing an OpenAPI spec generated by a LoopBack 4 application, there is additional metadata needs to be added. Instead of having our users to modify the OpenAPI spec manually, we introduced an [API Connect OpenAPI enhancer](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) to inject the `x-ibm-configuration` and other required attributes in the OpenAPI spec. \\n\\nAdditionally, we extracted and translated the messages for our CLI tooling.\\n\\n## Newly Added Examples\\n\\nWe continue to add examples which demonstrate commonly used scenarios. With the growing number of examples, we also categorized the [Example list](https://loopback.io/doc/en/lb4/Examples.html). Here are the newly added examples:\\n\\n- [access control migration example](https://github.com/strongloop/loopback-next/blob/master/examples/access-control-migration) to show how to migrate a LoopBack 3 application with access control to LoopBack 4.\\n\\n- [file transfer example](https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer) for exposing APIs to upload and download files using Express Multer.\\n\\n- [validation example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) for adding different kinds of validations in a LoopBack 4 application.\\n\\n- [rest-crud example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) for using `CrudRestComponent` to define repository and controller classes for a model without creating those classes\\n\\nIf there\'s any example you\'d like to see, feel free to open an issue in the [loopback-next repo](https://github.com/strongloop/loopback-next). Better yet, submit a PR and contribute! \\n\\n## Newly Added Extensions\\n\\nLoopBack 4 is designed to be extensible. We added three extensions in this quarter for various usages: \\n\\n- [@loopback/extension-logging](https://github.com/strongloop/loopback-next/blob/master/extensions/logging) provides logging facilities based on Winston and Fluentd.\\n\\n- [@loopback/apiconnect](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is the IBM API Connect OpenAPI enhancer  extension extends LoopBack with the ability to integrate with [IBM API Connect](https://www.ibm.com/cloud/api-connect). \\n\\n- [@loopback/cron](https://github.com/strongloop/loopback-next/tree/master/extensions/cron) provides integration with [Cron](https://github.com/kelektiv/node-cron) so that applications can schedule jobs using `cron` based schedule.\\n\\n## IBM Db2 for i Connector\\n\\nThe [IBM Db2 for i connector](https://github.com/strongloop/loopback-connector-ibmi) was added to the connector list. You can now conveniently create a IBM Db2 for i datasource using our CLI. If you are starting a new project that connects to IBM Db2 for i, we recommend you to use this connector instead of `loopback-connector-db2iseries` connector.  You can find more details in the [Db2 for i connector page](https://loopback.io/doc/en/lb4/DB2-for-i-connector.html).\\n\\n## Enhancements in LoopBack core and OpenAPI areas\\n\\nIn this quarter, thanks to our community contributors, we had a number of important enhancements in the OpenAPI area. An `OASEnhancerService` was introduced which allows other enhancers to register and contribute OpenAPI specs into the application. This also provides the base for the [API Connect OpenAPI enhancer](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) mentioned above. On top of that, a few OpenAPI convenience decorators were added, for example, the `@deprecated()` decorator and the `@tags(tagNames: string [])` decorator for a class and method.\\n\\nFor the core of the framework, we have added the support hot-loading of controllers during application startup. Besides, the context and binding inspection APIs were improved with more options and information to print out their injections. More details can be found in the [February milestone blog](https://strongloop.com/strongblog/february-2020-milestone/).\\n\\n## Rework of Shopping Example\\n\\nThe most noticeable changes for [our shopping example](https://github.com/strongloop/loopback4-example-shopping) is the newly added frontend. There was some rework on the authentication and authorization side to make the app working from end to end.\\n\\n![Shopping example web site](https://raw.githubusercontent.com/strongloop/loopback4-example-shopping/master/shoppy.png)\\n\\n## Refreshed Look for LoopBack Web Site\\n\\nLast but not least, if you haven\'t noticed already, [our documentation site](https://loopback.io/doc/en/lb4/) has a refreshed look. Don\'t forget to check it out!\\n\\n![LoopBack documentation site](./images/new-docs-site.png)\\n\\nWith increasing number of user testimonials, we created a [separate page](https://loopback.io/what-our-users-say.html) for it. [Let us know](https://github.com/strongloop/loopback-next/issues/3047) if you would like to tell us about your LoopBack usage!\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q1 for more details:\\n- [Janurary 2020](https://strongloop.com/strongblog/january-2020-milestone/)\\n- [February 2020](https://strongloop.com/strongblog/february-2020-milestone/)\\n- [March 2020](https://strongloop.com/strongblog/march-2020-milestone/)\\n\\n## What\'s Next?\\n\\nWe have published a blog [LoopBack - 2020 Goals and Focus](https://strongloop.com/strongblog/2020-goals/) about our plans this year. Here is a summary of the [Q2 2020 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q2-2020-roadmap): \\n- finish migration guide for both general runtime and authentication & authorization\\n- continue with API Connect and LoopBack integration\\n- look into feature parity gaps that are highly requested by users\\n\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"march-2020-milestone","metadata":{"permalink":"/blog/march-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-08-march-milestone.md","source":"@site/blog/2020/2020-04-08-march-milestone.md","title":"LoopBack 4 March 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-04-08T00:00:00.000Z","formattedDate":"April 8, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":7.32,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 March 2020 Milestone Update","date":"2020-04-08T00:00:00.000Z","authors":"agnes512","slug":"march-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2020 Q1 Overview","permalink":"/blog/loopback-4-2020-q1-overview"},"nextItem":{"title":"LoopBack 4 February 2020 Milestone Update","permalink":"/blog/february-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe whole world has been through a lot in the past month. The LoopBack team hopes that everyone stays safe and gets through this together.\\n\\nLet\'s check out the work we did in March:\\n- [Migration Guide](#migration-guide)\\n- [From Model to REST API](#from-model-to-rest-api)\\n- [More Usage Scenarios](#more-usage-scenarios)\\n- [Miscellaneous](#miscellaneous)\\n- [Documentation Enhancement](#documentation-enhancement)\\n- [Community Contribution](#community-contribution)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nAs LoopBack 3 will go end of life at the end of 2020, we\'ve been focusing on the migration guide for the past months. Here is the content we added in March to help LB3 users adopt LoopBack 4:\\n\\n### Migrating Built-in Authentication\\n\\nIn LoopBack 3, the authentication system is a token-based one and has built-in models involved in the mechanism. In LB4, we built a more flexible authentication system that is compatible with different authentication strategies. Even though there are lots of differences, the newly created [access control migration example](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration) explores how to migrate and build an equivalent LoopBack 3 authentication system in LoopBack 4 with detailed steps. The tutorial includes two main parts: \\n\\n1. How to migrate the LoopBack 3 User model\'s definition and its persistence and login endpoint.\\n2. How to secure endpoints using a token based authentication system and enable the authorize dialog in the API explorer like what we have in LoopBack 3.\\n\\nThe tutorial also uses the handy LB4 CLI to help LB3 users to get familiar with LB4 terms. Read the [migration-authentication](https://loopback.io/doc/en/lb4/migration-authentication.html) tutorial to learn about the details.\\n\\n### Features Not Planned for LoopBack 4\\n\\nBesides migrating artifacts from LB3, there are several features/components we no longer support anymore in LB4. They are listed in the page [LoopBack 3 features not planned in LoopBack 4](https://loopback.io/doc/en/lb4/migration-not-planned.html). We also provide workarounds for these features if users would like to continue using them in LB4. \\n\\n## From Model to REST API\\n\\nThe story [From Model to REST API with no custom repository/controller epic](https://github.com/strongloop/loopback-next/issues/2036) is almost done! In the past few months, we created the [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package, as well as the the `ModelApiBooter` booter. And this month, we built the CLI command `lb4 rest-crud`. To glue these pieces together, we added an example and documentation to help you pick up this convenience tool. Details are listed below. We will have a blog post in the near future.\\n\\n### CLI Command\\n\\nIn order to make it easier for users to use this feature, we\'ve added a CLI command to simplify the process. If you have model classes and a valid(_persisted_) datasource, the following command will generate model endpoints for you:\\n\\n```sh\\nlb4 rest-crud\\n```\\n\\n### Example Application\\n\\nWe\'ve added a new [`rest-crud` example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) which creates the [`Todo` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo) without the need to define a repository or controller for the Todo model. By loading the `CrudRestComponent`, it demonstrates how to use the default CRUD REST repository and controller with a single model class , datasource, and configuration. The example can be downloaded by running:\\n\\n```sh\\nlb4 example rest-crud\\n```\\n\\nYou can find more information on how to use the command in the [REST CRUD generator documentation](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\n### Documentation\\n\\nNow that most of the epic is completed, we\'ve added [documentation](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html) explaining how to use the feature and the configuration options that come with it. Additionally, we also added [documentation](https://loopback.io/doc/en/lb4/Extending-Model-API-builder.html) on extending the [`@loopback/model-api-builder`](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) package to create your own custom model API builders; similar to [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud)\'s [`CrudRestApiBuilder`](https://loopback.io/doc/en/lb4/apidocs.rest-crud.crudrestapibuilder.html).\\n\\n## More Usage Scenarios\\n\\nWe\'ve been adding more examples to show what you can build with, and how you can configure a LoopBack 4 app. One of our favorite examples is the [Shopping App](https://github.com/strongloop/loopback4-example-shopping/). It shows how you can integrate LB4 APIs with a simple front-end design to build a site. Besides the [`rest-crud`](#example-application) example mentioned above, we added more examples to show various LoopBack 4 features.\\n\\n### Validation Example\\n\\nLB4 allows you to add validations at three different layers: REST, controller, and ORM. The newly added documentation [Validation](#Validation.md) explains these three different types of validations. We added a corresponding example [Validation Example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) to our [Examples list](https://loopback.io/doc/en/lb4/Examples.html) demonstrating how to add and make use of different kinds of validations in a LoopBack 4 application.\\n\\n### File Upload and Download Example\\n\\nUploading/downloading files is a common requirement for API applications. The documentation for [Upload and download files](https://loopback.io/doc/en/lb4/File-upload-download.html) shows the code snippets to create artifacts such as controllers and UI to achieve such a requirement. A fully-functional example is available at [File Transfer Example](https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer).\\n\\n## Documentation Enhancement\\n\\nWe made some changes in the layout design of the website. Hope you like the new look!\\n\\n### Request Response Cycle\\n\\nTo help users have a better understanding of all the components involved in the request-response handling process, in the  [Request-Response cycle](https://loopback.io/doc/en/lb4/Request-response-cycle.html) document, we walk through the path taken by a request to see how it makes its way through the various parts of the framework to return a result. In the near future, we will also add documentation in the migration guide to explain the differences of the request-response cycle between LB3 and LB4. See the GH story [Migration Guide: Request-response cycle](https://github.com/strongloop/loopback-next/issues/4836) for more details.\\n\\n### CHANGELOG Docs\\n\\nWe made the CHANGELOG easier to find on our site. It is available in the section [CHANGELOG](https://loopback.io/doc/en/lb4/changelog.index.html). We hope it helps developers to check out the changes of different packages for each release.\\n\\n## Miscellaneous\\n\\n### User Testimonials\\n\\nWe\'re glad to see a growing number of user testimonials. We refactored it in a new page. Check out the [what our users say](https://loopback.io/what-our-users-say.html) section. [Let us know](https://github.com/strongloop/loopback-next/issues/3047) if you would like to tell us about your LoopBack usage!\\n\\n### IBM i Connector\\n\\nThe [IBM Db2 for i connector](https://github.com/strongloop/loopback-connector-ibmi) was added to the connector list. You can now conveniently create an IBM Db2 for i datasource using our CLI. See the [Db2 for i connector page](https://loopback.io/doc/en/lb4/DB2-for-i-connector.html) for more details.\\n\\n\\n### Newly Added Extensions\\n\\nHere are the extensions we added to the framework:\\n\\nThe IBM API Connect OpenAPI enhancer [@loopback/apiconnect](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) extension was added to extend LoopBack with the ability to integrate with [IBM API Connect](https://www.ibm.com/cloud/api-connect).\\n\\nAn experimental extension [`@loopback/cron`](https://github.com/strongloop/loopback-next/tree/master/extensions/cron) was added. With it, LB4 apps can be integrated with [Cron](https://github.com/kelektiv/node-cron) to schedule jobs using `cron` based schedules.\\n\\n### Extracting JWT Component\\n\\nAfter creating the demo for JWT authentication in [loopback4-example-shopping](https://github.com/strongloop/loopback4-example-shopping) and applying a similar system in [loopback-example-access-control](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration), we think it\'s time to extract the JWT authentication system into a separate component. This will benefit users who want to quickly mount a prototype token based authentication module to their application. As the first step, we extracted the JWT strategies, the token, and user services into a local module under [components/jwt-authentication](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration/src/components/jwt-authentication). Next we will move it to a standalone extension package. Feel free to join the discussion in GH story [Extract the jwt authentication to an extension module](https://github.com/strongloop/loopback-next/issues/4903).\\n\\n### Supporting Type Any\\n\\nModel property of type `any` is now supported. The corresponding OpenAPI and JSON schema is `{}` or `true` (according to [the draft JSON schema standard](https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.3.2)). If your model property allows arbitrary values, now you can define it as:\\n\\n```ts\\nclass MyModel extends Entity {\\n  // ...other code\\n  @property({\\n    // specify the type name here as \'any\'\\n    type: \'any\'\\n  })\\n  // use `any` as its TypeScript type\\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n  anyProperty: any\\n}\\n```\\n\\n### Bug fixes\\n\\n- We fixed a bug in module `@loopback-ibmdb` where a put request `PUT /Model/{instanceId}` now operates correctly. The fix trickles down into any LoopBack connector with a dependency on `@loopback-ibmdb` like `@loopback-connector-db2` and `@loopback-connector-dashdb`, for example.\\n\\n- We fixed a bug in connector `@loopback-connector-mssql` which was causing permission problems during installation on Windows. Some extra folders ended up in the package tgz file, and this was causing the problem. The fix went out for several LoopBack connectors: MSSQL, DB2, dashDB, Cloudant, MongoDb, MySQL, Oracle, PostgreSQL, and Redis KeyValue. \\n\\n## Community Contribution\\n\\nOur community maintainers and users have been very helpful with building a better LoopBack 4, we really appreciate all the help! Here are the highlights this month:\\n\\n### Enable Authentication Strategies to Contribute OASEnhancer\\nThe community maintainer [`dougal83`](https://github.com/dougal83) improved the authentication strategies `AuthenticationStrategy` so that it can be bound with the OAS enhancer extension point via a binding key instead of a constant.\\n\\n### Japanese Translation for LB4\\n\\nThe community user [`saotak`](https://github.com/saotak) added several LB4 pages in Japanese. See [the site](https://loopback.io/doc/ja/lb4/index.html). We need your help to have more translations for the LB4 documentations! The instructions can be found in the page [Translation](https://loopback.io/doc/en/contrib/translation.html).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"february-2020-milestone","metadata":{"permalink":"/blog/february-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-03-04-february-milestone.md","source":"@site/blog/2020/2020-03-04-february-milestone.md","title":"LoopBack 4 February 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-03-05T00:00:00.000Z","formattedDate":"March 5, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":10.37,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 February 2020 Milestone Update","date":"2020-03-05T00:00:00.000Z","authors":"jannyhou","slug":"february-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 March 2020 Milestone Update","permalink":"/blog/march-2020-milestone"},"nextItem":{"title":"LoopBack - 2020 Goals and Focus","permalink":"/blog/2020-goals"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe February in a leap year is quite special and we hope everyone has some memorable stories from that extra day! In the past month, LoopBack team continued to focus on the migration guide epic. In the meantime, we were able to contribute significant PRs across all the functional areas. We are really glad to see the increasing engagement from community members, we appreciate all your code reviews and contributions. Last but not least, we published new major releases for [`@loopback/*`](https://github.com/strongloop/loopback-next) modules as as we dropped Node.js 8 support and introduced a few other breaking changes.\\n\\nKeep reading to learn about what happened in February!\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\n### Migrating Operation Hooks\\n\\nWhile we work on a [spike for supporting operation hooks for models/repositories](https://github.com/strongloop/loopback-next/issues/1919), we are providing a temporary API for enabling operation hooks in LoopBack 4. It requires overriding the `DefaultCrudRepository`\'s `definePersistedModel` method in the model\'s repository.\\n\\nHere is an example of adding a `before save` operation hook to the `Product` model.\\n\\n```ts\\nclass ProductRepository extends DefaultCrudRepository<\\n  Product,\\n  typeof Product.prototype.id,\\n  ProductRelations\\n> {\\n  constructor(dataSource: juggler.DataSource) {\\n    super(Product, dataSource);\\n  }\\n\\n  definePersistedModel(entityClass: typeof Product) {\\n    const modelClass = super.definePersistedModel(entityClass);\\n    modelClass.observe(\'before save\', async ctx => {\\n      console.log(`going to save ${ctx.Model.modelName}`);\\n    });\\n    return modelClass;\\n  }\\n}\\n```\\nFor more details visit [Migrating CRUD operation hooks](https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html).\\n\\n### Migrating LoopBack 3 Models with a Custom Base Class\\n\\nThe initial implementation of `lb4 import-lb3-models` was able to import only models inheriting from models that have a built-in counter-part in LoopBack 4: `Model`, `PersistedModel`, `KeyValueModel`. Now it also supports migrating models inheriting from all other models, including LoopBack 3 built-in models like `User`, or an application-specific model. The chain of base (parent) models will also be created in the LoopBack 4 application. For example, model `Customer` extends model `UserBase` which extends model `User`, and if you run `lb4 import-lb3-models`, you will see the following prompts:\\n\\n```sh\\n$ lb4 import-lb3-models ~/src/loopback/next/packages/cli/test/fixtures/import-lb3-models/app-using-model-inheritance.js\\n\\nWARNING: This command is experimental and not feature-complete yet.\\nLearn more at https://loopback.io/doc/en/lb4/Importing-LB3-models.html\\n\\n? Select models to import: Customer\\nModel Customer will be created in src/models/customer.model.ts\\n\\nAdding UserBase (base of Customer) to the list of imported models.\\nModel UserBase will be created in src/models/user-base.model.ts\\n\\nAdding User (base of UserBase) to the list of imported models.\\nModel User will be created in src/models/user.model.ts\\n\\nImport of model relations is not supported yet. Skipping the following relations: accessTokens\\nIgnoring the following unsupported settings: acls\\n   create src/models/customer.model.ts\\n   create src/models/user-base.model.ts\\n   create src/models/user.model.ts\\n   update src/models/index.ts\\n   update src/models/index.ts\\n   update src/models/index.ts\\n\\n```\\n\\n### Migrating Access Control Example\\n\\nAs the first story to explorer the authorization migration path, we started with migrating a [LoopBack 3 example application](https://github.com/strongloop/loopback-example-access-control) which implemented a RBAC (role based access control) system for demoing the LoopBack 3 authentication and authorization mechanism.\\n\\nThe migrated LoopBack 4 example is created in [examples/access-control-migration](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration). It uses [casbin](https://github.com/casbin/casbin) as the third party library to implement the role mapping. The original models and endpoints are migrated to the LoopBack 4 models, repositories, and controllers. The JWT authentication system is applied again and the core logic of original role resolvers and model ACLs map to the LoopBack 4 authorization system\'s authorizers and metadata.\\n\\nWe created a very [detailed tutorial](https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html) for the migration steps that you can follow to see how to secure the same endpoints in LoopBack 4.\\n\\n### Migrating Model Mixins\\n\\nWe\'ve added a section [Migrating model mixins](https://loopback.io/doc/en/lb4/migration-models-mixins.html) to the migration guide to detail how LoopBack 3 property and custom method/remote method mixins can be migrated to LoopBack 4 model/repository/controller mixin class factory functions.\\n\\n### Migration of all model properties\\n\\nWe have confirmed that migration also passes down the connector metadata in the model properties with [additional tests](https://github.com/strongloop/loopback-next/issues/3810).\\n\\n## Experimental Feature on Integration with Winston and Fluentd Logging\\n\\n[`@loopback/extension-logging`](https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md) contains a component that provides logging facilities based on [Winston](https://github.com/winstonjs/winston) and [Fluentd](https://github.com/fluent/fluent-logger-node). Here is an example of injecting and invoking a Winston logger:\\n\\n```ts\\nimport {inject} from \'@loopback/context\';\\nimport {Logger, logInvocation} from \'@loopback/extension-logging\';\\nimport {get, param} from \'@loopback/rest\';\\n\\nclass MyController {\\n  // Inject a winston logger\\n  @inject(LoggingBindings.WINSTON_LOGGER)\\n  private logger: Logger;\\n\\n  // http access is logged by a global interceptor\\n  @get(\'/greet/{name}\')\\n  // log the `greet` method invocations\\n  @logInvocation()\\n  greet(@param.path.string(\'name\') name: string) {\\n    return `Hello, ${name}`;\\n  }\\n\\n  @get(\'/hello/{name}\')\\n  hello(@param.path.string(\'name\') name: string) {\\n    // Use the winston logger explicitly\\n    this.logger.log(\'info\', `greeting ${name}`);\\n    return `Hello, ${name}`;\\n  }\\n}\\n```\\nIts architecture diagram and basic usage are well documented in the package\'s [README.md](https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md) file.\\n\\n## Context and Binding\\n\\n### Adding Inspection Flags\\n\\nContext and binding inspection APIs were improved with more options and information to print out their injections. \\n\\nAt binding level, there is one flag:\\n  - `includeInjections`: control if injections should be inspected.\\n\\nAn example usage is:\\n\\n```ts\\nconst myBinding = new Binding(key, true)\\n  .tag(\'model\', {name: \'my-model\'})\\n  .toClass(MyController);\\n// It converts a binding with value constructor to plain JSON object\\nconst json = myBinding.inspect({includeInjections: true});\\n```\\n\\nAt context level, there are two flags:\\n  - `includeInjections`: control if binding injections should be inspected.\\n  - `includeParent`: control if parent context should be inspected.\\n\\nAnd their corresponding example usages:\\n\\n```ts\\nchildCtx.inspect({includeInjections: true});\\nchildCtx.inspect({includeParent: false})\\n```\\n\\nMore test cases can be found in PR https://github.com/strongloop/loopback-next/pull/4558\\n\\n### Inspect Example\\n\\n[@raymondfeng](https://strongloop.com/authors/Raymond_Feng/) has created [loopback4-example-inspect](https://github.com/raymondfeng/loopback4-example-inspect) to demonstrate the inspection of a LoopBack 4 application\'s context hierarchy. It provides visualization on the different contexts (request, server, application), their bindings, and dependency injections in class constructors. Information is exposed via 3 endpoints:\\n\\n- inspect: Fetches a JSON document for the context hierarchy.\\n- graph: Renders the LoopBack application as a SVG diagram.\\n- graph-d3: Displays the graph using [d3-graphviz](https://github.com/magjac/d3-graphviz).\\n\\nThis example is turning into an extension `@loopback/context-explorer` in PR [#4666](https://github.com/strongloop/loopback-next/pull/4666). The core code is packed as a component.\\n\\n### Dynamic Binding and Rebinding of Controllers\\n\\nThe hot-reloading of controllers after starting application is supported now. You can dynamically add/remove controllers after the application runs, and their endpoints will be mounted/removed accordingly. The OpenAPI specification that describes the exposed endpoints will also be updated. For example:\\n\\n```ts\\nconst app = new Application();\\nawait app.start();\\napp.controller(MyController);\\n// MyController are available via REST API now\\n// You can also see the updated OpenAPI Specification from endpoint /openapi.json\\n```\\n\\n## Allowing Different Naming Convention in `lb4 discover` CLI\\n\\nThe CLI now allows selection of two naming convention for `lb4 discover` command: camel case or all lower case. You can find the explanation of each prompt in the [Discovering models from relational databases](https://loopback.io/doc/en/lb4/Discovering-models.html) page. `discoverAndBuildModels` allows you to have different conventions to meet your requirements. Details can be found in page [Discover and define models at runtime](https://loopback.io/doc/en/lb3/Discovering-models-from-relational-databases.html#discover-and-define-models-at-runtime).\\n\\n## CRUD REST API Builder\\n\\nWe added a new API builder that helps build a CRUD repository and controller class in [PR #4589](https://github.com/strongloop/loopback-next/pull/4589). `CrudRestApiBuilder` can be used with an `Entity` class to create a default repository and controller classes for the model class.\\nFor example, if you have a `Product` model and a database `db`. In your `src/application.ts` file:\\n\\n```ts\\n// add the following import\\nimport {CrudRestComponent} from \'@loopback/rest-crud\';\\nexport class TryApplication extends BootMixin(\\n  ServiceMixin(RepositoryMixin(RestApplication)),\\n) {\\n  constructor(options: ApplicationConfig = {}) {\\n    // other code\\n    // add the following line\\n    this.component(CrudRestComponent);\\n  }\\n}\\n```\\n\\nCreate a new file for the configuration, e.g. `src/model-endpoints/product.rest-config.ts` that defines the `model`, `pattern`, `dataSource`, and `basePath` properties:\\n\\n```ts\\nimport {ModelCrudRestApiConfig} from \'@loopback/rest-crud\';\\nimport {Product} from \'../models\';\\nmodule.exports = <ModelCrudRestApiConfig>{\\n  model: Product,\\n  pattern: \'CrudRest\', // make sure to use this pattern\\n  dataSource: \'db\',\\n  basePath: \'/products\',\\n};\\n```\\n\\nNow your Product model will have a default repository and default controller class defined without the need for a repository or controller class file.\\nFor more information on the API builder, see [`@loopback/rest-crud`\'s README](https://github.com/strongloop/loopback-next/blob/master/packages/rest-crud/README.md).\\n\\n## REST Decorators\\n\\nWe simplified the `filter` and `where` usage for constraint, schema, and OpenAPI mapping with two shortcut decorators: `@param.filter` and `@param.where`. The example below shows how they replaced the tedious signatures:\\n\\n```ts\\nclass TodoController {\\n  async find(\\n    @param.filter(Todo)\\n    // replaces `@param.query.object(\'filter\', getFilterSchemaFor(Todo))`\\n    filter?: Filter<Todo>,\\n  ): Promise<Todo[]> {\\n    return this.todoRepository.find(filter);\\n  }\\n  async findById(\\n    @param.path.number(\'id\') id: number,\\n    // replaces `@param.query.object(\'filter\', getFilterSchemaFor(Todo))`\\n    @param.filter(Todo, {exclude: \'where\'}) filter?: FilterExcludingWhere<Todo>,\\n  ): Promise<Todo> {\\n    return this.todoRepository.findById(id, filter);\\n  }\\n  async count(@param.where(Todo) where?: Where<Todo>): Promise<Count> {\\n    // replaces @param.query.object(\'where\', getWhereSchemaFor(Todo)) where?: Where<Todo>,\\n    return this.todoRepository.count(where);\\n  }\\n}\\n```\\n\\n## API Explorer\\n\\nWe have now changed the OpenAPI specification generated by the decorator `@param.query.json` to support url-encoding. Please take a look at (https://github.com/strongloop/loopback-next/issues/2208). This means users can now test their APIs from API explorer with complex json query parameters (eg: `filter={include: {relation: \\"todoList\\"}}`). Previously users were able to test from API explorer with only simple key-values in exploded format (eg: `?filter[limit]=1` ), because the generated OpenAPI for json query parameters was always of `exploded deep-object` style. This could be a breaking change for some API clients. Please take a look at the breaking change log in commits from PR https://github.com/strongloop/loopback-next/pull/4347\\n\\n## Tooling and Build\\n\\n- `npm test` is passing on Windows: The problem was caused by `process.stdin.isTTY` behaves differently on the Windows platform, and was discovered by community member [@derdeka](https://github.com/derdeka). Great thanks to him and [@dougal83](https://github.com/dougal83) who had been working with [@bajtos](https://strongloop.com/authors/Miroslav_Bajto%C5%A1/) to investigate and eventually fix the issue! A series of PRs are involved: [#4643](https://github.com/strongloop/loopback-next/pull/4643), [#4605](https://github.com/strongloop/loopback-next/pull/4605), [#4652](https://github.com/strongloop/loopback-next/pull/4652), [#4657](https://github.com/strongloop/loopback-next/pull/4657)\\n\\n- PR [#4707](https://github.com/strongloop/loopback-next/pull/4707) removed dist files from top-level tsconfig to speed up the eslint checks. The time for `npm run eslint` was reduced from about 4m10s down to 2m50s. More importantly, it enabled proper caching behavior, so that subsequent runs of `npm run eslint` are super quick, even after `npm run build` modified dist files.\\n\\n- Dropped Node.js 8 support in PR [#4619](https://github.com/strongloop/loopback-next/pull/4619). Node.js v8.x is now end of life, so that we upgraded the supported version across all the LoopBack 4 packages to be 10 and above. This breaking change also resulted in a semver-major release for the monorepo. Many small breaking changes are coming as part of it.\\n\\n- [`request`](https://www.npmjs.com/package/request) module is now officially deprecated, so we replaced it with a new HTTP client [`axios`](https://github.com/axios/axios). The entire story is tracked in [#2672](https://github.com/strongloop/loopback-next/issues/2672). We have updated the [http-caching-proxy](https://github.com/strongloop/loopback-next/pull/4637) and [benchmark](https://github.com/strongloop/loopback-next/pull/4628) packages to use axios.\\n\\n## Miscellaneous\\n\\n- We upgraded the dependency of TypeScript from 3.7 to 3.8 in PR [#4769](https://github.com/strongloop/loopback-next/pull/4769). You can find the new features of TypeScript 3.8 in [here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\\n\\n- Querying with filter `where`, `fields` and `order` is now supported in the API Explorer, the usage is well documented in the section [parameter decorator to support json objects](https://loopback.io/doc/en/lb4/Decorators_openapi.html#parameter-decorator-to-support-json-objects)\\n\\n- We enabled running shared tests from both loopback-datasource-juggler@3 and loopback-datasource-juggler@4 in one more connector: `loopback-connector-db2`\\n\\n- We fixed a bug in postgresql connector which occurred when few of the foreign keys in a parent table have null values (https://github.com/strongloop/loopback-next/issues/4332)\\n\\n## Documentations and Blog Posts\\n\\nAfter refactoring the shopping example, we updated the [README.md](https://github.com/strongloop/loopback4-example-shopping) file to document the new changes of application usage and the authorization system.\\n\\nWe published two blog posts this month about the management and plan for our project:\\n\\n- LoopBack 3 has entered Maintenance LTS: https://strongloop.com/strongblog/lb3-entered-maintenance-mode/\\n\\n- The 2020 Goals and Focus for LoopBack: https://strongloop.com/strongblog/2020-goals/\\n\\n## Community Contribution\\n\\nWith more LoopBack users joined us as community maintainers, we\'re seeing more interactions and discussions! Also, we\'re glad to see that the increasing numbers of pull request from the community. We really appreciate all of these help! Here are the highlight of community PR of February:\\n\\n### Adding Flag `disableDefaultSort` to Improve Database Query Performance\\n\\nUser [`Erikdegroot89`](https://github.com/Erikdegroot89) pointed out that the way LB4 sets default sorting for SQL query might drag down the querying time when the database has a massive amount of data. Using the new added flag `disableDefaultSort`, users can turn the default sorting off. See details in [PR #417](https://github.com/strongloop/loopback-connector-postgresql/pull/417). This PR also inspires us to leverage the option to all connectors. The issue is tracked in [GH issue](https://github.com/strongloop/loopback-connector/issues/169). Feel free to contribute or join the discussion.\\n\\n### Deprecation Decorator\\n\\n`@oas.deprecated` was created by user [mschnee](https://github.com/mschnee) to enrich our OpenAPI decorators. It can be applied to class and a class method. It will set\\nthe `deprecated` boolean property of the Operation Object. When applied to a\\nclass, it will mark all operation methods of that class as deprecated, unless a\\nmethod overloads with `@oas.deprecated(false)`. You can check out [its documentation](https://loopback.io/doc/en/lb4/Decorators_openapi.html#oasdeprecated) to learn more details.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-goals","metadata":{"permalink":"/blog/2020-goals","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-12-goals2020.md","source":"@site/blog/2020/2020-02-12-goals2020.md","title":"LoopBack - 2020 Goals and Focus","description":"Originally published on strongloop.com","date":"2020-02-26T00:00:00.000Z","formattedDate":"February 26, 2020","tags":[{"label":"Community","permalink":"/blog/tags/community"}],"readingTime":3.43,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack - 2020 Goals and Focus","date":"2020-02-26T00:00:00.000Z","authors":["dhmlau","raymondfeng","bajtos"],"slug":"2020-goals","tags":["Community"]},"prevItem":{"title":"LoopBack 4 February 2020 Milestone Update","permalink":"/blog/february-2020-milestone"},"nextItem":{"title":"LoopBack 3 has entered Maintenance LTS","permalink":"/blog/lb3-entered-maintenance-mode"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n2019 was surely an exciting and rewarding year for LoopBack. We [received the \\"Best in API Middleware\\" award](https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/) from API World, our LB4 downloads on npmjs.com increased more than double compared to the year before. Moreover, we are thrilled to learn that many of you had deployed LoopBack 4 applications in production! In case you missed our [2019 review](https://strongloop.com/strongblog/loopback-2019-review/), make sure you check it out. As 2020 begins, we would like to share with you our high-level goals for this year. Things might change or shift throughout the year, but here is our plan.\\n\\n\x3c!--truncate--\x3e\\n\\n### Goal#1 - Enable as many LoopBack 3 users to migrate to LoopBack 4 as possible\\n\\nWith LoopBack 3 going end-of-life at the end of 2020, we are continuing to focus on the following areas: \\n\\n- [Migration Guide](https://loopback.io/doc/en/lb4/migration-overview.html)\\n\\n    We had made good progress in the general runtime migration guide. As we complete the spike for the migration guide on authentication and authorization, we aim at finishing the migration guide in both areas. Our approach is to create the skeleton of the migration guide and fill in the details as we go. If you\'d like to see certain migration topics but they are not in the guide, please let us know!\\n\\n- Migration tooling\\n\\n    To allow you to migrate your LB3 app incrementally, we have [an example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application) for you to demonstrate how to mount your existing LoopBack 3 (LB3) application on a new LoopBack 4 (LB4) project and how to move the middleware from the LB3 application to a common location so that both the LB3 and LB4 applications can use them. Besides, there is also a [CLI to import models from LoopBack 3 project](https://loopback.io/doc/en/lb4/Importing-LB3-models.html). \\n\\n    We would like to continue to add and enhance the migration tooling to make your migration experience easier and faster. \\n\\n- Feature parity\\n\\n  This year, we would like to close some of the feature parity gaps that a lot of you are asking for. We also realized that there are existing libraries to support certain functionalities in some cases, we\'d like to document our recommendation as well.\\n\\n- Integration into IBM API Connect \\n\\n  With LoopBack 3 being packaged in [IBM API Connect](https://www.ibm.com/cloud/api-connect), it is also a good time for us to have LoopBack 4 integrated into the product. A [spike](https://github.com/strongloop/loopback-next/issues/4115) has been done on the integration work and we\'ll continue to work on this.\\n\\n\\n### Goal#2 - Keep adopting latest technologies to stay relevant\\n\\nWhile enhancing our core code base, we\'d like to continue to explore the possibility of using and/or integrating the latest technologies with LoopBack 4, such as:\\n  - messaging and pub/sub event style, e.g. Kafka, MQTT\\n  - cloud native integration\\n  - native support on GraphQL\\n  - modernize the connector infrastructure and code base\\n\\nWe initiated some investigation in some of the areas last year and would like to continue to adopting the latest technologies in order for LoopBack to stay relevant. \\n\\n\\n### Goal#3: Nurture our community and encourage more contributions\\n\\nWe cannot do this alone! Community contributions are vital to us. As our user base gets larger, it is essential to grow the contributor community. It not only accelerates our development, but also helps the community gain deeper LoopBack knowledge.\\n\\nWe would like to encourage community contributions by making a list of GH issues available to the community that we want to finish in the short term by using the `help wanted` and `2020Qx` labels. If you\'re looking for something to contribute in LoopBack, please check our [issue list for 2020Q1](https://github.com/strongloop/loopback-next/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+%222020Q1%22). \\n\\nIf you\'re new to contributing to LoopBack or in open source project in general, don\'t worry, we have [detailed instructions](https://loopback.io/doc/en/lb4/code-contrib-lb4.html) to guide you through. \\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"lb3-entered-maintenance-mode","metadata":{"permalink":"/blog/lb3-entered-maintenance-mode","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-19-lb3-entered-maintenance-mode.md","source":"@site/blog/2020/2020-02-19-lb3-entered-maintenance-mode.md","title":"LoopBack 3 has entered Maintenance LTS","description":"Originally published on strongloop.com","date":"2020-02-19T00:00:00.000Z","formattedDate":"February 19, 2020","tags":[{"label":"LoopBack 3","permalink":"/blog/tags/loop-back-3"}],"readingTime":2.73,"hasTruncateMarker":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack 3 has entered Maintenance LTS","date":"2020-02-19T00:00:00.000Z","authors":"bajtos","slug":"lb3-entered-maintenance-mode","tags":["LoopBack 3"]},"prevItem":{"title":"LoopBack - 2020 Goals and Focus","permalink":"/blog/2020-goals"},"nextItem":{"title":"LoopBack 4 January 2020 Milestone Update","permalink":"/blog/january-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nAlmost a year ago, we announced [Extended Long Term Support for LoopBack 3](https://strongloop.com/strongblog/lb3-extended-lts/), extending Active LTS to the end of November 2019. As the saying goes, all good things must come to an end, and so LoopBack version 3 has entered Maintenance LTS in December 2019.\\n\x3c!--truncate--\x3e\\n\\nWhat does this change means for LoopBack 3 users? Quoting from our [Long Term Support policy](https://loopback.io/doc/en/contrib/Long-term-support.html):\\n\\n> Once a release moves into Maintenance LTS mode, only critical bugs, critical security fixes, and documentation updates will be permitted.\\n>\\n> Specifically, adding support for new major Node.js versions is not permitted.\\n\\nLet\'s quickly clarify that Node.js 12 is the latest major Node.js version supported by LoopBack 3.\\n\\nNow back to the first rule, which limits the allowed updates to critical problems only. This rule has two goals:\\n\\n- Maximize the stability of LTS versions by reducing possibilities of changes that may introduce undesired bugs or unintended breaking changes.\\n- Minimize our effort spent on maintaining old versions, so that we can invest more into the current version (LoopBack 4 and beyond).\\n\\nThere is a catch though: because LoopBack 4 is fundamentally incompatible with LoopBack 3, there are bugs that exists in LoopBack 3 only. The usual approach, where bugs are fixed in the Current version and back-ported to LTS versions, cannot be applied. As a result, we are tracking several community-contributed pull requests fixing issues specific to LoopBack 3.\\n\\nWe feel it would be counter-productive to reject those in-progress pull requests now, after several rounds of reviews and adjustments, just because LoopBack 3 transitioned from Active to Maintenance LTS. We don\'t want to throw away effort invested by developers contributing those fixes and thus we decided an exceptional situation deserves an exception to be made.\\n\\n**Until June 2020, we will keep reviewing pull requests fixing non-critical bugs in LoopBack 3 and if we evaluate the risk of breaking something else as low, then we will accept the fix.**\\n\\nAt the end of June, we will evaluate the impact of this new rule and decide if we want to extend its duration further.\\n\\n## Affected packages\\n\\nThe following packages are considered as part of LoopBack 3 and are moving to\\nMaintenance LTS:\\n\\n- [generator-loopback](https://www.npmjs.com/package/generator-loopback)\\n- [grunt-loopback-sdk-angular](https://www.npmjs.com/package/grunt-loopback-sdk-angular)\\n- [gulp-loopback-sdk-angular](https://www.npmjs.com/package/gulp-loopback-sdk-angular)\\n- [loopback](https://www.npmjs.com/package/loopback)\\n- [loopback-boot](https://www.npmjs.com/package/loopback-boot)\\n- [loopback-cli](https://www.npmjs.com/package/loopback-cli)\\n- [loopback-component-explorer](https://www.npmjs.com/package/loopback-component-explorer)\\n- [loopback-component-passport](https://www.npmjs.com/package/loopback-component-passport)\\n- [loopback-component-push](https://www.npmjs.com/package/loopback-component-push)\\n- [loopback-component-storage](https://www.npmjs.com/package/loopback-component-storage)\\n- [loopback-context](https://www.npmjs.com/package/loopback-context)\\n- [loopback-datasource-juggler](https://www.npmjs.com/package/loopback-datasource-juggler) (version 3.x)\\n- [loopback-filters](https://www.npmjs.com/package/loopback-filters)\\n- [loopback-phase](https://www.npmjs.com/package/loopback-phase)\\n- [loopback-sandbox](https://www.npmjs.com/package/loopback-sandbox)\\n- [loopback-sdk-angular](https://www.npmjs.com/package/loopback-sdk-angular)\\n- [loopback-sdk-angular-cli](https://www.npmjs.com/package/loopback-sdk-angular-cli)\\n- [loopback-soap](https://www.npmjs.com/package/loopback-soap)\\n- [loopback-swagger](https://www.npmjs.com/package/loopback-swagger)\\n- [loopback-workspace](https://www.npmjs.com/package/loopback-workspace)\\n- [strong-remoting](https://www.npmjs.com/package/strong-remoting)\\n\\nPlease note that connectors are compatible with both LoopBack version 3 and version 4, therefore they are staying actively developed.\\n\\n## Call to Action\\n\\nWe urge all LoopBack 3 users to migrate their applications to LoopBack 4 as soon as possible. We are providing [Migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) and automated tooling to help with the transition.\\n\\nIf you are building a new project, then we strongly recommend to use LoopBack 4 from the beginning.\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"january-2020-milestone","metadata":{"permalink":"/blog/january-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-05-january-milestone.md","source":"@site/blog/2020/2020-02-05-january-milestone.md","title":"LoopBack 4 January 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-02-05T00:00:00.000Z","formattedDate":"February 5, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":7.655,"hasTruncateMarker":true,"authors":[{"name":"Dominique Emond","title":"LoopBack Maintainer","url":"https://github.com/emonddr","imageURL":"https://avatars0.githubusercontent.com/u/6864736","key":"emonddr"}],"frontMatter":{"title":"LoopBack 4 January 2020 Milestone Update","date":"2020-02-05T00:00:00.000Z","authors":"emonddr","slug":"january-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 3 has entered Maintenance LTS","permalink":"/blog/lb3-entered-maintenance-mode"},"nextItem":{"title":"LoopBack 4 2019 Q4 Overview","permalink":"/blog/loopback4-2019-q4-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIt\'s a [Leap Year](https://en.wikipedia.org/wiki/Leap_year) this year, and we continue to make leaps in LoopBack 4.\\n\\nWith New Year\'s resolutions in mind, we quickly got started on several items.\\n\\nCheck out the sections below for the progress we made in each area:\\n\\n- [LoopBack 4 Shopping Example Front-end](#loopback-4-shopping-example-front-end)\\n- [Migration Guide](#migration-guide)\\n- [Improved Developer Experience](#improved-developer-experience)\\n- [Improved Performance Of Context](#improved-performance-of-context)\\n- [APIC and LoopBack Integration](#apic-and-loopback-integration)\\n- [Community Contributions](#community-contributions)\\n- [Miscellaneous](#miscellaneous)\\n\\n\x3c!--truncate--\x3e\\n\\n## LoopBack 4 Shopping Example Front-end\\n\\nThe LoopBack 4 example app now has a website - Shoppy.\\n\\n![](./images/shoppy.png)\\n\\nCheck out [https://github.com/strongloop/loopback4-example-shopping/](https://github.com/strongloop/loopback4-example-shopping/) and start the app; Shoppy is available at [http://localhost:3000/shoppy.html](http://localhost:3000/shoppy.html).\\n\\nThis website serves as an example for integrating LoopBack 4 APIs to a front-end and as a basis for you to experiment with various LoopBack 4 features.\\n\\nThe authorization portion has also been revamped to make it easier to follow.\\n\\n## Migration Guide\\n\\n### Migrating Boot Scripts\\n\\nIn LoopBack 3, predefined boot scripts are organized in the `/server/boot` directory, and are executed right before the server starts to perform some custom application initialization. The same functionality can also be achieved in LoopBack 4 application by adding observers.\\nHaving the observers created, you can access the application and artifacts like models, datasources by dependency injection or retrieving from the context. Moreover, specifying the order of observers is also supported. For the 2 pre-defined LoopBack 3 boot scripts (`/server/boot/root.js` and `/server/boot/authentication.js`), please do not create corresponding observers for them. In LoopBack 4, the router is automatically registered in the rest server and the authentication system is enabled by applying the authentication component. See [Migrating boot scripts](https://loopback.io/doc/en/lb4/migration-boot-scripts.html) for more details.\\n\\n### Migrating Remoting Hooks\\n\\nIn LoopBack 3, a remote hook enables you to execute a function before or after a remote method is called by a client. There are three kinds of hooks: global, model, and method. LoopBack 4 provides the interceptors feature to enable application developers to implement similar functionality.\\nSee [Migrating remoting hooks](https://loopback.io/doc/en/lb4/migration-models-remoting-hooks.html) for more details.\\n\\n### Migrating Custom Model Methods\\n\\n In LoopBack 3, developers could customize model methods in various ways:\\n\\n - configure which endpoints are public\\n - customize the model method, but not the endpoint\\n - add a new model method and a new endpoint\\n\\n The first could be done by modifying some settings in `server/model-config.json` or calling the `disableRemoteMethodByName( methodName )` on the model. The second was accomplished by overriding a default model method inside the model script file. The third was accomplished by adding a new model method and a new remote method definition inside the model script file.\\n\\n In LoopBack 4,\\n  - data-access APIs (model methods) are implemented by repositories that are decoupled from models.\\n  - REST APIs (remote methods) are implemented by controllers that are decoupled from models.\\n\\nMigrating the LoopBack 3 model method customizations to LoopBack 4 is very straightforward.\\nSee [Migrating custom model methods](https://loopback.io/doc/en/lb4/migration-models-methods.html) for more details.\\n\\n### Spike for Authentication & Authorization Migration Guide\\n\\nA spike was completed which outlined the remaining tasks required for authentication and authorization migration details between LB3 and LB4.\\nPlease see [PR #4440](https://github.com/strongloop/loopback-next/pull/4440) for details.\\n\\n## Improved Developer Experience\\n\\n### CLI Improvements\\n\\nThe Command Line Interface (CLI) is one of the most convenient tools of LoopBack. With a few commands and basic information, it allows you to create a LoopBack application in a short time. We made some improvements in the following CLI commands to make them more intuitive and flexible (especially the `relation` one):\\n\\n#### `lb4 relation`\\n\\nAlright, we admit that our `lb4 relation` command wasn\'t entirely user-friendly -- it generated partial code even when you forced it to stop; it didn\'t handle customized names even when it looked like it would; it didn\'t support the `HasOne` relation. We improved on some of these issues. As you can see in the newly updated [Relation Generator](https://loopback.io/doc/en/lb4/Relation-generator.html) page, it now takes customized foreign keys and relation names with more descriptive prompt messages. Need an example? We updated the [TodoList Example](https://loopback.io/doc/en/lb4/todo-list-tutorial-relations.html) with the latest CLI capabilities.\\n\\nEven though the CLI is a handy tool and has a lot of functionality, it still has limitations. For instance, users can customize foreign key names, relation names, source key names, and even the database column names in relations. The newly released CLI changes currently supports some of these, but not all of them. For the latest details on defining relations, you can always check the [Relations](https://loopback.io/doc/en/lb4/Relations.html) page.\\n\\nAs for defining a `HasOne` relation through the CLI, one of our community users [`@Lokesh1197`](https://github.com/lokesh1197) has provided this new capability via [PR #4171](https://github.com/strongloop/loopback-next/pull/4171). See [hasOne Relation](https://loopback.io/doc/en/lb4/hasOne-relation.html) and [Relation generator](https://loopback.io/doc/en/lb4/Relation-generator.html) for updated documentation.\\n\\n#### `lb4 openapi`\\n\\nLoopBack 4 uses `index.ts` files to export different kinds of artifacts. The `lb4 openapi` command wasn\'t generating/updating this file. We noticed this recently and fixed it immediately. Phew! Don\'t forgot to install the latest `@loopback/cli` to get the patch!\\n\\n### Warning for strict model usage\\n\\nIf you are/used to be an LB3 user, you\'re probably familiar with the `strict` mode. It allows you to create models that permit both well-defined and also arbitrary extra properties. LB4 has this nice feature as well. However, it is applicable to **NoSQL** databases only. If you applied this setting to SQL databases, it would get silently discarded and this made it difficult for developers to troubleshoot unexpected behavior.\\n\\nNow, users will receive a warning when they try to set a model to `{strict: false}` mode while they are using a SQL datasource in an LB4 application. We updated the [Supported Entries of Settings](https://loopback.io/doc/en/lb4/Model.html#supported-entries-of-settings) table of the `Model` page to clarify this potential issue.\\n\\n## Improved Performance Of Context\\n\\nWe addressed some context-related performance degredation bugs that recently came in. It turns out that matching all bindings by a filter function can be expensive. [PR #4377](https://github.com/strongloop/loopback-next/pull/4377) addresses these bugs and improves performance for one of the primary usages of the context - find bindings by tags.\\n\\nPerformance was improved by:\\n\\n- making a binding to be an EventEmitter (emitting events when binding scope/tags/value are changed)\\n- setting up event listeners in the context to react to binding events to maintain an index of bindings by tag\\n- optimizing Context.findByTag to leverage binding index if possible\\n- changing interceptor to find matching global interceptors by tag\\n- simple benchmark testing shows over 15% gain for hello-world\\n\\n## APIC and LoopBack Integration\\n\\nWe started to investigate the steps required, if needed, on importing OpenAPI specs generated from a LoopBack 4 application into IBM API Connect v2018. There are additional extended configurations and APIC product files that are needed in order to import the API successfully. As the next step, we will be testing all endpoints of our example shopping application with API Connect, and documenting the steps. For details on the spike, see https://github.com/strongloop/loopback-next/issues/4115.\\n\\n## Community Contributions\\n\\n- [`@Lokesh1197`](https://github.com/lokesh1197) updated our relation CLI with the ability to define a `HasOne` relation via [PR #4171](https://github.com/strongloop/loopback-next/pull/4171). See [hasOne Relation](https://loopback.io/doc/en/lb4/hasOne-relation.html) and [Relation generator](https://loopback.io/doc/en/lb4/Relation-generator.html) for updated documentation.\\n- [`@achrinza`](https://github.com/achrinza) has made several small improvements/clarifications in our documentation.\\n- [`@dougal83`](https://github.com/dougal83) added the title property to filter schemas (filter, where, scope) in preparation for openapi schema consolidation. See [PR#4355](https://github.com/strongloop/loopback-next/pull/4355) for more details.\\n\\nA big \'Thank you!\' to all our contributors! :)\\n\\n## Miscellaneous\\n\\n- We improved the Transaction interface in loopback-connector by adding an `isActive()` method. This allows you to determine if the connection object on the transaction is present or not. Suppose you have a transaction instance called `tx`, you can call `tx.isActive()` to check the activeness of its connection without throwing an error (if an error happens). See [PR #4474](https://github.com/strongloop/loopback-next/pull/4474) and [PR #4537](https://github.com/strongloop/loopback-next/pull/4537), and [Using database transactions](https://loopback.io/doc/en/lb4/Using-database-transactions.html) for details.\\n- Updated Todo and TodoList Tutorials. The Todo and TodoList tutorials and examples are a great place to start learning about LoopBack 4. As our CLI prompts and generated artifacts have changed and improved over time, we recently started noticing that our documentation and code snippets were slightly out-of-date, and there was a bug as well. We decided it was time to update these fun tutorials and examples. [PR #4412](https://github.com/strongloop/loopback-next/pull/4412) addressed these issues. Please see [Todo tutorial](https://loopback.io/doc/en/lb4/todo-tutorial.html),[TodoList tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial.html), [Todo Example](https://github.com/strongloop/loopback-next/tree/master/examples/todo), and [TodoList Example](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list) for the latest and greatest.\\n- Fixed problem where CLI commands generate artifacts with lint problems. See [PR #4431](https://github.com/strongloop/loopback-next/pull/4431) for details.\\n- Improved `@loopback/authorization`\'s README.md document to include detailed steps of implementing a basic RBAC system. See [PR #4205](https://github.com/strongloop/loopback-next/pull/4405) for details.\\n- Updated `strong-docs`\'s dependencies to use the latest TypeScript 3.7. See [PR #128](https://github.com/strongloop/strong-docs/pull/128) for details.\\n- Added alias support for header language \'zh-cn\' and \'zh-tw\' in `strong-globalize`. See [PR #151](https://github.com/strongloop/strong-globalize/pull/151) and [PR #153](https://github.com/strongloop/strong-globalize/pull/153) for details.\\n- Fixed problem with complex objects for query params in api explorer. See [PR#4347](https://github.com/strongloop/loopback-next/pull/4347) for details.\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [February Milestone](https://github.com/strongloop/loopback-next/issues/4543).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback4-2019-q4-overview","metadata":{"permalink":"/blog/loopback4-2019-q4-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-01-22-loopback-q4-overview.md","source":"@site/blog/2020/2020-01-22-loopback-q4-overview.md","title":"LoopBack 4 2019 Q4 Overview","description":"Originally published on strongloop.com","date":"2020-01-22T00:00:00.000Z","formattedDate":"January 22, 2020","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":5.51,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 2019 Q4 Overview","date":"2020-01-22T00:00:00.000Z","authors":["dhmlau","agnes512"],"slug":"loopback4-2019-q4-overview","tags":["Quarterly update"]},"prevItem":{"title":"LoopBack 4 January 2020 Milestone Update","permalink":"/blog/january-2020-milestone"},"nextItem":{"title":"LoopBack 4 December 2019 Milestone Update","permalink":"/blog/december-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nHappy New Year! The number of LoopBack 4 downloads in 2019 increased more than double than that in 2018. Thank you for your continuous support in using and contributing to LoopBack. We cannot do this alone and we really appreciate all the contributions from the community. In December, we were happy to have 3 community members join us as maintainers: [@derdeka](https://github.com/derdeka), [dougal83](https://github.com/dougal83) and [achrinza](https://github.com/achrinza)!\\n\\nAs year 2020 commences, let us summarize our development activities in the last quarter of 2019.\\n\\n- [Migration Guide](#migration-guide): created the outline for general runtime migration and added details on migrating Express middleware and model relations.\\n- [Going cloud native](#going-cloud-native): added extensions for observability and deployment documentation\\n- [Authentication and authorization](#authentication-and-authorization): enhanced the documentation and enabled token based authentication in API Explorer\\n- [Inclusion of Related Models](#inclusion-of-related-models): completed MVP and ability to allow custom scope.\\n- [Partition Key with Cloudant and CouchDB](#partition-key-with-cloudant-and-couchdb): added support for partitioned database\\n- [Creating REST API from Model Classes](#creating-rest-api-from-model-classes): added the ability to generate controller from Model and Repository classes\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nEnriching the [Migration Guide from LB3](https://github.com/strongloop/loopback-next/issues/453) story is our focus of this quarter and will continue to be the focus. Adding on top of the comparison between the concepts in LoopBack 3 and that in LoopBack 4, we created the skeleton on the areas that need more explanation in the migration. You can find it on our site: [Migration Guide](https://loopback.io/doc/en/lb4/migration-overview.html)\\n\\nIn Q4, we added pages for migrating: [Model](https://loopback.io/doc/en/lb4/migration-models-core.html), [Datasource](https://loopback.io/doc/en/lb4/migration-datasources.html), [Model Relation](https://loopback.io/doc/en/lb4/migration-models-relations.html), [Express Middleware](https://loopback.io/doc/en/lb4/migration-express-middleware.html), etc. If there are other topics you\'d like to see in the migration guide, please let us know on [GitHub](https://github.com/strongloop/loopback-next/issues/453).\\n\\n## Going Cloud Native\\n\\nIn the past few months, we made significant amount of enhancement in the cloud native area. Not only we added the extensions for logging, health check, tracing and metrics, we also created the deployment to Kubernetes tutorial in our shopping example application. For details, take a look at the [blog post](https://strongloop.com/strongblog/going-cloud-native-with-loopback-4/) from [Raymond](https://strongloop.com/authors/Raymond_Feng/).\\n\\nBesides, the Node.js LoopBack stack provides a powerful solution to build microservices in TypeScript with LoopBack. Appsody is an open source project that makes creating cloud native applications simple. It has many cool features which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments. In our detailed [Appsody with LoopBack Tutorial](https://loopback.io/doc/en/lb4/Appsody-LoopBack.html) on developing and deploying LoopBack applications, we would like to show you the possibility and potential of how these kinds of tools can work well with LoopBack of building microservices.\\n\\n## Authentication and Authorization\\n\\nWe added the support for authentication and authorization in LoopBack 4. Check out the [Authentication page](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html) and the [Authorization page](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html) for the latest features. Want to try out a real-world example? We updated the [shopping example application](https://github.com/strongloop/loopback4-example-shopping) to use the authentication and authorization systems to help you get familiar with it.\\n\\nAlso, we made some progress on the story _allow users to have token-based authentication in API Explorer_ in Q4. Starting with [a spike](https://github.com/strongloop/loopback-next/issues/2027) as the blueprint, we now added an extension point for the OpenAPI enhancers as the first brick in the wall. Check out the [\\"Extending OpenAPI Specification\\"](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) page for details. As always, we\'d love to get any help from you. Here are some follow-up stories if you\'re interested in contributing:\\n\\n- [Add OpenAPI enhancer service in @loopback/rest](https://github.com/strongloop/loopback-next/issues/4380)\\n- [Ordering the enhancers by group name for OpenAPI spec enhancer service ](https://github.com/strongloop/loopback-next/issues/4385)\\n- [Add bearer auth scheme as the default security scheme](https://github.com/strongloop/loopback-next/issues/4386)\\n\\n## Inclusion of Related Models\\n\\nWe finished the Inclusion of Related Models [MVP](https://github.com/strongloop/loopback-next/issues/1352) in Q4! This addition not only simplifies querying data and reduces database calls in LoopBack 4, but it closes one feature gap between LoopBack 3 and LoopBack 4 as well.\\n\\nIn the past few months, we released a bunch of features such as [custom scope for inclusion](https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations), and we [added inclusion resolvers to lb4 relation CLI](https://github.com/strongloop/loopback-next/issues/3451), etc. We enhanced the [documentation](https://loopback.io/doc/en/lb4/HasMany-relation.html#querying-related-models) with examples and usages along with [a blog post](https://strongloop.com/strongblog/inclusion-of-related-models/) to show how you can query data over different relations easily. Still, there are some limitations and unfinished tasks. Check [Post MVP](https://github.com/strongloop/loopback-next/issues/3585) if you\'d like to contribute.\\n\\n## Partition Key with Cloudant and CouchDB\\n\\nSpeaking of better performance and manageability of databases, the database that supports partitioning is one of the ideal choices. Are you considering to use databases that have the feature such as Cloudant and CouchDB with LoopBack? We now support such features in the corresponding connectors. It not only makes the query less computationally, but also reduces cost for LoopBack users using the Cloudant service on IBM Cloud. We have prepared a tutorial and documentation to help you get started! See the details and examples on the usage in [Partition Databases](https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md).\\n\\n## Creating REST API from Model\\n\\nAs LoopBack 4 provides more scalability and extensibility, we ask users to create artifacts such as Model, Datasource, Repository, and Controller to start building their applications. Compared to LoopBack 3, it adds complexity and extra steps to create APIs. This story aims to improve the developer experience for those who may not need that extra flexibility.\\n\\nYou might wonder how simple it would be. In the [spike](https://github.com/strongloop/loopback-next/pull/4235), if you already have the database (we use MySQL in the spike) and tables set up, you can create basic CRUD APIs just through the API Explorer. For example, all you need to do is to make a POST request with a valid MySQL connection string and a list of existing tables,\\n\\n```ts\\n{\\n  \\"connectionString\\": \\"mysql://root@localhost/test\\",\\n  \\"tableNames\\": [\\n    \\"Coffeeshop\\"\\n  ]\\n}\\n```\\n\\nthen the new endpoints will be created for you.\\n\\nImplementations are on the way! Feel free to try out the spike and join the discussion on GitHub :D\\n\\n## What\'s Next?\\n\\nIf you have been following us, you probably realize that we now start our planning of the milestones and roadmaps with a pull request. We think it is useful to our users to get to know our plans and possibly provide inputs in our planning stage. See our [2020 Goals and Focus](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#2020-goals-and-focus) and [Q1 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q1-2020-roadmap). There is also the [Janurary milestone](https://github.com/strongloop/loopback-next/issues/4376).\\n\\n## Previous Milestone Blogs\\n\\nCheck out our previously published monthly milestone blog posts in Q4 for more details:\\n\\n- [October milestone blog](https://strongloop.com/strongblog/october-2019-milestone/)\\n- [November milestone blog](https://strongloop.com/strongblog/november-2019-milestone/)\\n- [December milestone blog](https://strongloop.com/strongblog/december-2019-milestone/)\\n\\nIf you want to see a 2019 summary, don\'t forget to check out [this blog](https://strongloop.com/strongblog/loopback-2019-review/)!\\n\\n## Call for Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"december-2019-milestone","metadata":{"permalink":"/blog/december-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-01-08-december-milestone.md","source":"@site/blog/2020/2020-01-08-december-milestone.md","title":"LoopBack 4 December 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2020-01-08T00:00:00.000Z","formattedDate":"January 8, 2020","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":10.895,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 December 2019 Milestone Update","date":"2020-01-08T00:00:00.000Z","authors":"agnes512","slug":"december-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2019 Q4 Overview","permalink":"/blog/loopback4-2019-q4-overview"},"nextItem":{"title":"LoopBack 2019 Year in Review","permalink":"/blog/loopback-2019-review"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIt\'s 2\ufe0f\u20e30\ufe0f\u20e32\ufe0f\u20e30\ufe0f\u20e3!\\n\\nHappy New Year! Is the snow dancing outside of your window or is the sunshine bringing warmth and glow to the grass around you? No matter where you are, the LoopBack team is thankful for you being with us through 2019! It means a lot to us that you choose LoopBack for your applications and projects.\\n\\nWe\'re also excited to have [Denny](https://github.com/derdeka), [Douglas](https://github.com/dougal83), and [Rifa](https://github.com/achrinza) as LoopBack maintainers! They\'ve been actively helpful in our community. We appreciate all the contributions and great work. Welcome to the team!\\n\\nEven though this past December was a short month due to the holidays, the list of the accomplished tasks is not short! Check out the sections below for the progress we made in each area:\\n\\n- [From Model Definition to REST API](#from-model-definition-to-rest-api): build a LB4 app with just models!\\n- [Inclusion of Related Models](#inclusion-of-related-models): enable custom scope for inclusion.\\n- [Authentication](#authentication): new added user profile factory and StrategyAdapter.\\n- [@loopback/context Improvement](#allowing-interceptor-to-be-invoked-based-on-the-source): invoke interceptors based on their callers.\\n- [Application Life Cycle](#improving-application-life-cycle-states): application states and the shutdown hooks.\\n- [OpenAPI Enhancer Service](#openapi-enhancer-service): contribute OpenAPI spec pieces from extensions.\\n- [Improving Juggler and Connectors](#improving-juggler-and-connectors): new property settings.\\n- [New ESLint Rules](#new-eslint-rules): applied new `@typescript-eslint` rules.\\n- [Documentation Improvements](#documentation-improvements)\\n\\n\x3c!--truncate--\x3e\\n\\n## From Model Definition to REST API\\n\\nInitially, LoopBack 4 required all artifacts (Model, Repository, and Controller classes) to be defined in TypeScript source files. Recently, we started to work on a declarative approach, where the Repository and Controller classes can be created dynamically at runtime (see [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package).\\n\\n### Discovering Models and Building REST APIs at Runtime\\n\\nThis month, we pushed this concept one step further and implemented a proof of concept showing how to dynamically build CRUD REST API for any SQL database table:\\n\\n1. Discover model definition from a database, build `ModelDefinition` object from the discovered schema\\n2. Define a model class from a `ModelDefinition` object\\n3. Define a CRUD repository class for the given model\\n4. Define a CRUD REST API controller class for the given model & repository\\n\\nThe demo application can be found in the pull request [loopback-next #4235](https://github.com/strongloop/loopback-next/pull/4235).\\n\\nTo make this scenario possible, we needed to make few improvements:\\n\\n- [loopback-datasource-juggler #1807](https://github.com/strongloop/loopback-datasource-juggler/pull/1807) fixes TypeScript typings in `loopback-datasource-juggler` to make DataSource APIs like `discoverSchema` easier to consume using `await` keyword.\\n- [loopback-next #4266](https://github.com/strongloop/loopback-next/pull/4266) adds a new API `defineModelClass` that builds a Model class constructor using the given base model (e.g. `Entity`) and the given `ModelDefinition`.\\n\\nAs part of the experiment, we have again encountered the limitation of our REST layer when controllers registered after startup are not picked up. This feature is discussed in [loopback-next #433](https://github.com/strongloop/loopback-next/issues/433). Feel free to chime in and perhaps contribute a pull request if this use case is important for your projects.\\n\\n### Model API Builder Package\\n\\nWe introduced a new package `@loopback/model-api-builder` for building APIs from models. This package allows users to build repositories and controllers based on their models through their defined extensions. We also added `ModelApiBooter` that leverages Model API builders contributed via `ExtensionPoint`/`Extension` to implement the actual API building. See [README](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) file for details.\\n\\n## Inclusion of Related Models\\n\\nWe managed to finish the Inclusion of Related Models [MVP](https://github.com/strongloop/loopback-next/issues/1352) in 2019! Check out the [Post MVP](https://github.com/strongloop/loopback-next/issues/3585) if you\'d like to contribute.\\n\\n### Enabling inclusion with custom scope\\n\\nTraversing data through different relations is a common use case in real world. Take a nested relation as an example, a `Customer` might be interested in the `Shipment` status of their `Order`:\\n\\n```ts\\nCustomer: {\\n  name: \'where\\\\\'s my order at\'\\n  orders: [\\n    {\\n      name: \'order 1\',\\n      shipment: {\\n        shipment_id: 123\\n      }\\n    },\\n    {\\n      name: \'order 2\',\\n      shipment: {\\n        shipment_id: 999\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nIn [PR #4263](https://github.com/strongloop/loopback-next/pull/4263), we enabled such traversal by allowing users to customize the `scope` field for their query filter. The above example can be achieved by the following query:\\n\\n```ts\\ncustomerRepo.find({\\n  include: [\\n    {\\n      relation: \'orders\',\\n      scope: {\\n        include: [{relation: \'shipment\'}],\\n      },\\n    },\\n  ],\\n});\\n```\\n\\nMore use cases and examples are added to the page [Query Multiple Relations](https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations).\\n\\n### Handling navigational properties with CRUD operations\\n\\nIt\'s convenient to traverse related models with relations. However, when it comes to operations such as creation and updating, navigational properties might cause some unexpected problems. In [PR #4148](https://github.com/strongloop/loopback-next/pull/4148), we decided to reject CRUD operations that contain any navigational properties. For example, the request to create a `Customer` with its `Address` will be rejected:\\n\\n```ts\\ncustomerRepo.create({\\n  name: \'customer\',\\n  address: [\\n    {\\n      street: \'nav property\',\\n      city: \'should not be included\',\\n    },\\n  ],\\n});\\n```\\n\\n## Authentication\\n\\n### User Profile Factory Interface\\n\\nWe\'ve added a _convenience_ function interface named [`UserProfileFactory<U>`](https://github.com/strongloop/loopback-next/blob/0630194539ba7971ca6c6579ebb9d986e6340a41/packages/authentication/src/types.ts#L34-L36) to `@loopback/authentication`. Implement this interface with your own custom user profile factory function to convert your specific user model into a [UserProfile](https://github.com/strongloop/loopback-next/blob/9e40e43bd1c9fe71155087341b0fc590ee9d67e3/packages/security/src/types.ts#L37-L42) model (used by both `@loopback/authentication` and `@loopback/authorization`).\\n\\n### StrategyAdapter Improvements\\n\\nThe `StrategyAdapter` in `@loopback/authentication-passport` now takes in an additional argument `userProfileFactory` in its constructor. This argument is initialized with a default implementation of the `UserProfileFactory<U>` interface, mentioned above, and simply returns your specific user model as a user profile model. It is recommended that you implement your own user profile factory function to map a specific/minimal set of properties from your custom user model to the user profile model. Please see the [updated documentation](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-passport) for more details.\\n\\n## Allowing Interceptor to Be Invoked Based on the Source\\n\\nSome interceptors want to check the caller to decide if its logic should be applied. For example, an http access logger only cares about invocations from the rest layer to the first controller. In [PR #4168](https://github.com/strongloop/loopback-next/pull/4168), we added an option `source`, which can check the caller that invokes a method with interceptors. Check out the [Interceptors page](https://loopback.io/doc/en/lb4/Interceptors.html#source-for-an-invocation) for relative documentation and examples.\\n\\n## Improving Application Life Cycle States\\n\\nIt\u2019s often desirable for various types of artifacts to participate in the life cycles and perform related operations. In [PR #4145](https://github.com/strongloop/loopback-next/pull/4145), we improved the the check for application states and also add the shutdown hooks which allows graceful shutdown when the application is running inside a managed container such as Kubernetes Pods. Please check the related documentation and examples on the site [Life cycle events and observers](https://loopback.io/doc/en/lb4/Life-cycle.html#application-states) to help you understand more about the LoopBack 4 application life cycle.\\n\\n## OpenAPI Enhancer Service\\n\\nWe\'ve added a new extension point `OASEnhancerService` to allow the OpenAPI specification (short for OAS) contributions to a rest application. The feature originated from the need to add security schemes and policies to a LoopBack application\'s OAS. Now you can modify your application\'s OAS by creating and registering OAS enhancers.\\n\\nA typical OAS enhancer implements interface `OASEnhancer` which has a string type `name` field and a function `modifySpec()`. For example, to modify the `info` field of an OAS, you can create an `InfoSpecEnhancer` as follows:\\n\\n```ts\\nimport {bind} from \'@loopback/core\';\\nimport {\\n  mergeOpenAPISpec,\\n  asSpecEnhancer,\\n  OASEnhancer,\\n  OpenApiSpec,\\n} from \'@loopback/openapi-v3\';\\n\\n@bind(asSpecEnhancer)\\nexport class InfoSpecEnhancer implements OASEnhancer {\\n  // give your enhancer a proper name\\n  name = \'info\';\\n  // the function to modify your OpenAPI specification and return a new one\\n  modifySpec(spec: OpenApiSpec): OpenApiSpec {\\n    const InfoPatchSpec = {\\n      info: {title: \'LoopBack Test Application\', version: \'1.0.1\'},\\n    };\\n    const mergedSpec = mergeOpenAPISpec(spec, InfoPatchSpec);\\n    return mergedSpec;\\n  }\\n}\\n```\\n\\nThen bind it to your application by `this.add(createBindingFromClass(InfoSpecEnhancer))`.\\n\\nThe OAS enhancer service organizes all the registered enhancers, and is able to apply one or all of them. You can check [\\"Extending OpenAPI specification\\"](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) documentation to learn more about creating and registering OAS enhancers, adding OAS enhancer service and applying its enhancers.\\n\\nWe will allow users to have token-based authentication in API Explorer in the near future. Please check our future milestone blogs.\\n\\n## Improving Juggler and Connectors\\n\\n### Improving Performance - persistDefaultValues Model Property Setting\\n\\nWe have added a new model-property property `persistDefaultValues`, which prevents a property value that matches the default from being written to the database when it set to `false`.\\n\\nThis is particularly useful when you have a model with a lot of properties or sub-properties whose values may be the default value, and these models run into thousands or maybe millions. Setting `persistDefaultValues` to `false` can drastically reduce the write time and size of the database. This setting is applicable to LB4 and LB3. Check the document on our site: [Property](https://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#general-property-properties).\\n\\n### Allowing String Type Attribute to Be Auto-generated in PostgreSQL\\n\\n[Auto-migration](https://loopback.io/doc/en/lb4/Database-migrations.html) is a convenient tool to help you create relational database schemas based on definitions of your models. Typically, auto-migration would use the database\'s _default type_ as the primary key type. For example, the default type of MySQL is integer, and the default type of MongoDB is string. We\'ve added a field `useDefaultIdType` before that allows you to use other types than the default type when doing auto-migration. For example, for MySQL, the following setting allows you to have a string type primary key in tables:\\n\\n```ts\\n@property({\\n  type: \'string\',\\n  id: true,\\n  useDefaultIdType: false,\\n  // generated: true -> can not be set\\n})\\nid: string;\\n```\\n\\nHowever, sometimes users want to have auto-generate primary key with non-default type. For instance, a common use case is having `uuid` as the primary key in MySQL or PostgreSQL. We enable the auto-generated `uuid` with auto-migration for PostgreSQL. In short, the following setting enables auto-generated `uuid`:\\n\\n```ts\\n@property({\\n  id: true,\\n  type: \'string\',\\n  generated: true,\\n  useDefaultIdType: false, // this is needed if this property is id\\n  postgresql: {\\n    dataType: \'uuid\',\\n  },\\n})\\nid: String;\\n```\\n\\nBy default, when the user wants to auto-generate string type properties in PostgreSQL, we use `uuid` and the function `uuid_generate_v4()`. It is possible to use other extensions and functions. Please check on the site for more details: [PostgreSQL connector](https://loopback.io/doc/en/lb3/PostgreSQL-connector.html#discovery-and-auto-migration).\\n\\nThis feature will be added to MySQL in the near future.\\n\\n## New ESLint Rules\\n\\nWe have enabled several new `@typescript-eslint` rules to detect more kinds of potential programming errors. These new rules will trigger a semver-major release of the package `@loopback/eslint-config`. Be prepared to handle new violations after upgrading.\\n\\nList of new checks:\\n\\n- [`return-await`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/return-await.md)\\n- [`no-extra-non-null-assertion`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md)\\n- [`prefer-nullish-coalescing`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md)\\n- [`prefer-optional-chain`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-optional-chain.md)\\n\\nAs part of this effort, we migrated our code base to use [nullish coalescing](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing) and [optional chaining](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining) operators.\\n\\n## Documentation Improvements\\n\\n### Appsody / LoopBack 4 Tutorial\\n\\n[Appsody](https://appsody.dev/) is an open source project that makes creating cloud native applications simple. It provides application stacks for open source runtimes and frameworks, which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments.\\n\\nIn August, LoopBack was added as one of the application stacks in Appsody to provide a powerful solution to build open APIs and Microservices in TypeScript. The name of the stack is [nodejs-loopback](https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback).\\n\\nPlease refer to our tutorial [Developing and Deploying LoopBack Applications with Appsody](https://loopback.io/doc/en/lb4/Appsody-LoopBack.html) for detailed instructions on how to use the Appsody CLI to:\\n\\n- scaffold, run, stop, debug, and test a LoopBack 4 application locally\\n- build and deploy the application to Kubernetes on the IBM Cloud\\n\\n### Migrating Middleware from LB3 to LB4\\n\\nWe enhanced the documentation and updated the tutorial of migrating LB3 application on a new LB4 app. By mounting the LB3 middleware with a base Express application, the middleware can be shared by both LB3 and LB4 apps. For example, you can use REST APIs in your LB3 app with a new LB4 application, which will be helpful if you are a LB3 user and ready to move to LoopBack 4. Check out [Migrating Express middleware](https://loopback.io/doc/en/lb4/migration-express-middleware.html) for the steps and examples.\\n\\n### Migrating DataSources from LB3 to LB4\\n\\nTo improve the documentation for migration from LB3 to LB4, we also added steps for migrating LB3 datasources into a LB4 project. LB3 datasources are compatible with LB4, so the datasource configuration remains the same between both. See [Migrating Datasources](https://loopback.io/doc/en/lb4/migration-datasources.html) for steps on how to migrate your datasources.\\n\\n### Customizing Source Key for Relations\\n\\nTypically, the primary key is used as the source key in relations (i.e joining two tables). In LB4, we use `keyFrom` and `keyTo` to define the source key and foreign key respectively. If you would like to use a non-id property as your source key, setting `keyFrom` would allow you to do so. Check the [Relation Metadata](https://loopback.io/doc/en/lb4/HasMany-relation.html#relation-metadata) section for details.\\n\\n### Other\\n\\n- We\'ve added some links and refactored the [Using Components](https://loopback.io/doc/en/lb4/Using-components.html) page to make the site better navigation.\\n\\n- We\'ve updated the [Authorization Component](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html) page detailedly to match the latest code base.\\n\\n## User Feedback Sessions\\n\\nInterested in joining a user feedback session? We love to hear your input and how you are using LoopBack. If you\'d like to take part or have suggestions, please join our discussion in the [GitHub issue](https://github.com/strongloop/loopback-next/issues/4264).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [January Milestone](https://github.com/strongloop/loopback-next/pull/4376).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-2019-review","metadata":{"permalink":"/blog/loopback-2019-review","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-12-18-loopback-2019-review.md","source":"@site/blog/2019/2019-12-18-loopback-2019-review.md","title":"LoopBack 2019 Year in Review","description":"Originally published on strongloop.com","date":"2019-12-18T00:00:00.000Z","formattedDate":"December 18, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":7.55,"hasTruncateMarker":true,"authors":[{"name":"Dave Whiteley","title":"LoopBack Content Creator","url":"https://github.com/DaveYVR","imageURL":"https://avatars.githubusercontent.com/u/3076411","key":"dwhiteley"}],"frontMatter":{"title":"LoopBack 2019 Year in Review","date":"2019-12-18T00:00:00.000Z","authors":"dwhiteley","slug":"loopback-2019-review","tags":["community","news"]},"prevItem":{"title":"LoopBack 4 December 2019 Milestone Update","permalink":"/blog/december-2019-milestone"},"nextItem":{"title":"LoopBack 4 November 2019 Milestone Update","permalink":"/blog/november-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs 2019 draws to a close, we\'re continuing our annual tradition of celebrating the hard work that the [LoopBack](http://loopback.io/) team achieved in the past year. As you might expect, developing LoopBack 4 was the main focus, with  events, updates and \\"how to\\" content adding flavour to the mix. That focus has resulted in a lot of improvements and features for the framework, as well as quality interaction with the LoopBack community. \\n\\nGrab your seasonal beverage of choice, whether hot or cold, and read on for a trip down 2019 memory lane!  \\n\\n\x3c!--truncate--\x3e\\n\\n### GitHub Activity and Downloads \\n\\n2019 began with LoopBack just past the 12,000 star count on GitHub, and wrapped the year up at more than [13k](https://github.com/strongloop/loopback). LoopBack 4 began the year at more than 1260 and practically doubled it by year\'s end at more than [2400](https://github.com/strongloop/loopback-next). Meanwhile, [npmjs.com](https://npm-stat.com/charts.html?package=@loopback/core) shows 432,800+ downloads of LB4 since January 1 - quite a jump from the prior year\'s 141,948. We\'re excited to see all of this activity as LoopBack downloads continue to grow. \\n\\n### LoopBack, Winner of 2019 API Award for API Middleware\\n\\nCongratulations again to LoopBack for earning the 2019 API Award for the \u201c[Best in API Middleware](https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/)\u201d category. These awards were presented at the 2019 API Awards Ceremony during API World 2019, celebrating the technical innovation, adoption, and reception in the API & Microservices industries and use by a global developer community. Raymond Feng, co-creator and architect for LoopBack, presented the team to receive the award.\\n\\nWell done, LoopBack team!\\n\\n### LoopBack 4 Features and Previews\\n\\nWith the team focusing so much on enhancing and imporving LoopBack 4, there were a lot of updates. In terms of the features, here are the highlights:\\n\\n- Authentication & Authorization\\n  - Basic support for authentication and authorization. The team released a new major version of @loopback/authentication, and a new @loopback/security layer.\\n  - [Authentication docs](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html).\\n  - [Authorization docs](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html).\\n\\n- Model relations      \\n  - The team added [hasOne relation https](https://loopback.io/doc/en/lb4/hasOne-relation.html).\\n  - The team completed the MVP for the \\"[inclusion of related models](https://strongloop.com/strongblog/inclusion-of-related-models/)\\" story. \\n\\n- Architectural improvements\\n  - [Interceptors](https://loopback.io/doc/en/lb4/Interceptors.html).\\n  - [lifecycle events](https://loopback.io/doc/en/lb4/Life-cycle.html).\\n  - Enhancement in extension/extension points.\\n\\n- [Going Cloud Native](https://strongloop.com/strongblog/going-cloud-native-with-loopback-4/)\\n  - Added to Appsody/Kabanero application stack.\\n  - Deployment guide to Kubernetes clusters.\\n  - Adding observability in microservices, e.g. added health/metrics/tracing features.\\n\\n- Migration / Migration guide\\n  - [Migration guide](https://loopback.io/doc/en/lb4/migration-overview.html).\\n  - [Added tooling to import LB3 models](https://strongloop.com/strongblog/import-loopback-3-models-to-loopback-4/).\\n\\n- Strengthen the core modules as a platform for building large-scale Node.js projects\\n  - Get the details in the [tutorial series](https://loopback.io/doc/en/lb4/core-tutorial.html).\\n\\n- Enhancements in connectors\\n  - Support partitioned database in [cloudant connector](https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md).\\n  - Support decimal128 type in mongodb connector.\\n\\n- Update Example Shopping app to showcase the features we\u2019ve added\\n\\n- Experimenting with Plain javascript programming in LoopBack 4: https://strongloop.com/strongblog/loopback4-javascript-experience/\\n\\n- Improvement in documentation\\n\\n- Enabled Node.js 12 support, Added latest TypeScript 3.7 support, switch to ESLint, etc.\\n\\nWant a bit more detail on some updates? Check out \\"[Experimenting with Plain JavaScript Programming in LoopBack 4](https://strongloop.com/strongblog/loopback4-javascript-experience/)\\" by Hage Yaapa (which looks at functionality following a spike to enable LoopBack 4 development using JavaScript), \\"[What\'s New in LoopBack 4 Authentication 2.0](https://strongloop.com/strongblog/loopback-4-authentication-updates/) by Dominique Emond, and \\"[LoopBack 4 Offers Inclusion of Related Models](https://strongloop.com/strongblog/inclusion-of-related-models/)\\" by Agnes Lin. \\n\\n### The LoopBack 4 Web Site Updates\\n\\nThe [LoopBack](https://loopback.io/) web site was changed from the LoopBack 3 look feel to the LB4 theme that was launched previously.\\n\\nThe team also refreshed the \\"Who\'s using LoopBack\\" section and added more testimonial from the users. If your company wants to be highlighted as the LoopBack user on our web site, please see [strongloop/loopback-next#3047](https://github.com/strongloop/loopback-next/issues/3047) for details.\\n\\n### Increased Transparency with Milestone Updates\\n\\nWe would like to provide more visibility to you (our users) on what we have accomplished and our plans, so we started to create blog posts to keep everyone up-to-date. We always welcome feedback!\\n\\n- Milestone github issues to show our plan for the month (github ticket with [\\"Monthly Milestone\\" label](https://github.com/strongloop/loopback-next/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22Monthly+Milestone%22+).\\n    \\n- Monthly milestone and quarter summaries on what we have accomplished (you can see a summary of what we posted in 2019 further into this post).\\n\\n- To go even further, we start our planning on milestone and a quarterly [roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md) in pull requests. Look for pull requests with \\"Monthly Milestone\\" and \\"Roadmap\\" labels.\\n\\n### Events and Community Outreach\\n\\nThe LoopBack team managed to join some events throughout the year!\\n\\nDEVELOPERWEEK 2019 ran from February 20-24, and LoopBack architect [Raymond Feng](https://developerweek2019.sched.com/speaker/raymond_feng.1yyfcnn4) covered \\"Speed and Scale: Building APIs with Node.js, TypeScript and LoopBack.\\"\\n\\nThe Toronto Cloud Integration Meetup group held a [Meetup in Toronto](https://strongloop.com/strongblog/watch-meetup-quickly-build-apis-with-loopback/) in February with the topic \\"Quickly Build APIs with Existing Services and Data Using LoopBack!\u201d Janny Hou explained what LoopBack is, what you can do with it, and the rationale behind the rewrite of the framework. Biniam Admikew demonstrated how how easy it is to expose REST API from your database with just a few steps. Jamil Spain provided an additional demo while also taking care of capturing the meetup on video. Check out the details and video [here](https://strongloop.com/strongblog/watch-meetup-quickly-build-apis-with-loopback/).\\n\\n- LoopBack QuickLab - [Code@THINK](https://www.ibm.com/events/think/code/), NodeConf.eu and Node+JSInteractive.\\n\\n- [HackerJS Meetup](https://strongloop.com/strongblog/hackerjs-meetup-may-8/) in California. Raymond Feng shared his cotent from DEVELOPER WEEK 2019 with this meetup group.\\n\\n- TechConnect (internal IBM event at the Canada Lab in Markham) - May 2019\\n\\nRaymond also presented at a meetup in Santa Clara in May. \\"Building APIs at Warp Speed with LoopBack \\"\\n\\nAs mentioned earlier, Raymond Feng attended the 2019 API Awards Ceremony during API World 2019, in October to accept the 2019 API Award for the \u201cBest in API Middleware\u201d category.  \\n\\nIn November, the LoopBack team attended CASCONxEVOKE. As one of Canada\u2019s largest\u202fcombined academic, research and developer conferences, it offered over 150 speakers to over 1,500 attendees. Diana Lau provided an overview of the LoopBack booth and a workshop. Learn more [here](https://strongloop.com/strongblog/cascon-evoke-2019/).\\n\\n### LoopBack 3 LTS Support\\n\\nIn March, the LoopBack team announced LoopBack 3 was receiving an extended long term support to provide more time for users to move to the new version which is a different programming model and language. The revised LTS start is December 2019 and the revised end of life is December 2020.\\n\\nCheck out the timeline and some frequently asked questions [here](https://strongloop.com/strongblog/lb3-extended-lts/).\\n\\n### More LoopBack How-To Content\\n\\nWhile much of their focus was on improving LoopBack 4, the team also shared insight into using the framework as well. Here\'s a look back!\\n\\nDiana Lau shared a two part series about learning LoopBack 4 Interceptors. In the first part she looked at [Global Interceptors](https://strongloop.com/strongblog/loopback4-interceptors-part1/), what they are and how to use them. In Part 2 she looked at [Method Level and Class Level Interceptors](https://strongloop.com/strongblog/loopback4-interceptors-part2/),\\nbuilding an application that validates the incoming request using class level and method level interceptors. \\n\\nMiroslav Bajto\u0161 announced and demonstrated preview version of a tool automating migration of models from LoopBack 3 to LoopBack 4. Check it out [here](https://strongloop.com/strongblog/import-loopback-3-models-to-loopback-4/). In a similar vein, Nora Abdelgadir shared a way to mount your LoopBack 3 applications in a LoopBack 4 project in [\\"Migrating from LoopBack 3 to LoopBack 4\\"](https://strongloop.com/strongblog/migrate-from-loopback-3-to-loopback-4/).\\n\\nWenbo Sun provided a 7-part series called \\"Building an Online Game With LoopBack 4\\". The aim of the series is to help you learn LoopBack 4 and how to use it to easily build your own API and web project. Wenbo did so by highlighting a new project he was working on: an online web text-based adventure game. Check the series out [here](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/).\\n\\n### Anything Else?\\n\\nFor more details about work on LoopBack, the best resource is the monthly milestone updates. The LoopBack team outlined their progress with these updates, often explaining hurdles or rationale for changes and tweaks. Check them out below:\\n\\n- [January 2019 Milestone Update](https://strongloop.com/strongblog/january-2019-milestone/)\\n- [February 2019 Milestone Update](https://strongloop.com/strongblog/february-2019-milestone/)\\n- [March 2019 Milestone Update](https://strongloop.com/strongblog/march-2019-milestone/)\\n- [April 2019 Milestone Update](https://strongloop.com/strongblog/april-2019-milestone/)\\n- [May 2019 Milestone Update](https://strongloop.com/strongblog/may-2019-milestone/)\\n- [June 2019 Milestone Update](https://strongloop.com/strongblog/june-2019-milestone/)\\n- [July 2019 Milestone Update](https://strongloop.com/strongblog/july-2019-milestone/)\\n- [August 2019 Milestone Update](https://strongloop.com/strongblog/august-2019-milestone/)\\n- [September 2019 Milestone Update](https://strongloop.com/strongblog/september-2019-milestone/)\\n- [October 2019 Milestone Update](https://strongloop.com/strongblog/october-2019-milestone/)\\n- [November 2019 Milestone Update](https://strongloop.com/strongblog/november-2019-milestone/)\\n- December 2019 Milestone Update - coming soon!\\n\\nYou can also follow LoopBack\'s progress throughout the year in the [LoopBack 4 2019 Q1 Overview](https://strongloop.com/strongblog/loopback-4-2019-q1-overview/), [LoopBack 4 2019 Q2 Overview](https://strongloop.com/strongblog/loopback-4-2019-q2-overview/), and [LoopBack 4 2019 Q3 Overview](https://strongloop.com/strongblog/loopback-4-2019-q3-overview/).\\n\\n### What\'s Next? \\n\\n[Migration guide work](https://github.com/strongloop/loopback-next/issues/1849) began this year and it will continue to be the focus. The goal is to add some tooling around migration to make the migration process from LB3 to LB4 easier. If you have an existing LoopBack 3 application, take a look at the migration guide and gives us feedback!\\n\\nThe LB team will also work on feature parity that is needed for LB3 to LB4 migration, and the developer experience to make users\' lives easier. They would like to take some time in each milestone to address some of the pain points that users mentioned. The team is also looking at innovation around cloud native deployment, database integration, as well as messaging/event driven style APIs. \\n\\nFinally, look for improved documentation that address user questions, and more up-to-date docs that better reflect the quickly-changing code base.\\n\\nKeep an eye out to see the developments in the new year!"},{"id":"november-2019-milestone","metadata":{"permalink":"/blog/november-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-12-05-november-milestone.md","source":"@site/blog/2019/2019-12-05-november-milestone.md","title":"LoopBack 4 November 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-12-05T00:00:00.000Z","formattedDate":"December 5, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":8.455,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 November 2019 Milestone Update","date":"2019-12-05T00:00:00.000Z","authors":"jannyhou","slug":"november-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 2019 Year in Review","permalink":"/blog/loopback-2019-review"},"nextItem":{"title":"Going Cloud Native with LoopBack 4","permalink":"/blog/going-cloud-native-with-loopback-4"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe LoopBack team greeted November with the CASCONxEVOKE conference in Toronto. CASCONxEVOKE is one of Canada\'s largest combined academic, research and developer conferences. As its speakers and attendees, we had a booth with posters to advocate LoopBack, and also delivered a workshop about developing extensible LoopBack applications. You can check this [blog](https://strongloop.com/strongblog/cascon-evoke-2019/) for more details. \\n\\nFor Q4 achievements, we finished 3 epics this month: [Inclusion of related models](https://github.com/strongloop/loopback-next/issues/1352), [Deployment guide in a cloud native environment](https://github.com/strongloop/loopback-next/issues/1054) and [Support partitioned database in Cloudant connector](https://github.com/strongloop/loopback-connector-cloudant/issues/219), and significantly progressed in the Migration, Authentication & Authorization epics.\\n\\nKeep reading to learn about the recently added features!\\n\\n\x3c!--truncate--\x3e\\n\\n## Inclusion of Related Models\\n\\n### Running Repository Tests for Cloudant\\n\\nTo ensure our relations test suites work against real databases, we\'ve been adding different kinds of databases to our test environment. This month we added a new repository`@loopback/test-repository-cloudant` to run shared CRUD and relation tests on Cloudant. You can also set up docker instance easily with our setup script to test out your application. See [PR#3968](https://github.com/strongloop/loopback-next/pull/3968) for more details and try it out if you\'re interested.\\n\\n### Verifying Relation Type in Metadata\\n\\nBesides supporting inclusion in queries, we now also set constraints to CRUD operations with navigational properties to avoid unexpected errors. For example, if you try to create an instance of TodoList with all Todos it has through the hasMany relation such as:\\n\\n```ts\\ntodoListRepository.create(\\n  {\\n    id: 1,\\n    name: \'my list 1\',\\n    todos:[\\n      {id: 1, description: \'todo 1\', todoListId: 1},\\n      {id: 2, description: \'todo 1\', todoListId: 2}, // incorrect foreign key\\n    ]\\n  }\\n)\\n```\\n\\nSuch requests might be problematic because they might contain incorrect primary key or foreign key. Therefore, with such concerns, request contains navigational properties will be rejected. [PR#4148](https://github.com/strongloop/loopback-next/pull/4148) implements the verification for CRUD methods. \\n\\nAdditionally, in order to ensure that the correct metadata type is being using when it is resolved, we\'ve added tests in [PR#4046](https://github.com/strongloop/loopback-next/pull/4046/) and simplified our test setup.\\n\\n## Migration from LoopBack 3\\n\\nWe keep incrementally building the migration guide for LoopBack 3 users upgrading to LoopBack 4. In November, we added content for [migrating model relations](https://loopback.io/doc/en/lb4/migration-models-relations.html). We explained how to convert a relation defined in LoopBack 3 model JSON files into corresponding LoopBack 4 artifacts.\\n\\n## Authentication and Authorization\\n\\n### Adding Authorization Example and Tutorial\\n\\nIn `loopback4-example-shopping`, the `/users/{userId}/orders` endpoints are now secured by an authorization system. When a request comes in, the authentication module resolves the user profile and passes it to the authorization module. Then an interceptor retrieves the metadata from the decorated endpoint, and invokes registered authorizers to determine whether the user can perform the operation. We also have a documentation [PR](https://github.com/strongloop/loopback-next/pull/4185) in progress that explains the usage of authorization module.\\n\\n### Refactoring Customer Credentials\\n\\nIn LoopBack 3.x, we store users\' passwords together with user data in the same model (table), which opens a lot of security vulnerabilities to deal with. For example, when returning user data in HTTP response, the password property must be filtered out and when searching for users, the password must be excluded from the query.\\n\\nOur example [Shopping App](https://github.com/strongloop/loopback4-example-shopping) used to store user credentials together with other profile information too. In November, we refactored the domain model of our example app and extracted the password property into a new model `UserCredentials`. Beside the immediate benefits in increased security, this new domain model makes it easier to implement additional features in the future. For example: 2-factor authentication, and the password validation rule forbiding repeated use of the same password.\\n\\n## Context Improvement\\n\\n### Inspect \\n\\nIn [PR#4193](https://github.com/strongloop/loopback-next/pull/4193) we\'ve improved the context/binding with an `inspect()` method for metadata dumping. `ctx.inspect()` can now be used to print out the context hierarchy in JSON. This is useful for troubleshooting and rendering in UI. An example snippet of calling the new function:\\n\\n```ts\\nconst ctx = new Context();\\nconsole.log(ctx.inspect());\\n```\\n\\n### Choosing the Right Scope\\n\\nWhen creating a binding, you can configure the `scope` as `SINGLETON` or `TRANSIENT`. To know more about how to make the right choice based on requests, see the new documentation in [Choosing the right scope](https://loopback.io/doc/en/lb4/Binding.html#choose-the-right-scope).\\n\\n### @service Decorator\\n\\nA new shortcut decorator `@service` was introduced to inject an instance of a given service from a binding that matches the service interface. You can inject a service as follows:\\n\\n```ts\\nclass MyController {\\n  constructor(@service(MyService) public myService: MyService) {}\\n}\\n```\\n\\nMore details of its usage and explanation could be found in [Service Decorator](https://loopback.io/doc/en/lb4/Decorators_service.html)\\n\\n### Receive Information of Current Binding\\n\\n[PR#4121](https://github.com/strongloop/loopback-next/pull/4121) allows a class or provider to receive its own binding information as follow:\\n\\n```ts\\nexport class HelloController {\\n  // If the `bindingKey` is not specified, \\n  // the current binding from the resolution session is injected.\\n  @inject.binding() private myBinding: Binding<string>;\\n  @get(\'/hello\')\\n  async greet() {\\n    return `Hello from ${this.myBinding.key}`;\\n  }\\n}\\n```\\n\\n## Application Life Cycle\\n\\nIn [PR#4145](https://github.com/strongloop/loopback-next/pull/4145) we improved states and introduced graceful shutdown for LoopBack applications.\\n\\nNow an application\'s states are classified as *stable* or *in process*. Operations can only be called at a stable state. Calling a different operation in an in-process state will throw an error. See [Application states](https://loopback.io/doc/en/lb4/Life-cycle.html#application-states) for details.\\n\\nThe shutdown of application is now controllable by specifying an array of signals in the configuration. For example:\\n\\n```ts\\nconst app = new Application({\\n  shutdown: {\\n    signals: [\'SIGINT\'],\\n  },\\n});\\n// Schedule some work such as a timer or database connection\\nawait app.start();\\n```\\nWhen the application is running inside a terminal, it can respond to `Ctrl+C`, which sends `SIGINT` to the process. The application calls `stop` first before it exits with the captured signal. This gives you a better control when the LoopBack 4 application is running inside a managed container, such as a Kubernetes Pod. See [graceful-shutdown](https://loopback.io/doc/en/lb4/Life-cycle.html#graceful-shutdown) for more details.\\n\\n## Partitioned Database in Cloudant\\n\\nWe\'ve finished the [Partitioned Database Epic](https://github.com/strongloop/loopback-connector-cloudant/issues/219) in `loopback-connector-cloudant` by supporting partitioned index, find, and property definition.\\n\\n### Creating Partitioned Index\\n\\nTo create partitioned indexes as the secondary optimization for Cloudant query, you can add index entry in your model configuration with `{partitioned: true}` like:\\n\\n```js\\nProduct = db.define(\'Product\', {\\n  name: {type: String},\\n  }, {\\n    forceId: false,\\n    indexes: {\\n      // create a partitioned index for frequently queried\\n      // fields like `name`\\n      \'product_name_index\': {\\n        partitioned: true,\\n        keys: {\\n            name: 1\\n        },\\n      },\\n    }\\n  });\\n```\\n\\nLearn more about its signature and usage in [Adding Partitioned Index](https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md#adding-partitioned-index)\\n\\n### Partitioned Find\\n\\nWhen the partition key is discovered in the query\'s options or filter, `Model.find()` will invoke the underlying partitioned find to optimize the query. Here are two examples:\\n\\nSpecifying the partition key in the `options`: `Product.find({where: {name: \'food\'}}, {partitionKey: \'toronto\'});`\\n\\nOr defining a model property as the partition key field. So that the find method could infer the partition key from the query filter:\\n\\n```js\\n// Define `city` as the partition key field in model `Product`\\nProduct = db.define(\'Product\', {\\n  id: {type: String, id: true},\\n  name: String,\\n  // partition key field\\n  city: {type: String, isPartitionKey: true},\\n});\\n\\n// `Product.find()` will infer the partition key `toronto`\\n// from the filter\\nProduct.find({\\n  where: {\\n    city: \'toronto\',\\n    name: \'food\'\\n  }\\n});\\n```\\n\\nYou can learn more about the partitioned query in [Performing Partitioned Find](https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md#defining-partitioned-property-and-performing-partitioned-find)\\n\\n## Build Improvements\\n\\nWe upgraded the version of TypeScript to 3.7.2. An application created by the new CLI module `^@loopback/cli@1.26.0` is able to use the latest TypeScript features such as [optional chaining](https://github.com/strongloop/loopback-next/pull/4212) and [nullish coalescing](https://github.com/strongloop/loopback-next/pull/4213). A list of new features can be found in [TypeScript\'s release blog](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html).\\n\\nNow, in the new generated application, the json configuration files are renamed from `*.datasource.json` to `*.datasource.config.json` to avoid generating declarations. Explanations see [TypeScript issue#34761](https://github.com/microsoft/TypeScript/issues/34761).\\n\\n## Bug Fixes\\n\\n- `lb4 discover` should generate the correct type for property definition. Fixed by [PR#4143](https://github.com/strongloop/loopback-next/pull/4143).\\n\\n- `@param.path.<primitive_type>` generated with `lb4 relation` considers Wrapper datatypes. Also fixed by [PR#4143](https://github.com/strongloop/loopback-next/pull/4143).\\n\\n## Documentation Improvements\\n\\n- We\'ve added a series of tutorials to illustrate how LoopBack can be used as an enabler to build large-scale Node.js applications. If you want to have a deeper understanding of LoopBack and/or to build an application with great flexibility and extensibility, don\'t miss [this tutorial series](https://loopback.io/doc/en/lb4/core-tutorial.html)!\\n\\n- In `loopback-component-explorer`, we added a note in the [README file]( https://github.com/strongloop/loopback-component-explorer#a-note-on-swagger-ui-vulnerabilities) to explain why the module is not affected by the security vulnerabilities in `swagger-ui`.\\n\\n- We\'ve added \\"Boot\\" and \\"Advanced Topics\\" to the core tutorial in [Advanced Recipes](https://loopback.io/doc/en/lb4/core-tutorial-part10.html) and [Discover and load artifacts by convention](https://loopback.io/doc/en/lb4/core-tutorial-part9.html).\\n\\n- We\'ve updated the steps of [creating model relations](https://loopback.io/doc/en/lb4/todo-list-tutorial-relations.html) to use `lb4 relation` command in the TodoList tutorial.\\n\\n## Miscellaneous\\n\\n- We added the [OpenAPI](https://loopback.io/doc/en/lb3/OpenAPI-connector.html) and [gRPC](https://loopback.io/doc/en/lb3/gRPC-connector.html) connectors to be a part of our available connectors in [PR#558](https://github.com/strongloop/loopback-workspace/pull/558) and [PR#906](https://github.com/strongloop/loopback.io/pull/906). Now, when a user calls `lb4 datasource`, they will have OpenAPI and gRPC as options for the connector.\\n\\n- The `lb4 update` command runs against a LoopBack 4 project and checks dependencies against the installed `@loopback/cli`. Optionally, it updates the dependencies in `package.json`. Details can be found on page [Update generator](https://loopback.io/doc/en/lb4/Update-generator.html).\\n\\n- In [spike story#3770](https://github.com/strongloop/loopback-next/issues/3770) we came up with a plan to support querying with nested filter in the API Explorer by re-designing the `@param.query.object()` decorator. The follow-up implementation story is tracked in [#2208](https://github.com/strongloop/loopback-next/issues/2208).\\n\\n- We fixed a bug in `loopback-datasource-juggler` where `applyDefaultOnWrites` was not being applied in nested objects and arrays. You can find the details in [PR#1797](https://github.com/strongloop/loopback-datasource-juggler/pull/1797).\\n\\n## Community Contributions\\n\\nHere are some of the highlighted contributions from the community: \\n\\n- For the model definition created by running `lb4 openapi`, we fixed the JavaScript type mapping of `date` from `Date` to `string`. Details see [PR#142](https://github.com/strongloop/loopback-next/pull/4142).\\n\\n- A flag `useDefaultIdType` was introduced in `loopback-datasource-juggler` to preserve the user provided id(primary key) property against the one generated by connectors. Details see [PR#1783](https://github.com/strongloop/loopback-datasource-juggler/pull/1783).\\n\\n- We now reject the the promise properly for `create` and `replaceById` when model initialization has errors. Details see [PR#1790](https://github.com/strongloop/loopback-datasource-juggler/pull/1790).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [December Milestone](https://github.com/strongloop/loopback-next/issues/4236).\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"going-cloud-native-with-loopback-4","metadata":{"permalink":"/blog/going-cloud-native-with-loopback-4","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-12-03-going-cloud-native-with-loopback-4.md","source":"@site/blog/2019/2019-12-03-going-cloud-native-with-loopback-4.md","title":"Going Cloud Native with LoopBack 4","description":"Originally published on strongloop.com","date":"2019-12-03T00:00:00.000Z","formattedDate":"December 3, 2019","tags":[{"label":"cloud native","permalink":"/blog/tags/cloud-native"}],"readingTime":3.865,"hasTruncateMarker":true,"authors":[{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"}],"frontMatter":{"title":"Going Cloud Native with LoopBack 4","date":"2019-12-03T00:00:00.000Z","authors":"raymondfeng","slug":"going-cloud-native-with-loopback-4","tags":["cloud native"]},"prevItem":{"title":"LoopBack 4 November 2019 Milestone Update","permalink":"/blog/november-2019-milestone"},"nextItem":{"title":"Building an Online Game With LoopBack 4 - Wrap-Up (Part 7)","permalink":"/blog/building-an-online-game-with-loopback-4-pt7"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWhen we build APIs and microservices nowadays, we choose a cloud as the target for deployment. Cloud has long gone beyond being just hosting providers. Infrastructures such as Docker and Kubernetes have completely changed the paradigm of how applications work and operate. To unleash the full power of cloud, there are a few important perspectives that require efforts to make your application cloud native. At LoopBack, we kicked off the journey to provide integration and guidance aligned with [CNCF](https://www.cncf.io/) to make your API and microservice applications cloud native throughout the life cycle. This blog summarizes what we have explored and achieved so far to illustrate how you can go cloud native with LoopBack 4.\\n\\n\x3c!--truncate--\x3e\\n\\n## Key Perspectives of Going Cloud Native\\n\\nWe have looked into the following areas to understand how to make a LoopBack application cloud native and assess what it takes to improve LoopBack framework to be a good citizen of the cloud ecosystem.\\n\\n### Package and compose applications for cloud native deployment - Docker/Kubernetes/Helm\\n\\nThe [shopping example](https://github.com/strongloop/loopback4-example-shopping) started as a monolithic application in early versions. It has been refactored and improved over time to make the application modular.\\n\\nWe did some experiments to decompose `loopback4-example-shopping` into microservices, package them as Docker containers, and deploy them into a Kubernetes cluster. The whole story can be read [here](https://github.com/strongloop/loopback4-example-shopping/tree/master/kubernetes).\\n\\nKey takeaways:\\n\\n- Break down an application into multiple microservices\\n- Enable efficient communication between microserices\\n- Update the application to adapt to configuration for resources in the Kubernetes environment\\n- Build Docker images for each packages\\n- Organize deployment of docker containers as a single unit using an Helm chart\\n- Deploy to Minikube or IBM Cloud\\n\\n### Enable developers to have end-to-end cloud native development and deployment - Kabanero/Appsody - LoopBack stack\\n\\nDevelopers are often disconnected from the cloud environment during the development phase, with code only verified on a developer\'s local machine. Bad surprises may rise late in the cycle when deployment and tests happen in the cloud against that code.\\n\\n[Kabanero](https://kabanero.io/) is created to address such concerns. The following is quoted from Kabanero\'s web site:\\n\\n> Kabanero is an open source project focused on bringing together foundational open source technologies into a modern microservices-based framework. Developing apps for container platforms requires harmony between developers, architects, and operations. Today\u2019s developers need to be efficient at much more than writing code. Architects and operations get overloaded with choices, standards, and compliance. Kabanero speeds development of applications built for Kubernetes while meeting the technology standards and policies your company defines. Design, develop, deploy, and manage with speed and control!\\n\\nTo learn how Kabanero works, head [here](https://kabanero.io/docs/ref/general/architecture-overview.html).\\n\\nTo bring the LoopBack offering to the Kabanero experience, we have introduced an [Appsody Stack for LoopBack 4](https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback).\\n\\nThe Node.js LoopBack stack extends the [Node.js stack](https://github.com/appsody/stacks/tree/master/incubator/nodejs) and provides a powerful solution to build open APIs and microservices in TypeScript with [LoopBack](https://loopback.io/), an open source Node.js API framework. It is based on [LoopBack 4](https://github.com/strongloop/loopback-next).\\n\\nGo [here](https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback) for more details.\\n\\n### Provide observability - health/metrics/tracing/logging\\n\\nObservability is critical to the success of cloud native microservices. To make LoopBack a good citizen of Kubernetes based cluster, we have been rolling out extensions to integrate with health, metrics, tracing, and logging capabilities, based on projects at [CNCF](https://cncf.io).\\n\\n- Released experimental features\\n\\n  - Health readiness/liveness check endpoints [https://github.com/strongloop/loopback-next/tree/master/extensions/health](https://github.com/strongloop/loopback-next/tree/master/extensions/health)\\n  - Metrics instrumentation and [Prometheus](https://prometheus.io/) reporting: [https://github.com/strongloop/loopback-next/tree/master/extensions/metrics](https://github.com/strongloop/loopback-next/tree/master/extensions/metrics)\\n\\n- New features proposed\\n\\n  - Distributed tracing with [Jaeger](https://www.jaegertracing.io/) - [https://github.com/strongloop/loopback-next/tree/tracing/extensions/tracing](https://github.com/strongloop/loopback-next/tree/tracing/extensions/tracing)\\n  - Distributed logging with [Fluentd](https://www.fluentd.org/) - [https://github.com/strongloop/loopback-next/tree/logging/extensions/logging](https://github.com/strongloop/loopback-next/tree/logging/extensions/logging)\\n\\n### Allow graceful shutdown of Kubernetes Pods\\n\\nLoopBack 4 applications hosted by Kubernetes Pods can be requested to shutdown per provisioning needs by the cluster. The life-cycle and hand-share are described [here](https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-terminating-with-grace).\\n\\n- Proposed features\\n  - Handle http keep-alive connections and allow graceful shutdown upon application.stop()\\n    - [https://github.com/strongloop/loopback-next/pull/4146](https://github.com/strongloop/loopback-next/pull/4146)\\n  - Improve state transitions and allow shutdown hooks for applications\\n    - [https://github.com/strongloop/loopback-next/pull/4145](https://github.com/strongloop/loopback-next/pull/4145)\\n\\n### Summary\\n\\nWith the investigation and experiment, we were able to deploy `loopback4-example-shopping` as an application with cloud native microservices to a Kubernetes cluster hosted by IBM Cloud. The LoopBack stack for Kabanero/Appsody is released. There are also pull requests under reviews to close gaps and add new facilities. We\'re very excited that LoopBack 4 is going cloud native and we\'re even more interested in seeing LoopBack applications going cloud native with us. Please join us on the journey.\\n\\n## What\'s Next?\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"building-an-online-game-with-loopback-4-pt7","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt7","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-11-20-building-an-online-game-with-loopback-4-pt7.md","source":"@site/blog/2019/2019-11-20-building-an-online-game-with-loopback-4-pt7.md","title":"Building an Online Game With LoopBack 4 - Wrap-Up (Part 7)","description":"Originally published on strongloop.com","date":"2019-11-20T00:00:00.000Z","formattedDate":"November 20, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":2.225,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 - Wrap-Up (Part 7)","date":"2019-11-20T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt7","tags":["how-to"]},"prevItem":{"title":"Going Cloud Native with LoopBack 4","permalink":"/blog/going-cloud-native-with-loopback-4"},"nextItem":{"title":"CASCONxEVOKE Conference Recap for LoopBack","permalink":"/blog/cascon-evoke-2019"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 7: Wrap-Up\\n\\n### In This Episode\\n\\nThis is the final episode of this series. We\'ve used LoopBack 4 to build an online web text-based adventure game. We\'ve built the foundation with LoopBack, and I am going to summarize what we have achieved so far, and how can you apply all of this to your own project. \\n\\n### What We Have Achieved\\n\\nIn [episode 1](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/), we created a simple APIs. You can do the same to create a start point for your own project, for example, a student registration system which has a `student` model with properties like `studentId`, `name`, `major`, and `course`. Then we connected our project to MongoDB. You have the freedom to choose any database you want. LB4 supports most databases very well.\\n\x3c!--truncate--\x3e\\nIn [episode 2](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt2/), we used a third-party library to generate UUID. You can easily use any external library in you LoopBack 4 project. We also built relations between `character`, `weapon`, `aromr`, and `skill`. In a real world application, most of entities have relationships between each other. You can use LoopBack 4 to easily manage that in your project.\\n\\nIn [episode 3](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt3/), we covered how to customize APIs to achieve the function to manage users data. You can always implement your own amazing idea in your LoopBack 4 project.\\n\\nIn [episode 4](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/), we combined self-defined authorization strategies and services with `@loopback/authentication` and how to apply it to your API. You can always design your own strategies and services based on your project needs.\\n\\nIn [episode 5](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt5/), we deployed our project with Docker and Kubernetes on IBM Cloud. Once you create a Docker image, you can run it almost everywhere. You can also push your own project image to other cloud like AWS, Azure, and Google Cloud.\\n\\nIn [episode 6](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt6/), we created simple login, signup and home pages with React. We also learned how to connect front-end and back-end. React is the most popular front-end framework today. You can easily use it to create your own front-end UI.\\n\\n### Last But Not Least\\n\\nCongratulations! You have built your own web application with LoopBack!\\n\\nWhat we built in this series doesn\'t matter. It doesn\'t have to be an online game! You can use these concepts for online shopping or food delivery APIs. What *is* important is improving your design thinking, what methodology and tools we were using, and adding to the ways you think as a developer. Now, you\'ve established stronger skills to build! \\n\\nI hope you enjoyed this series. Thank you so much for all of the following and support. The series may be ending, but your journey with LoopBack is just starting.\\n\\nHappy coding!"},{"id":"cascon-evoke-2019","metadata":{"permalink":"/blog/cascon-evoke-2019","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-11-13-cascon-evoke.md","source":"@site/blog/2019/2019-11-13-cascon-evoke.md","title":"CASCONxEVOKE Conference Recap for LoopBack","description":"Originally published on strongloop.com","date":"2019-11-13T00:00:00.000Z","formattedDate":"November 13, 2019","tags":[{"label":"conference","permalink":"/blog/tags/conference"},{"label":"CASCONxEVOKE","permalink":"/blog/tags/casco-nx-evoke"}],"readingTime":2.085,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"CASCONxEVOKE Conference Recap for LoopBack","date":"2019-11-13T00:00:00.000Z","authors":"dhmlau","slug":"cascon-evoke-2019","tags":["conference","CASCONxEVOKE"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 - Wrap-Up (Part 7)","permalink":"/blog/building-an-online-game-with-loopback-4-pt7"},"nextItem":{"title":"LoopBack 4 October 2019 Milestone Update","permalink":"/blog/october-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n[CASCONxEVOKE](https://www-01.ibm.com/ibm/cas/cascon/) is one of Canada\u2019s largest\u202fcombined academic, research and developer conferences, welcoming 1,500+ attendees and 150+ speakers. This year, the LoopBack team attended and kept busy collaborating with other attendees at the LoopBack booth and delivering a workshop at the conference between November 4th and 6th in Markham Ontario\\n\\n\x3c!--truncate--\x3e\\n\\n![CASCONxEVOKE logo](./images/casconxevoke_logo.png)\\n\\n### Day 1: Booth Showcasing Fast and Easy API Creation with LoopBack \\n\\nAt our [booth](https://pheedloop.com/cascon/site/sessions/?id=DugCzZ) we had a great opportunity to show how LoopBack can make API creation fast and easy. It looks like the use case we\'ve shown in our poster is a common use case for our attendees to build APIs! \\n\\n![shopping app example](./images/shopping-app-usecase.png)\\n\\nWe also got a few questions about exposing GraphQL in LoopBack. If you\'re interested in it too, see [our tutorial](https://loopback.io/doc/en/lb4/exposing-graphql-apis.html) which uses the [OpenAPI-to-GraphQL module](https://loopback.io/openapi-to-graphql.html). \\n\\n![event photo for booth](./images/loopback-poster-casconevoke1.jpg)\\n\\n### Day 2: Workshop on Writing Scalable Node.js Applications Using LoopBack\\n\\nOn Day 2, we held a [workshop](https://pheedloop.com/cascon/site/sessions/?id=OhNsKW) about writing scalable and extensible Node.js applications using LoopBack 4. We presented the challenges we faced for LoopBack as a large scale Node.js framework and showed how we are addressing those challenges in LoopBack 4. While we introduced the concepts that make scalability and extensibility possible (such as Dependency Injection, extension/extension-point framework and Inversion of Control), the attendees also had a chance to build an extensible and scalable Node.js application step-by-step using those features. \\n\\n![event photo for booth](./images/loopback-workshop-casconxevoke.png)\\n\\nWe won\'t be able to relive the workshop, but you can check out our workshop [hands-on exercise instructions](https://github.com/strongloop/cascon2019) and [presentation slides](https://github.com/strongloop/cascon2019/blob/master/2019cascon-workshop-presentation-pdf.pdf).\\n\\n### Day 3: IBM Developer Booth\\n\\nThroughout the conference, the IBM Developer booth was showcasing different developer-focused technologies, such as Appsody and LoopBack. We were delighted to be there on Day 3 to reach out more existing and potential users!\\n\\nSome attendees asked about cloud deployment story for LoopBack. We have been focusing on a vendor agnostic approach. For instance, we recently completed a PoC and added a [tutorial](https://github.com/strongloop/loopback4-example-shopping/tree/master/kubernetes) on how to deploy a LoopBack application as microservices using Kubernetes. While we recommend to [deploy your applications to IBM Cloud](https://github.com/strongloop/loopback4-example-shopping/blob/master/kubernetes/docs/deploy-to-ibmcloud.md), you can also deploy to another vendor of your choice.\\n\\n![IBM Developer booth picture](./images/loopback-ibmdeveloperbooth.jpg)\\n\\n## What\'s Next? \\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"october-2019-milestone","metadata":{"permalink":"/blog/october-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-11-06-october-milestone.md","source":"@site/blog/2019/2019-11-06-october-milestone.md","title":"LoopBack 4 October 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-11-06T00:00:00.000Z","formattedDate":"November 6, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.405,"hasTruncateMarker":true,"authors":[{"name":"Dominique Emond","title":"LoopBack Maintainer","url":"https://github.com/emonddr","imageURL":"https://avatars0.githubusercontent.com/u/6864736","key":"emonddr"}],"frontMatter":{"title":"LoopBack 4 October 2019 Milestone Update","date":"2019-11-06T00:00:00.000Z","authors":"emonddr","slug":"october-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"CASCONxEVOKE Conference Recap for LoopBack","permalink":"/blog/cascon-evoke-2019"},"nextItem":{"title":"LoopBack 4 Offers Inclusion of Related Models","permalink":"/blog/inclusion-of-related-models"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs the cold autumn winds and frost nipped at our heels, the LoopBack team kept warm with generous portions of hot tea and coffee and accomplished their planned October milestone goals.\\n\\nWe focused on the following areas:\\n\\n- Inclusion of related models\\n- Adding Partitioned Database Support for Cloudant and CouchDB connector\\n- Spike on Migration Guide\\n- Improvements to Shopping Cart Example\\n- CASCON x Evoke 2019 Workshop Preparation\\n- Repository Tests for PostgreSQL\\n- Generating Controller/Repository from a Model\\n- Documentation Improvements\\n- Bug fixes / CI fixes\\n\\nSee the [October milestone](https://github.com/strongloop/loopback-next/issues/3801) for an overview of what we have worked on, and read on for more details.\\n\x3c!--truncate--\x3e\\nAlso, we were honored this month when [API World](https://apiworld.co/) awarded LoopBack with the `2019 Best of API Middleware Award`. Raymond Feng was there to [accept the award](https://twitter.com/cyberfeng/status/1181943111531909120) on behalf of the team. Yay, team!\\n\\n## Inclusion of Related Models\\n\\nWe\'ve been working on inclusion resolvers for relations for the past several months. Besides the basic functionality, we also added a prompt for activating the inclusion resolver for the `lb4 relation` command in [PR #3856](https://github.com/strongloop/loopback-next/pull/3856). This allows users to easily set up the inclusion resolver through the CLI just like all others artifacts.\\n\\nThe `lb4 relation` command now [prompts to confirm](https://loopback.io/doc/en/lb4/Relation-generator.html#arguments) if an inclusion resolver should be registered for the given relation.\\n\\nAlso, we posted [a blog](https://strongloop.com/strongblog/inclusion-of-related-models/) to illustrate the idea and usage of the inclusion resolver. We have a full example from setting up the models and relations through CLI, to querying data with the inclusion resolver. Read the blog to try out the feature!\\n\\nWe\'ve gotten feedback from the community since this feature was published. As a result, we\'ve improved the documentation. Diagrams were added to each relation to make the concept more intuitive. We also added URLs as examples to query related models in case users want to process data at the controller level instead of the repository level. See [PR #4007](https://github.com/strongloop/loopback-next/pull/4007) for more details.\\n\\n## Adding Partitioned Database Support for Cloudant and CouchDB connector\\n\\n### Spike\\n\\nBoth Cloudant and CouchDB support partitioned databases which make querying less expensive - computationally in CouchDB, monetarily on Cloudant (on `IBM Cloud`).\\n\\nA [spike](https://github.com/strongloop/loopback-connector-cloudant/issues/214) was performed to investigate the work required to support the partitioned database in Cloudant, and follow-up tasks were created. [Epic #219 - Add support for partitioned database](https://github.com/strongloop/loopback-connector-cloudant/issues/219) was created to track the implementation stories.\\n\\nThe feature will be supported in 3 stages. In the first stage, we will update the driver and enable creating the partitioned index; which are the pre-requisites for the partitioned search. The second stage includes supporting the query with partition key from the options data or the payload data; the latter one requires a model property defined as the partition key field. Stage 3 contains more improvements for the document creation in the partitioned database by supporting a composed ID.\\n\\n### Updating Driver\\n\\nTo start [Epic #219](https://github.com/strongloop/loopback-connector-cloudant/issues/219), we updated the [cloudant driver](https://github.com/cloudant/nodejs-cloudant) and the [docker image](https://hub.docker.com/r/ibmcom/couchdb3) to the latest ones which support the partition feature.\\n\\n## Spike on Migration Guide\\n\\nA spike was performed on migrating from LoopBack 3 to LoopBack 4. As a result, we created the outline of a [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html).\\n\\n## Improvements to Shopping Cart Example\\n\\nThe [shopping cart application](https://github.com/strongloop/loopback4-example-shopping) has undergone a few improvements.\\n\\n- We have added an out-of-the-box capability to set a JWT token via an `Authorize button/dialog` in the API Explorer. When interacting with the secured endpoint, the token is automatically sent in the `Authorization` header of the request. See [PR #301](https://github.com/strongloop/loopback4-example-shopping/pull/301) and [PR #3876](https://github.com/strongloop/loopback-next/pull/3876) for details. To find out how to enable this capability in your application, please see [Specifying the Security Settings in the OpenAPI Specification](https://loopback.io/doc/en/lb4/Authentication-Tutorial.html#specifying-the-security-settings-in-the-openapi-specification).\\n\\n- The shopping cart application has been decomposed into multiple microservices, each of which is packaged as a docker image. It\'s possible to communicate between microservices using [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) and/or [gRPC](https://grpc.io/). A [helm chart](https://helm.sh/docs/developing_charts/) can now be used to deploy these microservices to a Kubernetes cluster on [Minikube](https://github.com/kubernetes/minikube) or [IBM Cloud](https://www.ibm.com/cloud). See [Deploy the Shopping Application as Cloud-native Microservices using Kubernetes](https://github.com/strongloop/loopback4-example-shopping/blob/master/kubernetes/README.md) for more details.\\n\\n- The `shopping` service can now connect to the `recommender` service over gRPC as well as REST. See [PR #333](https://github.com/strongloop/loopback4-example-shopping/pull/333) for details.\\n\\n- Extra logic was added to `*.datasources.ts` files to accept configuration from kubernetes environment variables. See [PR #338](https://github.com/strongloop/loopback4-example-shopping/pull/338) for details.\\n\\n\\n## CASCON x Evoke 2019 Workshop Preparation\\n\\nThe LoopBack 4 team has prepared material for a booth and workshop at [CASCON x Evoke 2019](http://www-01.ibm.com/ibm/cas/cascon/) in Toronto, Canada. We hosted a booth named [REST APIs with LoopBack 4 and OpenAPI 3](https://pheedloop.com/cascon/site/sessions/?id=DugCzZ) on November 4th and 6th and held a workshop named [Write scalable and extensible Node.js applications using LoopBack 4](https://pheedloop.com/cascon/site/sessions/?id=OhNsKW) on November 5th. Watch for an upcoming blog post with an overview of the event!\\n\\n## Repository Tests for PostgreSQL\\n\\nPreviously, we ran repository tests against the memory, MySQL, and MongoDB databases. This month, we added PostgreSQL to the databases these tests are run against. You can see [PR #3853](https://github.com/strongloop/loopback-next/pull/3853) for details or take a look at the newly added [`repository-postgresql` package](https://github.com/strongloop/loopback-next/tree/master/acceptance/repository-postgresql).\\n\\n## Generating Controller/Repository from a Model\\n\\nSome progress was made on the [EPIC #2036 - From model definition to REST API with no custom repository/controller classes](https://github.com/strongloop/loopback-next/issues/2036). A controller can now be generated based on a model name. See [PR #3842](https://github.com/strongloop/loopback-next/pull/3842) for details. Also, a repository can now be generated based on a model name. See [PR #3867](https://github.com/strongloop/loopback-next/pull/3867) for details.\\n\\n## Documentation Improvements\\n\\n### New \'Inside a LoopBack Application\' Section Added to Docs\\n\\nWe\'re always seeking to improve our documentation. We\'ve added a new section [Inside a Loopback Application](https://loopback.io/doc/en/lb4/Inside-LoopBack-Application.html) to help LoopBack 4 application developers to establish a high level understanding of how LoopBack 4 is related to their application requirements.\\n\\n### Customize Id and Foreign Key Names for Relations\\n\\nAfter triaging some issues from the community, we realized that the documentation for customizing key names needs to be enhanced. We added explanations and examples to illustrate the default value of relations, how to customize key names, and how to use different names for models and database columns. You can find more details in [HasMany - Relation Metadata](https://loopback.io/doc/en/lb4/HasMany-relation.html#relation-metadata), [HasOne - Relation Metadata](https://loopback.io/doc/en/lb4/hasOne-relation.html#relation-metadata), and [Defining a belongsTo Relation](https://loopback.io/doc/en/lb4/BelongsTo-relation.html#defining-a-belongsto-relation).\\n\\n## Bug Fixes / CI Fixes\\n\\n- Fixed [Issue #4252 - Fix CI builds (Karma + PhantomJS)](https://github.com/strongloop/loopback/issues/4252) by reworking browser tests to run in Headless Chrome instead of PhantomJS, because the latter is no longer maintained. See [PR #4262](https://github.com/strongloop/loopback/pull/4262) for details.\\n\\n- Fixed [Issue #3717 - PersistedModel\'s updateAll method crashes the server when invoked via the remote connector](https://github.com/strongloop/loopback/issues/3717) by properly handling anonymous object types when `PersistedModel.updateAll` is called. See [PR #472](https://github.com/strongloop/strong-remoting/pull/472) for details.\\n\\n- Fixed [Issue #3878 - lifeCycleObserver is not working with express composition](https://github.com/strongloop/loopback-next/issues/3878). See [PR #3879](https://github.com/strongloop/loopback-next/pull/3879) and [PR #3891](https://github.com/strongloop/loopback-next/pull/3891) for details.\\n\\n- Fixed [Issue #3706 - Unable to POST on endpoint with recursive model](https://github.com/strongloop/loopback-next/issues/3706). See [PR #3897](https://github.com/strongloop/loopback-next/pull/3897) for details.\\n\\n- Fixed [Issue #3296 - Model discovery not working with Oracle connector & CDB instance](https://github.com/strongloop/loopback-next/issues/3296) by only calling back once the connection is released. See [PR #193](https://github.com/strongloop/loopback-connector-oracle/pull/193) for details.\\n\\n## Looking for User References\\n\\nAs a LoopBack user, do you want your company highlighted on our [web site](https://loopback.io/)? If your answer is yes, see the details in this [GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [November Milestone](https://github.com/strongloop/loopback-next/issues/4029).\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"inclusion-of-related-models","metadata":{"permalink":"/blog/inclusion-of-related-models","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-10-23-inclusion-of-related-models.md","source":"@site/blog/2019/2019-10-23-inclusion-of-related-models.md","title":"LoopBack 4 Offers Inclusion of Related Models","description":"Originally published on strongloop.com","date":"2019-10-23T00:00:00.000Z","formattedDate":"October 23, 2019","tags":[{"label":"feature","permalink":"/blog/tags/feature"},{"label":"related models","permalink":"/blog/tags/related-models"}],"readingTime":6.375,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 Offers Inclusion of Related Models","date":"2019-10-23T00:00:00.000Z","authors":"agnes512","slug":"inclusion-of-related-models","tags":["feature","related models"]},"prevItem":{"title":"LoopBack 4 October 2019 Milestone Update","permalink":"/blog/october-2019-milestone"},"nextItem":{"title":"LoopBack 4 2019 Q3 Overview","permalink":"/blog/loopback-4-2019-q3-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nLoopBack 4 now offers a new feature: inclusion of related models! This addition not only simplifies querying data in LoopBack 4, but since we have similar features in LoopBack 3 it also closes one feature gap between LoopBack 3 as well. The idea is to use the `inclusion resolver`, which is a function that helps to query data over different relations, to achieve such simplifications for us.\\n\\nHere is a simple use case of inclusion: a customer has many orders.\\n\\n![hasMany](./images/inclusion-of-related-models-hasmany.png)\\n\\nIf we\'d like to get a customer\'s instance with all their orders instances, we can query on `Customer` with filter `{include: [{relation: \'orders\']}`. The inclusion resolvers are similar to GraphQL resolvers -- it will find the target instances of `Customer` first and pass its result to the inclusion resolver of `orders`. The query result will contain the return value of `orders` nested under corresponding `Customer` instead of connecting to database twice. Read on for detailed examples and explanations!\\n\\n\x3c!--truncate--\x3e\\n\\nLoopBack 4 creates a different inclusion resolver for each relation type. Each relation has its own inclusion resolver `inclusionResolver`. And each repository has a built-in property `inclusionResolvers` as a registry for its `inclusionResolver`s.\\n\\n![inclusionResolvers](./images/inclusion-of-related-models-resolvers.png)\\n\\nTo enable querying related models for a certain relation, the corresponding `inclusionResolver` of that relation has to be registered to the `inclusionResolvers`. I promise the set up is not as complicated as what you just read through.\\nLet me show you the steps to enable this feature in few steps!\\n\\n## 0. Before you get started\\n\\nUpgrade your global installation of LoopBack 4 command line interface (CLI) to get the new feature.\\n\\n```\\n$ npm install -g \\"@loopback/cli\\"\\n```\\n\\n## 1. Set up models and datasource\\n\\nYou can set up models and datasource by the CLI `lb4 model` and `lb4 datasouce`. \\n\\nI use `MySQL` as my database in this case. And here are my models `Customer` and `Order`:\\n\\n`customer.model.ts`:\\n\\n```ts\\n// imports\\n@model()\\nexport class Customer extends Entity {\\n  @property({\\n    id: true,\\n    generated: true\\n  })\\n  id: number;\\n\\n  @property({\\n    type: \\"string\\"\\n  })\\n  name: string;\\n  // constructor\\n}\\n```\\n\\n`order.model.ts`:\\n\\n```ts\\n@model()\\nexport class Order extends Entity {\\n  @property({\\n    id: true,\\n    generated: true\\n  })\\n  id: number;\\n\\n  @property({\\n    type: \\"string\\",\\n    required: true\\n  })\\n  description: string;\\n}\\n//constructor\\n```\\n\\n## 2. Set up relations and register inclusion resolver for each relation\\n\\nWe are setting up two relations in this example:\\n\\n- `hasMany`: a `Customer` has many `Order`s. Named this relation as `orders`.\\n- `belongsTo`: an `Order` has a `Customer`. Named this relation as `customer`. The foreign key is `customerId`.\\n\\n![relations](./images/inclusion-of-related-models-relations.png)\\n\\nYou can either modify your model and repository files or use CLI `lb4 relation` to set up relations and enable the `inclusionResolver` in each relation. Here\'s how I set the `belongsTo` relation through the CLI:\\n\\n```\\n$ lb4 relation\\n? Please select the relation type: belongsTo\\n? Please select source model: Order\\n? Please select target model: Customer\\n? Source property name for the relation getter: customerId\\n? Allow Order queries to include data from related Customer instances? Yes\\n   create src/controllers/order-customer.controller.ts\\n\\nRelation BelongsTo was created in src/\\n```\\n\\nThis prompt registers the `inclusionResolver` for this `belongsTo` relation for you.\\n\\n```\\n? Allow Order queries to include data from related Customer instances? (Y/n)\\n\\n```\\n\\nIt defaults to `Yes`. Make sure to choose \'yes\' if you\'d like to use inclusion and your model is traversable.\\n\\nHere is the code snippet for models after setting up two relations and enabling both inclusion resolvers:\\n\\n`customer.model.ts`:\\n\\n```ts\\n// imports\\n@model()\\nexport class Customer extends Entity {\\n  // id, name properties\\n  @hasMany(() => Order)\\n  orders?: Order[];\\n  // constructor\\n}\\n```\\n\\n`order.model.ts`:\\n\\n```ts\\n// imports\\n@model()\\nexport class Order extends Entity {\\n  // id, desc properties\\n  @belongsTo(() => Customer)\\n  customerId: Customer;\\n}\\n//constructor\\n```\\n\\nAnd you\'ll see the inclusion resolvers are enabled in the repository classes:\\n\\n`customer.repository.ts`:\\n\\n```ts\\n//imports\\nexport class CustomerRepository extends DefaultCrudRepository {\\n  public readonly orders: HasManyRepositoryFactory<\\n    Order,\\n    typeof Customer.prototype.id\\n  >;\\n  constructor(\\n    dataSource: DbDataSource,\\n    orderRepositoryGetter: Getter<OrderRepository>\\n  ) {\\n    super(Customer, dataSource);\\n    this.orders = this.createHasManyRepositoryFactoryFor(\\n      \\"orders\\",\\n      orderRepositoryGetter\\n    );\\n    // this line registers inclusion resolver, allows us to query related models\\n    this.registerInclusionResolver(\\"orders\\", this.orders.inclusionResolver);\\n  }\\n}\\n```\\n\\n`order.repository.ts`:\\n\\n```ts\\nexport class OrderRepository extends DefaultCrudRepository {\\n  public readonly customer: BelongsToAccessor<\\n    Customer,\\n    typeof Order.prototype.id\\n  >;\\n\\n  constructor(\\n    dataSource: juggler.DataSource,\\n    customerRepositoryGetter: Getter<CustomerRepository>\\n  ) {\\n    super(Order, dataSource);\\n    this.customer = this.createBelongsToAccessorFor(\\n      \\"customer\\",\\n      customerRepositoryGetter\\n    );\\n\\n    // this line registers inclusion resolver, allows us to query related models\\n    this.registerInclusionResolver(\\"customer\\", this.customer.inclusionResolver);\\n  }\\n}\\n```\\n\\n_Notice: I use default values in this example. We also recommend to follow the naming convention. If you\'d like to custom property names or relation names, check our site [Relations](https://loopback.io/doc/en/lb4/Relations.html) for more details._\\n\\n## 3. Try it out!\\n\\nAt this point, you\'re able to query related models by specifying the relation name in the inclusion field. Let\'s create instances for `Customer` and `Order`.\\n\\n```\\nCustomer: [\\n  {id: 1, name: `Thor`},\\n  {id: 2, name: `Captain`},\\n],\\nOrder: [\\n  {id: 1, desc: `Rocket Raccoon`, customerId: 1},\\n  {id: 2, desc: `Shield`, customerId: 2},\\n  {id: 3, desc: `Mjolnir`, customerId: 1},\\n]\\n```\\n\\nYou can either query data via controllers or do it in the repository level.\\n\\n```ts\\nexport class CustomerController {\\n// constructor\\n @get(\'/customers\', {\\n    ...\\n}\\n\\nexport class OrderController {\\n// constructor\\n @get(\'/orders\', {\\n    ...\\n}\\n```\\n\\nFor hasMany relation `orders`, these queries return all customers with their `Order`s:\\n\\n- Use controllers (or use the API Explorer [`http://localhost:3000/explorer/`](http://localhost:3000/explorer/)):\\n\\n  ```sh\\n   GET http://localhost:3000/customers?filter[include][][relation]=orders\\n  ```\\n\\n- This is the same as you process data in the repository level:\\n\\n  ```ts\\n  await customerRepository.find({ include: [{ relation: \\"orders\\" }] });\\n  ```\\n\\nResult:\\n\\n```\\n[\\n  {\\n    id: 1,\\n    name: \'Thor\',\\n    orders: [\\n      {id: 1, desc: \'Mjolnir\', customerId: 1},\\n      {id: 3, desc: \'Rocket Raccoon\', customerId: 1},\\n    ],\\n  },\\n  {\\n    id: 2,\\n    name: \'Captain\',\\n    orders: [{id: 2, desc: \'Shield\', customerId: 2}],\\n  },\\n];\\n```\\n\\nHere is a diagram to make this more intuitive:\\n\\n![inclusion](./images/inclusion-of-related-models-includes.png)\\n\\nFor belongsTo relation `customer`, these queries return the `Order` that has `id = 1` and includes the `Customer` it belongs to.\\n\\n- Use controllers (or use the API Explorer [`http://localhost:3000/explorer/`](http://localhost:3000/explorer/)):\\n\\n  ```sh\\n  GET http://localhost:3000/orders/1?filter[include][][relation]=customer\\n  ```\\n\\n- This is the same as you process data in the repository level:\\n\\n  ```ts\\n  await orderRepository.findById(1, {include: [{relation: \'customer\'}]};)\\n  ```\\n\\nResult:\\n\\n```\\n[\\n  {\\n    id: 1,\\n    desc: \'Rocket Raccoon\',\\n    customerId: 1,\\n    customer: {id: 1, name: \'Thor\'},\\n  },\\n]\\n```\\n\\nBesides the example I\'ve shown above, our [TodoList Tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial.html) example also uses inclusion. Check on the site for more detailed steps. \\n\\nHope this new feature is helpful for you!\\n\\n## Limitations\\n\\nThough we\'ve finished the implementation of this new feature and test it against SQL and NoSQL databases, there are some limitations:\\n\\n- Including related models with a custom scope is not supported. For example, for `orders` of a `Customer`, it cannot filter a certain `Order`s that you want to include in `orders`. Related GH issue: [Include related models with a custom scope](https://github.com/strongloop/loopback-next/issues/3453)\\n- We don\'t support recursive inclusion of related models. Related GH issue: [Recursive inclusion of related models](https://github.com/strongloop/loopback-next/issues/3454)\\n- It doesn\'t split numbers of queries. Related GH issue: [Support `inq` splitting](https://github.com/strongloop/loopback-next/issues/3444).\\n- It might not work well with `ObjectId` of MongoDB. Related GH issue: [Spike: robust handling of ObjectID type for MongoDB](https://github.com/strongloop/loopback-next/issues/3456)\\n\\nWe have some discussions on these issues. Please check out the [Post MVP Enhancement](https://github.com/strongloop/loopback-next/issues/3585) story if you\'re interested. We\'d love to hear your input and feel free to contribute. \\n\\nThanks for choosing LoopBack!\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you! We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-4-2019-q3-overview","metadata":{"permalink":"/blog/loopback-4-2019-q3-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-10-16-loopback-q3-overview.md","source":"@site/blog/2019/2019-10-16-loopback-q3-overview.md","title":"LoopBack 4 2019 Q3 Overview","description":"Originally published on strongloop.com","date":"2019-10-16T00:00:00.000Z","formattedDate":"October 16, 2019","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":4.66,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 2019 Q3 Overview","date":"2019-10-16T00:00:00.000Z","authors":["dhmlau","agnes512"],"slug":"loopback-4-2019-q3-overview","tags":["Quarterly update"]},"prevItem":{"title":"LoopBack 4 Offers Inclusion of Related Models","permalink":"/blog/inclusion-of-related-models"},"nextItem":{"title":"Import LoopBack 3 Models into a LoopBack 4 Project","permalink":"/blog/import-loopback-3-models-to-loopback-4"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nFor the past few months, the LoopBack team has been busy improving the framework. Aside from implementation, we also did some investigation to plan out road map for the incoming new features. Here are our main focuses in last quarter:\\n\\n- [Authentication](#authentication): released `@loopback/authentication@3.x` version.\\n- [Authorization](#authorization): experimental feature which provides basic support for authorization.\\n- [Inclusion of Related Models](#inclusion_of_related_models): query data over relations with `inclusionResolver`.\\n- [Creating REST API from Model Classes](#creating_rest_api_from_model_classes): the proposed design to allow users create REST API with less code.\\n- [Importing LoopBack 3 Models](#importing_loopBack_3_models): migrate your LB3 applications to LB4 with command `lb4 import-lb3-models`.\\n\\nWe have a monthly blog reviewing what we\'ve done in each milestone. To stay tuned, don\'t forget to follow us on Twitter [@StrongLoop](https://twitter.com/@StrongLoop).\\n\\nLet\'s take a closer look at each of the epic.\\n\\n\x3c!--truncate--\x3e\\n\\n## Authentication\\n\\nWe have recently released `@loopback/authentication` 3.0. We refactored some common types/interfaces in both authentication and authorization packages and moved them to the new `@loopback/security` package. This helps combine the operations over these two packages. We also improved the `@authenticate` decorator so that users can apply the default authentication metadata without adding the decorator `@authenticate` to every route. Also, methods that don\'t require authentication can be skipped by adding `@authenticate.skip`.\\n\\nApart from enhancing codebase, we also updated the related documentation and examples. Developers can easily follow tutorials and examples to try out setting up their own authentication systems.\\n\\nMoreover, we did some researches into potential solutions for the new features. In [spike #267](https://github.com/strongloop/loopback4-example-shopping/pull/267) we were exploring a way to enable the authorization header setting from the API Explorer. And in [spike #3771](https://github.com/strongloop/loopback-next/pull/3771), we tried to find a solution to make `UserProfile` interface more flexible so that users have more controls over authentication. Check the links for discussions and proposal details.\\n\\n## Authorization\\n\\nWe released an experimental version of [`@loopback/authorization`](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html). The authorization system now allows developers to decorate their endpoints with `@authorize()`. By plugging in their own authorizers, it is able to determine whether a user has access to the resource.\\n\\nBesides the basic functionalities, we also made `@authorize()` more flexible: users now can define their own voters/authorizers, apply `@authorize` at the class level, and use the new `@authorize.skip` annotation. All these improvements allow developers to have more control to shape the authorization system.\\n\\n## Inclusion of Related Models\\n\\nWe have made good progress in this epic this quarter. We completed and released the implementation of `inclusionResolver` of relations. It allows LoopBack 4 users to query data over relations more easily. The `todo-list` tutorial is also updated with the usage of `inclusionResolver`. Check LB4 site [Relations](https://loopback.io/doc/en/lb4/Relations.html) and the [`todo-list` tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial.html) to get started. We will make this feature easier to use by adding it to CLI command. Stay tuned for more details!\\n\\n## Creating REST API from Model Classes\\n\\nIn LoopBack 3, it was very easy to get a fully-featured CRUD REST API with very little code. We would like to provide the same simplicity to you that you can create REST APIs from models directly without the need of creating Repository or Controller classes. As we found out and discussed in [spike #3617](https://github.com/strongloop/loopback-next/pull/3617), we will introduce a new package `@loopback/model-api-builder`, a new booter `ModelApiBooter`, and a plugged-in model-api-builder that builds CRUD REST APIs. The proposed design will enable users to create REST APIs without customizing repository/controller classes. Check [Epic #2036](https://github.com/strongloop/loopback-next/issues/2036) for details of related stories.\\n\\n## Importing LoopBack 3 models\\n\\nWe accomplished the implementation for the CLI command to import model definitions from LoopBack 3 applications. If you have existing LoopBack 3 applications, it\'s a good time to type in command `lb4 import-lb3-models` to migrate them to LoopBack 4! See [PR #3688](https://github.com/strongloop/loopback-next/pull/3688) for implementation details, [Importing models from LoopBack 3 projects](https://loopback.io//doc/en/lb4/Importing-LB3-models.html) documentations, and also the [blog post](https://strongloop.com/strongblog/import-loopback-3-models-to-loopback-4).\\n\\n## Exciting News\\n\\nIn August, we got the news from [APIWorld](https://apiworld.co/) that LoopBack has won the \\"Best In API Middleware\\" award. We have shared this news in [this blog post](https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/). Our architect and co-creator of LoopBack, [Raymond Feng](https://strongloop.com/authors/Raymond_Feng/), will be attending the awards ceremony on October 8 at APIWorld. If you happen to be at the conference, don\'t miss out.\\n\\nTo moving towards the cloud native direction, LoopBack 4 has been added to be one of the [Appsody application stacks](https://appsody.dev/). It is also being offered as part of the [IBM Cloud Pak for Applications](https://www.ibm.com/cloud/cloud-pak-for-applications). With the health check extension being added to LoopBack 4, we are planning to add more capabilities to provide the non-functional requirements for the cloud native deployment. Stay tuned!\\n\\n## What\'s Next?\\n\\nFor the next 3 months, we\'d like to focus on the following:\\n\\n- Continue with the Q3 stories. e.g. [Authentication](https://github.com/strongloop/loopback-next/issues/3242), [Authorization](https://github.com/strongloop/loopback-next/issues/538), [Inclusion of related models](https://github.com/strongloop/loopback-next/issues/1352).\\n- Start working on the migration guide spikes: [Migration Guide: general runtime](https://github.com/strongloop/loopback-next/issues/1849) and [Migration Guide: Authentication and Authorization](https://github.com/strongloop/loopback-next/issues/3719).\\n- Continue to enhance our cloud native story: [Production Deployment with IBM Cloud](https://github.com/strongloop/loopback-next/issues/1054).\\n- CASCON x Evoke: LoopBack team will be organizing an [Exhibition](https://pheedloop.com/cascon/site/sessions/?id=DugCzZ) and a [Workshop](https://pheedloop.com/cascon/site/sessions/?id=OhNsKW) on Nov 4th and Nov 5th.\\n\\nCheck [Q4 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md) for more details.\\n\\n## Previous Milestone Blogs\\n\\nThere are too many features added and bug fixes that cannot be captured here. Check out our previously published monthly milestone blog posts in Q2 for more details:\\n\\n- [July 2019](https://strongloop.com/strongblog/july-2019-milestone/)\\n- [August 2019](https://strongloop.com/strongblog/august-2019-milestone/)\\n- [September 2019](https://strongloop.com/strongblog/september-2019-milestone/)\\n\\n## Call for Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"import-loopback-3-models-to-loopback-4","metadata":{"permalink":"/blog/import-loopback-3-models-to-loopback-4","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-10-08-import-lb3-models-to-lb4.md","source":"@site/blog/2019/2019-10-08-import-lb3-models-to-lb4.md","title":"Import LoopBack 3 Models into a LoopBack 4 Project","description":"Originally published on strongloop.com","date":"2019-10-08T00:00:00.000Z","formattedDate":"October 8, 2019","tags":[{"label":"LoopBack 3","permalink":"/blog/tags/loop-back-3"},{"label":"migration","permalink":"/blog/tags/migration"}],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"Import LoopBack 3 Models into a LoopBack 4 Project","date":"2019-10-08T00:00:00.000Z","authors":"bajtos","slug":"import-loopback-3-models-to-loopback-4","tags":["LoopBack 3","migration"]},"prevItem":{"title":"LoopBack 4 2019 Q3 Overview","permalink":"/blog/loopback-4-2019-q3-overview"},"nextItem":{"title":"LoopBack 4 September 2019 Milestone Update","permalink":"/blog/september-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIt has been almost a year since [LoopBack 4.0 GA was announced](https://strongloop.com/strongblog/loopback-4-ga). Since then, we have been working hard on closing the feature gap between the new and the old versions and looking for ways to simplify migration of projects built on LoopBack 3.\\n\\nIn June, we announced a new feature that allows LoopBack 3 applications to be mounted in LoopBack 4 projects, allowing developers to start writing new features using LoopBack 4 while keeping existing APIs powered by LoopBack 3 (Read more about it in this [blog post](https://strongloop.com/strongblog/migrate-from-loopback-3-to-loopback-4/)).\\n\\nToday, we are happy to announce a preview version of a tool automating migration of models from LoopBack 3 to LoopBack 4:\\n\\n```\\nlb4 import-lb3-models\\n```\\n\\n\x3c!--truncate--\x3e\\n\\nLet me show you the new command in practice, using our [`lb3-application`](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application) example, which is based on [Getting started with LoopBack 3](https://loopback.io/doc/en/lb3/Getting-started-with-LoopBack.html).\\n\\nFirst of all, upgrade your global installation of LoopBack 4 CLI to get the new feature!\\n\\n```\\n$ npm install -g \\"@loopback/cli\\"\\n```\\n\\nNow we can run the following command to start the migration process:\\n\\n```\\n$ lb4 import-lb3-models lb3app/server/server.js\\n```\\n\\n_A side note: in our example project, the LoopBack 3 application is a part of the root LoopBack 4 project. Therefore it does not have its own `package.json` file and LoopBack 3 dependencies are included in the top-level `package.json` file along LoopBack 4 dependencies. The directory of the LoopBack 3 application cannot be loaded directly via `require` as a result, and we have to provide a full path to the server file to the CLI tool. On the other hand, if you are importing from a standalone LoopBack 3 project which has `main` entry in `package.json` configured to point to `server/server.js` (as is the case with projects scaffolded by our LoopBack 3 CLI tool), then it\'s enough to use the path to your LoopBack 3 project directory as the argument, e.g. `lb3app`)._\\n\\nThe generator will greet you with a warning about the experimental status and then load the LoopBack 3 application at the provided path. Once the application is loaded, the generator shows a list of models available for import.\\n\\n```\\n? Select models to import: (Press <space> to select, <a> to toggle all, <i> to invert selection)\\n\u276f\u25ef Application\\n \u25ef AccessToken\\n \u25ef User\\n \u25ef RoleMapping\\n \u25ef Role\\n \u25ef ACL\\n \u25ef Scope\\n(Move up and down to reveal more choices)\\n```\\n\\nThe initial version includes built-in LoopBack 3 models too, because they don\'t have any direct counterparts in LoopBack 4. We would like to investigate different options for importing models based on LoopBack 3 built-in models. Depending on the findings, the behavior of this prompt may change in the future.\\n\\nUsing arrows and the spacebar, we select the `CoffeeShop` model to import and confirm the selection.\\n\\n```\\n? Select models to import:\\n \u25ef Role\\n \u25ef ACL\\n \u25ef Scope\\n\u276f\u25c9 CoffeeShop\\n \u25ef Application\\n \u25ef AccessToken\\n \u25ef User\\n(Move up and down to reveal more choices)\\n```\\n\\nNow the generator migrates the model definition to the LoopBack 4 style, creates a TypeScript model file, and also updates the relevant index file.\\n\\n```\\n? Select models to import: CoffeeShop\\nModel CoffeeShop will be created in src/models/coffee-shop.model.ts\\n\\nIgnoring the following unsupported settings: acls\\n   create src/models/coffee-shop.model.ts\\n   update src/models/index.ts\\n```\\n\\nThe definition of `CoffeeShop` model includes access-control configuration, which is not supported by LoopBack 4. The tool will warn about other unsupported fields besides `acls`, for example `relations` and `methods`.\\n\\nThe initial release has a few more limitations beyond missing support for `acls`. Please refer to our documentation at [Importing models from LoopBack 3 projects](https://loopback.io/doc/en/lb4/Importing-LB3-models.html).\\n\\n## What\'s Next?\\n\\nWe are releasing this early preview version to get feedback from you, our users! Please give the new command a try and let us know which parts of the migration experience we should improve next. Start by checking the known limitations described in the documentation and up-vote the linked GitHub issues. If there is no GitHub issue describing your feature yet then please open a new one.\\n\\nBesides importing model definitions, we are also working on a declarative way of exposing models via REST APIs. This will allow LoopBack 4 applications to be written in a style that\'s closer to LoopBack 3, where REST API are built from a model definition file (e.g. `common/models/product.json`) and model configuration file (`server/model-config.json`). Once this feature is implemented, it will be possible to migrate both model definition and REST API from LoopBack 3. You can track our progress in GitHub issues [loopback-next#2036](https://github.com/strongloop/loopback-next/issues/2036) and [loopback-next#3822](https://github.com/strongloop/loopback-next/issues/3822).\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you! We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"september-2019-milestone","metadata":{"permalink":"/blog/september-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-10-02-september-milestone.md","source":"@site/blog/2019/2019-10-02-september-milestone.md","title":"LoopBack 4 September 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-10-02T00:00:00.000Z","formattedDate":"October 2, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":8.755,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 September 2019 Milestone Update","date":"2019-10-02T00:00:00.000Z","authors":"agnes512","slug":"september-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"Import LoopBack 3 Models into a LoopBack 4 Project","permalink":"/blog/import-loopback-3-models-to-loopback-4"},"nextItem":{"title":"LoopBack 4 August 2019 Milestone Update","permalink":"/blog/august-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAll the leaves are red and the flowers are fading away. In this season of fruitfulness, the LoopBack team accomplished their planned September milestone goals. Besides delivering code-related contributions, we also addressed the growing number of reported issues from the growing number of users from the GitHub community. I believe that with the effort from our team and the contribution from the community, we are crafting LoopBack to a better framework.\\n\\nHere are our main focuses from September:\\n\\n- Enhancement of Authentication/Authorization\\n- Declarative Building of REST APIs\\n- Importing of LB3 Model JSON File To LB4 Model Class\\n- Inclusion Resolver in Relations\\n\\nSee the [September milestone](https://github.com/strongloop/loopback-next/issues/3653) for an overview of what we have worked on, and read on for more details.\\n\\n\x3c!--truncate--\x3e\\n\\n## Enhancing Authentication and Authorization\\n\\n### Improving `@authenticate` and `@authorize` Decorators\\n\\nIn [PR #3691](https://github.com/strongloop/loopback-next/pull/3691), we implemented the default metadata for authentication. It allows us to have a default authentication enforcement for methods. We also improved the `@authenticate` decorator to configure a default authentication for all methods within a class. Now we can apply our default authentication metadata without adding the decorator `@authenticate` to every route.\\n\\nMoreover, methods that don\'t require authentication can be skipped by adding `@authenticate.skip`. Similarly, authorization can be skipped with `@authorize.skip` annotation. Check [PR #3762](https://github.com/strongloop/loopback-next/pull/3762) for more details.\\n\\n### Spike for Authentication in API Explorer\\n\\nIn [spike #267](https://github.com/strongloop/loopback4-example-shopping/pull/267) we tried enabling the authorization header setting from the API Explorer. Without this feature, users will have to test their endpoints outside the API Explorer to specify the header fields.\\n\\nThe `swagger-ui` module has its built-in \\"Authorize\\" component. It shows up in the API Explorer automatically when `components.securities` is added in the application\'s OpenAPI specification. In the spike PR, [a series of screenshots](https://github.com/strongloop/loopback4-example-shopping/blob/9e0bd5f63ee221a740f68a7af3019d6c8c1df972/README.md#authentication) demos how to interact with the \\"Authorize\\" dialog to set the authentication headers. You can either specify global security policies to be applied to all the APIs, or configure the policy per endpoint.\\n\\nWhen merging the security schemas into the OpenAPI specification, we also realized the importance to make contributing partial OpenAPI specifications from extensions more flexible. As the next steps, we will document and explain the steps of enabling the \\"Authorize\\" component in the API Explorer, and also improve inferring security schemas from the authentication strategies.\\n\\n### Spike for A More Flexible `UserProfile` Interface in `@loopback/authentication`\\n\\nInterface `UserProfile` describes a minimum set of properties that represents an identity of a user. It is also a contract shared between the authentication and authorization modules. To make up the difference between a custom `User` model and `UserProfile`, we introduced a `UserService` interface with a converter function as a choice for users who want to organize the utilities for the `User` model into a service class.\\n\\nIn this spike, we worked on a more general solution that unifies the behavior across all modules. We started the spike with the `@loopback/authentication-passport` because compared with custom authentication strategies, users have less control over the returned user when applying the passport adapter. The solution is to define an interface `UserProfileFactory` which takes in an instance of the custom user and returns a user profile. A corresponding key will also be created in `@loopback/authentication` for the sake of injection.\\n\\nIn the meantime, we also discovered that some user profile related refactor in `@loopback/authorization` is needed. You can find more details in the [PoC PR](https://github.com/strongloop/loopback-next/pull/3771)\\n\\nTwo follow-up stories were created: [Add user profile factory](https://github.com/strongloop/loopback-next/issues/3846) and [Refactor the authorization component](https://github.com/strongloop/loopback-next/issues/3845)\\n\\n## Declarative Building of REST APIs\\n\\nIn LoopBack 3, it was very easy to get a fully-featured CRUD REST API with very little code: a model definition describing model properties + a model configuration specifying which datasource to use.\\n\\nIn September, we did some research into how to provide the same simplicity to LB4 users too and outlined the following implementation design:\\n\\n1. A new package `@loopback/model-api-builder` will define the contract for plugins (extensions) contributing repository & controller builders.\\n\\n2. A new booter `ModelApiBooter` will load all model-config files from `/model-endpoints/{model-name}.{api-flavour}-config.js`, find model API builder using Extension/ExtensionPoint pattern and delegate the remaining work to the plugin.\\n\\n3. An official model-api-builder plugin that will build CRUD REST APIs using `DefaultCrudRepository` implementation. The plugin will be implemented inside the recently introduced package `@loopback/rest-crud`.\\n\\nThe proposed design will enable the following opportunities to extend and customize the default behavior of API endpoints:\\n\\n- App developers will be able to create & bind a custom repository class, this will allow them, for example, to implement functionality similar to LB3 Operation Hooks.\\n\\n- App developers will be able to implement their own api-builder plugins and replace the repository & controller builders provided by LB4 with their own logic.\\n\\n- The model configuration schema will be extensible; individual plugins will be able to define additional model-endpoints options to further tweak the behavior of API endpoints.\\n\\nYou can find more details in the spike [PR #3617](https://github.com/strongloop/loopback-next/pull/3617) and track the implementation progress in [Epic #2036](https://github.com/strongloop/loopback-next/issues/2036).\\n\\n## Importing LoopBack 3 Models\\n\\nTo further simplify the migration from LoopBack 3 to LoopBack 4, we implemented a new CLI command to import model definitions from LoopBack 3 applications. See [PR #3688](https://github.com/strongloop/loopback-next/pull/3688), [Importing models from LoopBack 3 projects](https://loopback.io//doc/en/lb4/Importing-LB3-models.html) in our documentations and stay tuned for an upcoming blog post announcement!\\n\\n## Implementing Inclusion Resolvers for Relations\\n\\nLast month, we introduced the concept of the `inclusion resolver` in relations, which helps to query data through an `include` filter. An inclusion resolver is a function that can fetch target models for a given list of source model instances.\\n\\nHere is an example of the `HasMany` relation: querying customers\' orders. A `Customer` has many `Order`s:\\n\\n```ts\\ncustomerRepository.find({ include: [{ relation: \\"orders\\" }] });\\n```\\n\\nwill return all customer instances alone with their related orders:\\n\\n```ts\\n[\\n  {\\n    customerName: \\"Thor\\",\\n    id: 1,\\n    orders: [\\n      { desc: \\"Mjolnir\\", customerId: 1 },\\n      { desc: \\"Rocket Raccoon\\", customerId: 1 }\\n    ]\\n  },\\n  {\\n    customerName: \\"Captain\\",\\n    id: 2,\\n    orders: [{ desc: \\"Shield\\", customerId: 2 }]\\n  }\\n];\\n```\\n\\nWe accomplished finishing the implementation of `inclusion resolver` for `HasMany`, `BelongsTo`, and `HasOne` relations. The `inclusionResolver` property is now available for these three relations.\\n\\nFor more details on how to use the resolvers, please check the LoopBack 4 [Relation](https://loopback.io/doc/en/lb4/Relations.html) page or try out the `todo-list` example (by using `lb4 example todo-list`).\\n\\nFor implementation details, please check pull requests of inclusion resolver tasks and its helpers:\\n\\n- `HasMany` inclusion resolver implementation [PR #3595](https://github.com/strongloop/loopback-next/pull/3595)\\n- `BelongsTo` inclusion resolver implementation [PR #3721](https://github.com/strongloop/loopback-next/pull/3721)\\n- `HasOne` inclusion resolver implementation [PR #3764](https://github.com/strongloop/loopback-next/pull/3764)\\n- Update `todo-list` example to use inclusion resolver [PR #3450](https://github.com/strongloop/loopback-next/issues/3450)\\n- Add `keyFrom` to resolved relation metadata [PR #3726](https://github.com/strongloop/loopback-next/pull/3726)\\n- Implement helpers for inclusion resolver [PR #3727](https://github.com/strongloop/loopback-next/pull/3727)\\n\\n## Other Changes\\n\\n### Allowing Recursive Model\\n\\n[PR #3674](https://github.com/strongloop/loopback-next/pull/3674) and [PR #3722](https://github.com/strongloop/loopback-next/pull/3722) allow us to define recursive models. For example:\\n\\n```ts\\n@model()\\nclass ReportState extends Model {\\n  @property.array(ReportState, {})\\n  states: ReportState[];\\n\\n  @property({\\n    type: \\"string\\"\\n  })\\n  benchmarkId?: string;\\n\\n  constructor(data?: Partial<ReportState>) {\\n    super(data);\\n  }\\n}\\n```\\n\\nwhere the JsonSchema of the `ReportState` model is\\n\\n```ts\\n{\\n  states: {\\n    type: \'array\',\\n    items: {$ref: \'#/definitions/ReportState\'},\\n  },\\n  benchmarkId: {type: \'string\'},\\n}\\n```\\n\\n### CI Failures Fixing\\n\\nThe CI failures in the [Oracle connector](https://github.com/strongloop/loopback-connector-oracle) have been fixed. In a related note, [a new issue](https://github.com/strongloop/loopback-connector-oracle/issues/190) has been opened to make the local tests (`npm test`) pass.\\n\\n### Database Migration\\n\\nPreviously, `npm run migrate` would exclude LoopBack 3 models mounted in a LoopBack 4 app. Now it successfully migrates LoopBack 3 models as well. Check [PR #3779](https://github.com/strongloop/loopback-next/pull/3779) for more details.\\n\\n## New Features On The Way\\n\\n### Deploying the Shopping Application as a Kubernetes Cluster\\n\\nThrough the work in progress [PR #268](https://github.com/strongloop/loopback4-example-shopping/pull/268), by decomposing shopping example into multiple microservices and packaging them as docker images, we will be able to deploy a composite application. In addition, this feature would also show the posibility of communicating between microservices using REST and/or gRPC in such LB4 applications.\\n\\n### Adding Metrics Integration with `Prometheus`\\n\\nIn another work in progress [PR #3339](https://github.com/strongloop/loopback-next/pull/3339), we are working on an experimental functionality. The new `@loopback/extension-metrics` package would allow users to report metrics of Node.js, LoopBack framework, and their application to `Prometheus`. This feature will be shown as an example in the new package `@loopback/example-metrics-prometheus`.\\n\\n## Community Contribution\\n\\nWe have many community users contributing to LoopBack. In September, 14% of the merged PRs was coming from community contribution! From refactoring functionality to enhancing documentation, we really appreciate all these contributions. Here are some highlights of this month\'s community contributions:\\n\\n### Allowing `rest-explorer` to Use a Relative URL for the OpenAPI Specification\\n\\nCommunity user [@mgabeler-lee-6rs](https://github.com/mgabeler-lee-6rs) implemented a new feature that allows API Explorer to self-host the OpenAPI spec document and thus use a relative path in `swagger-ui` configuration. Before this change, the LoopBack configured UI component with an absolute path that did not work well when the application was running behind a reverse proxy link `nginx`. The API Explorer now works more reliably. Check [PR #3133](https://github.com/strongloop/loopback-next/pull/3133) for more implementation details and discussions over the feature.\\n\\n### Updating OpenAPI Schemas for Azure Validation\\n\\nIn [PR #3504](https://github.com/strongloop/loopback-next/pull/3504), community user [@ericzon](https://github.com/ericzon) changed the formatting of the OpenAPI Schema, which allows it to now pass Azure API Manager validation. We can now deploy an API as \\"App Service\\" and connect it with the API Manager as OpenAPI. It enables LB4 to work out-of-the-box on Microsoft Azure.\\n\\n### Contributions from Community User [@derdeka](https://github.com/derdeka)\\n\\n[@derdeka](https://github.com/derdeka) is one of our most active users and contributors. [@derdeka](https://github.com/derdeka) shared their ideas and suggestions in many pull requests with us, especially in the `Authentication` area. Here are some of their contributions:\\n\\n- [@derdeka](https://github.com/derdeka)\'s [PR #3649](https://github.com/strongloop/loopback-next/pull/3649) allowed the `AuthenticationStrategyProvider` class to be extended.\\n- In [PR #3623](https://github.com/strongloop/loopback-next/pull/3623), [@derdeka](https://github.com/derdeka) improved the booter for importing a LB3 app to LB4. With the change, it processes the generated OpenAPI specifications correctly when mouting a LB3 app to LB4.\\n\\nIf you would like to contribute to LoopBack, please check the [Call to Action](#Call-to-Action) section below!\\n\\n## Looking for User References\\n\\nAs a LoopBack user, do you want your company highlighted on our [web site](https://loopback.io/)? If your answer is yes, see the details in this [GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [October milestone](https://github.com/strongloop/loopback-next/issues/3801).\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you! We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"august-2019-milestone","metadata":{"permalink":"/blog/august-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-09-05-august-milestone.md","source":"@site/blog/2019/2019-09-05-august-milestone.md","title":"LoopBack 4 August 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-09-05T00:00:00.000Z","formattedDate":"September 5, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.865,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 August 2019 Milestone Update","date":"2019-09-05T00:00:00.000Z","authors":"jannyhou","slug":"august-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 September 2019 Milestone Update","permalink":"/blog/september-2019-milestone"},"nextItem":{"title":"Building an Online Game With LoopBack 4 - Front-end with React (Part 6)","permalink":"/blog/building-an-online-game-with-loopback-4-pt6"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe last month of summer started with exiting news that [LoopBack won the \\"Best in API Middleware award\\"](https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/)\ud83c\udf89, which is a great recognition of our team\'s achievement and effort. With those efforts in mind, here\'s the highlights of what we worked on in August: \\n\\n- The implementation of InclusionResolver has made significant progress in the Inclusion epic.\\n- A new epic to simplify building REST APIs is started with some pre-work and spike.\\n- We contributed a LoopBack stack for Kabanero/Appsody to enable cloud native development experience.\\n- The first version of @loopback/authorization was released for users to try.\\n\\nYou can read more to learn the new features in details.\\n\\n\x3c!--truncate--\x3e\\n\\n## Inclusion Resolver\\n\\nTo deliver [Inclusion of related models](https://github.com/strongloop/loopback-next/issues/1352) epic, we started to implement tasks related to the inclusion resolver. \\n\\n- We introduced the type `InclusionResolver` which you can use to fetch related models in [PR #3517](https://github.com/strongloop/loopback-next/pull/3517).\\n\\n- We implemented `findByForeignKeys` and `includeRelatedModels` functions, which help build `resolvers` for relations and improve querying for the include filter. The `findByForeignKeys` method finds model instances that contain any of the provided foreign key values. You can see more details for `findByForeignKeys` in [PR #3473](https://github.com/strongloop/loopback-next/pull/3473). The `includeRelatedModels` function returns model instances that include related models that have a registered resolver. You can see more about this function in [PR #3517](https://github.com/strongloop/loopback-next/pull/3517).\\n\\n- We improved `DefaultCrudRepository` to leverage `InclusionResolver` in [PR #3583](https://github.com/strongloop/loopback-next/pull/3583).\\n  - The `findById`, `find`, and `findOne` methods have been modified to to call `includeRelatedModels`.\\n  - `registerInclusionResolver` method has been added to register resolvers.\\n\\n- Tests in repository package for relations have been refactored so that they can be tested against MySQL and MongoDB. This ensures our relations test suites work against real databases, along with the memory. Check [PR #3538](https://github.com/strongloop/loopback-next/pull/3538) for more details.\\n\\n## Authorization\\n\\n### Experimental release\\n\\nThis month we released the experimental version of [`@loopback/authorization`](https://github.com/strongloop/loopback-next/tree/master/packages/authorization) by landing Raymond\'s [authorization feature PR](https://github.com/strongloop/loopback-next/pull/1205).\\n\\nThe authorization system is verified and tested by a [PoC PR](https://github.com/strongloop/loopback4-example-shopping/pull/231) in the shopping example. Developers can decorate their endpoints with `@authorize()`, and provide the authorization metadata like `scope`, `resource`, `voter` in the decorator. Then define or plugin their own authorizers which determine whether a user has access to the resource. This is similar to how the authentication strategies are provided in the authentication system.\\n\\n`@loopback/authentication` and `@loopback/authorization` are combined in a way that the `authentication` module establishes the user identity from a request, passes it as the current user to the `authorization` module which decides is the resource accessible by that user.\\n\\nSince the two modules share the identity abstracts to describe the user(or application, device in the future), we extracted the user related binding keys and types into a separate module `@loopback/security`.\\n\\n### Configure the Decision logic for Voters\\n\\nAfter the initial release of `@loopback/authorization`, we received community feedback regarding more flexible decision logic for the voters/authorizers. Raymond introduced two options to configure the decision maker:\\n\\n- `precedence`: Controls if Allow/Deny vote takes precedence and override other votes. If not set, default to `AuthorizationDecision.DENY`. Once a vote matches the `precedence`, it becomes the final decision. The rest of votes will be skipped.\\n\\n- `defaultDecision`: Default decision if all authorizers vote for `ABSTAIN`. If not set, default to `AuthorizationDecision.DENY`.\\n\\nFor details of how the final decision is made, you can check the [Decision matrix](https://github.com/strongloop/loopback-next/blob/master/packages/authorization/README.md#decision-matrix).\\n\\n## New Common Layer for Authorization and Authentication\\n\\nAs mentioned in the previous section, the interface `UserProfile` and `AuthenticationBindings.CURRENT_USER` have been moved into a new module called [`@loopback/security`](https://github.com/strongloop/loopback-next/tree/master/packages/security). This module contains the common types/interfaces for LoopBack 4 security including authentication and authorization.\\n\\nIn this package we defined interface `Principle` as the base type of all the identity models, like `UserProfile`, `Organization`, `Application`(the later two are still in build), it has a symbol field called `securityId`, which is used as the identity of a user/application/device.\\n\\n## From model definition to REST API with no custom classes\\n\\nThis month we started to work on the Epic that will simplify building REST APIs in LoopBack 4.\\n\\nQuoting from https://github.com/strongloop/loopback-next/issues/2036:\\n\\n> In LoopBack 3, it was very easy to get a fully-featured CRUD REST API with very little code: a model definition describing model properties + a model configuration specifying which datasource to use.\\n> \\n> Let\'s provide the same simplicity to LB4 users too.\\n> \\n> - User creates a model class and uses decorators to define model properties. (No change here.)\\n> - User declaratively defines what kind of data-access patterns to provide (CRUD, KeyValue, etc.) and what datasource to use under the hood.\\n> - `@loopback/boot` processes this configuration and registers appropriate repositories & controllers with the app.\\n\\nThe first step was building a new component that will provide the default CRUD REST operations. The [PR#3582](https://github.com/strongloop/loopback-next/pull/3582) introduces a new package `@loopback/rest-crud` that can be already used today as an alternative solution to `lb4 controller`.\\n\\nIn the next step, we needed to research the best design for model configuration and booter implementation. The [PR#3617](https://github.com/strongloop/loopback-next/pull/3617) offers a proof-of-concept prototype demonstrating the proposed design. We are excited about the extensibility of the proposed approach, as it will make it very easy for 3rd-party developers (including application developers) to implement their own flavor of Repository and Controller classes to be used with the new Model API booter.\\n\\n## LoopBack Stack for Appsody\\n\\n[Appsody](https://appsody.dev/) is an open source project that makes creating cloud native applications simple. It provides application stacks for open source runtimes and frameworks, which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments. \\n\\nThis month, LoopBack has been added as one of the application stacks in Appsody to provide a powerful solution to build open APIs and Microservices in TypeScript. You can try its image in [stack Node.js-LoopBack](https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback)\\n\\n## AJV Keywords Support\\n\\nIn [PR#3539](https://github.com/strongloop/loopback-next/pull/3539) we added validator [`ajv-keywords`](https://github.com/epoberezkin/ajv-keywords) to validate the incoming request data according to its corresponding OpenAPI schema. Now you can specify `ajvKeywords` as `true` or an array of AJV validation keywords in the validation options. See examples:\\n\\n```ts\\napp = new RestApplication({rest: givenHttpServerConfig()});\\napp\\n  .bind(RestBindings.REQUEST_BODY_PARSER_OPTIONS)\\n  .to({validation: {ajvKeywords: true}});\\n```\\n\\nor\\n\\n```ts\\napp = new RestApplication({rest: givenHttpServerConfig()});\\napp\\n  .bind(RestBindings.REQUEST_BODY_PARSER_OPTIONS)\\n  .to({validation: {ajvKeywords: [\'range\']}});\\n```\\n\\n## Max Listeners\\n\\nIf multiple operations are executed by a connector before a connection is established with the database, these operation are queued up. If the number of queued operations exceeds [Node.js\' default max listeners amount](https://nodejs.org/api/events.html#events_eventemitter_defaultmaxlisteners), it throws the following warning: `MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 connected listeners added. Use emitter.setMaxListeners() to increase limit`. We introduced a default value for the maximum number of emitters and now allow users to customize the number. In a LoopBack 3 application\'s `datasources.json`, you can change the number by setting the `maxOfflineRequests` property to your desired number. See [PR #1767](https://github.com/strongloop/loopback-datasource-juggler/pull/1767) and [PR #149](https://github.com/strongloop/loopback-connector/pull/149) for details.\\n\\n## Binding Improvement\\n\\nIn [PR#3618](https://github.com/strongloop/loopback-next/pull/3618) we added support for applying multiple `@bind()` decorators on the same class. Now you can decorator your class like:\\n\\n```ts\\n@bind({scope: BindingScope.TRANSIENT})\\n@bind({tags: {name: \'my-controller\'}})\\nexport class MyController {\\n  // Your controller members\\n}\\n```\\n\\n## Documentation Improvements\\n\\nThe architecture diagrams are added for concepts [Binding](https://loopback.io/doc/en/lb4/Binding.html), [Component](https://loopback.io/doc/en/lb4/Components.html), [Context](https://loopback.io/doc/en/lb4/Context.html), [IoC Container](https://loopback.io/doc/en/lb4/Context.html#why-is-it-important), and [Context Hierarchy](https://loopback.io/doc/en/lb4/Context.html#request-level-context-request).\\n\\nWe also reorganized the documentation so that it\'s easier for users to understand, including:\\n\\n* Adding diagrams displaying how each key concepts relate to each other.\\n* Reordering the sidebar items under the key concepts section.\\n\\n## Farewell and Welcome\\n\\nAs the summer ends, [Nora](https://strongloop.com/authors/Nora_Abdelgadir/) wraps up her 12-month internship in the LoopBack team. She has made good progress in the [inclusion of related models story](https://github.com/strongloop/loopback-next/issues/1352) this month! While she has returned to school, Nora will still be maintaining LoopBack on a part-time basis. We send her best wishes at school, and sincere thank yous for her dedication and hard work! \\n\\nOn the other hand, we\'re excited to have [Deepak](https://github.com/deepakrkris) back to the team. Bringing his knowledge and experience in cloud and container related technologies, it would be a great addition to us. Welcome Deepak!\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you! We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"building-an-online-game-with-loopback-4-pt6","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt6","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-08-28-building-an-online-game-with-loopback-4-pt6.md","source":"@site/blog/2019/2019-08-28-building-an-online-game-with-loopback-4-pt6.md","title":"Building an Online Game With LoopBack 4 - Front-end with React (Part 6)","description":"Originally published on strongloop.com","date":"2019-08-28T00:00:00.000Z","formattedDate":"August 28, 2019","tags":[{"label":"learning","permalink":"/blog/tags/learning"},{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":15.235,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 - Front-end with React (Part 6)","date":"2019-08-28T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt6","tags":["learning","how-to"]},"prevItem":{"title":"LoopBack 4 August 2019 Milestone Update","permalink":"/blog/august-2019-milestone"},"nextItem":{"title":"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors","permalink":"/blog/loopback4-interceptors-part2"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 6: Front-end with React\\n\\n### In This Episode\\n\\nNow our project is on IBM Cloud. But you may notice there is not anything that we can actually play with. It\'s just some APIs. How can we call it a game without front-end UI?\\n\\nIn this episode, I will build signup, login, and home pages with [React](https://reactjs.org/).\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part6/firstgame) for the code from this episode.\\n\\n\x3c!--truncate--\x3e\\n\\n### Introduction\\n\\nIn this series, I\u2019m going to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\u2019ll create a new project I\u2019ve been thinking about: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game also allows multiple players to log in and play with their friends.\\n\\n### Previously on Building an Online Game With LoopBack 4\\n\\nIn the last episode, we covered how to run our project in Docker and push it to Kubernetes cluster on IBM Cloud.\\n\\nHere are the previous episodes:\\n\\n- [Part 1: Building a Simple LoopBack Project With MongoDB](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/)\\n- [Part 2: Generating Universally Unique ID and Managing Models Relationships](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt2/)\\n- [Part 3: Customizing APIs in Controller](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt3/)\\n- [Part 4: User Authentication and Role-Based Access Control](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/)\\n- [Part 5: Deploying our Application to Kubernetes on IBM Cloud](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt5/)\\n\\n### Prerequisites\\n\\nI am completely new to the front-end world. So I took some online courses.\\nIf you don\'t have any front-end experience like me, you should spend some time on the basic knowledge before moving on.\\n\\n- [Javascript 30 days](https://javascript30.com/)\\n- [Learn React - React Crash Course](https://www.youtube.com/watch?v=Ke90Tje7VS0)\\n\\nYou don\'t need to finish them all. Watching online courses is boring. You can start to write code whenever you think you are ready.\\n\\nI will also use some other libraries.\\n\\n- [axios](https://www.npmjs.com/package/axios)\\n- [bootstrap](https://www.npmjs.com/package/bootstrap)\\n- [react-bootstrap](https://www.npmjs.com/package/react-bootstrap)\\n- [react-router-dom](https://www.npmjs.com/package/react-router-dom)\\n\\nYou don\'t have to fully understand them before. I will show you how to use them step by step.\\n\\n### Initializing React Project\\n\\nInstall `create-react-app`\\n\\n```\\nnpm i create-react-app\\n```\\n\\nThen run this to create a new react project:\\n\\n```\\ncreate-react-app <your_project_name>\\n```\\n\\nIf you go to the project you just created and run `npm start`, you will see a page like this:\\n\\n![default_page](./images/building-online-game-pt6-react-default.jpg)\\n\\n### structure Designing\\n\\nBefore we start, we need to spend some time on the project structure.\\n\\nIn a React project, everything is [component](https://reactjs.org/docs/react-component.html). Your pages, navigation bar, input form, or even a button, all of them could be components. All of those components are organized in a tree structure. Here is my project structure.\\n\\n![structure](./images/building-online-game-pt6-structure.jpg)\\n\\nAnd here is my directory structure:\\n\\n![directory](./images/building-online-game-pt6-directory-structure.jpg)\\n\\n### `App.jsx`\\n\\nFirst, open the `src/App.js` file. It will be the parent of all other components.\\n\\nChange your `App.js` to `App.jsx`. It makes our life easier to use `.jsx` in React.\\n\\nThen change your `App.jsx` to this:\\n\\n```jsx\\nimport React, { Component } from \\"react\\";\\nimport { BrowserRouter as Router, Redirect, Route } from \\"react-router-dom\\";\\nimport { NavBar } from \\"./components\\";\\nimport { Login, Signup, HomePage } from \\"./containers\\";\\nimport { userService, authenticationService } from \\"./services\\";\\nimport \\"./containers/style.css\\";\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      currentUser: \\"\\",\\n      data: {},\\n      gear: {}\\n    };\\n    this.handelLogout = this.handelLogout.bind(this);\\n    this.handelUserData = this.handelUserData.bind(this);\\n  }\\n  componentDidMount() {\\n    this.handelUserData();\\n  }\\n\\n  handelLogout() {\\n    authenticationService.logout();\\n    this.setState({ currentUser: \\"\\", data: {}, gear: {} });\\n  }\\n\\n  handelUserData() {\\n    const currentUser = localStorage.getItem(\\"currentUser\\");\\n    if (currentUser) {\\n      this.setState({ currentUser });\\n      userService.getUserData(currentUser, this);\\n      userService.getGearData(currentUser, this);\\n    }\\n  }\\n\\n  render() {\\n    const { gear, data, currentUser } = this.state;\\n    return (\\n      <div className=\\"jumbotron\\">\\n        <NavBar data={data} onLogout={this.handelLogout} />\\n        <div className=\\"container basic\\">\\n          <div className=\\"col-sm-8 col-sm-offset-2 basic\\">\\n            <Router>\\n              <div>\\n                <Route\\n                  exact\\n                  path=\\"/\\"\\n                  render={props =>\\n                    localStorage.getItem(\\"currentUser\\") ? (\\n                      <HomePage\\n                        {...props}\\n                        currentUser={currentUser}\\n                        data={data}\\n                        gear={gear}\\n                        handelUserData={this.handelUserData}\\n                      />\\n                    ) : (\\n                      <Redirect\\n                      to={\\n                        {\\n                          pathname: \\"/login\\",\\n                          state: { from: props.location }\\n                        }\\n                      }\\n                      />\\n                    )\\n                  }\\n                />\\n                <Route\\n                  path=\\"/login\\"\\n                  render={props => (\\n                    <Login {...props} handelUserData={this.handelUserData} />\\n                  )}\\n                />\\n                <Route path=\\"/signup\\" component={Signup} />\\n              </div>\\n            </Router>\\n          </div>\\n        </div>\\n        <div className=\\"text-center\\">\\n          <p>\\n            <a href=\\"https://loopback.io/\\">Powered by Loopback 4</a>\\n          </p>\\n          <p>\\n            <a href=\\"https://github.com/gobackhuoxing/first-web-game-lb4\\">\\n              Github@gobackhuoxing\\n            </a>\\n          </p>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport { App };\\n```\\n\\nHere we will use a library called [react-router-dom](https://www.npmjs.com/package/react-router-dom). Simply run `npm install react-router-dom` to install it. This library allows us to navigate between different components.\\n\\nLet\'s go through this line by line.\\n\\nThe first thing you can see is:\\n\\n```jsx\\nthis.state = {\\n  currentUser: \\"\\",\\n  data: {},\\n  gear: {}\\n};\\n```\\n\\nThis is the state of this component. Because we are using `JWT` in back-end for login. we need to store the token for future API calls. We also need to store the basic user information, so we can display it somewhere.\\n\\nThen we have three functions:\\n\\n```jsx\\n  componentDidMount() {\\n    this.handelUserData();\\n  }\\n\\n  handelLogout() {\\n    authenticationService.logout();\\n    this.setState({ currentUser: \\"\\", data: {}, gear: {} });\\n  }\\n\\n  handelUserData() {\\n    const currentUser = localStorage.getItem(\\"currentUser\\");\\n    if (currentUser) {\\n      this.setState({ currentUser });\\n      userService.getUserData(currentUser, this);\\n      userService.getGearData(currentUser, this);\\n    }\\n  }\\n```\\n\\n- `handelLogout` is a function to logout. It will remove our token from `localStorage` and user data from `state`.\\n- `handelUserData` is a function to fetch user data from back-end and store the data in `state`. In react, never change `state` directly. If you do that, React will not update the page, because it doesn\'t know what has been changed. You should always use `setState()` to change `state` so that React can update all pages that related to this change.\\n- `authenticationService` and `userService` are my self-defined services to do all of the API calls.\\n- `componentDidMount` is a react build-in function that will be executed after the first render. I use it to get user data before page loading. You can check [here](https://www.tutorialspoint.com/reactjs/reactjs_component_life_cycle) for more information about the React component life cycle.\\n\\nThe `render` function defined how does our component look like. I have four children components here: `NavBar`, `HomePage`, `Login`, and `Signup`.\\n\\nWe use `react-router-dom` for redirecting. I have three pages in my route:\\n\\n- Login(\\"/login\\")\\n- Signup(\\"/signup\\")\\n- HomePage(\\"/\\")\\n\\n```jsx\\n<Route\\n  exact\\n  path=\\"/\\"\\n  render={props =>\\n    localStorage.getItem(\\"currentUser\\") ? (\\n      <HomePage\\n        {...props}\\n        currentUser={currentUser}\\n        data={data}\\n        gear={gear}\\n        handelUserData={this.handelUserData}\\n      />\\n    ) : (\\n      <Redirect\\n      to={\\n        {\\n          pathname: \\"/login\\",\\n          state: { from: props.location }\\n        }\\n      }\\n      />\\n    )\\n  }\\n/>\\n```\\n\\nIf we can find token in `localStorage`, we will go to `HomePage`, otherwise, we will go to `Login`.\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/blob/part6/firstgame-frontend/src/App.jsx) for my code of `App.jsx`.\\n\\n### Containers\\n\\nA container is also a component. It is also a holder for other components. We have three containers: `HomePage`, `Login`, `Signup`.\\n\\nLet\'s first create a `containers` folder in `/src`.\\n\\n#### Login and Signup\\n\\n![login](./images/building-online-game-pt6-login.jpg)\\n\\nThis is my `Login.jsx`.\\n\\n```jsx\\nimport React, { Component } from \\"react\\";\\nimport { authenticationService } from \\"../services\\";\\n\\nclass Login extends Component {\\n  unmount = false;\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      email: \\"\\",\\n      password: \\"\\",\\n      error: \\"\\",\\n      submitted: false,\\n      loading: false,\\n      shortPassword: false\\n    };\\n\\n    this.handleChange = this.handleChange.bind(this);\\n    this.handleSubmit = this.handleSubmit.bind(this);\\n  }\\n\\n  componentWillUnmount() {\\n    this.unmount = true;\\n  }\\n\\n  handleChange(e) {\\n    const { name, value } = e.target;\\n    this.setState({ [name]: value });\\n  }\\n\\n  handleSubmit = e => {\\n    e.preventDefault();\\n    const { email, password } = this.state;\\n    const { handelUserData } = this.props;\\n\\n    this.setState({ submitted: true });\\n    if (!(email && password)) {\\n      return;\\n    }\\n    if (password.length < 8) {\\n      this.setState({ shortPassword: true });\\n      return;\\n    }\\n\\n    this.setState({ loading: true, shortPassword: false });\\n    authenticationService.login(email, password, this).then(\\n      function() {\\n        if (!this.unmount) this.setState({ loading: false });\\n      }.bind(this)\\n    );\\n    handelUserData();\\n  };\\n\\n  render() {\\n    const {\\n      email,\\n      password,\\n      error,\\n      loading,\\n      submitted,\\n      shortPassword\\n    } = this.state;\\n    return (\\n      <React.Fragment>\\n        <h2>Login</h2>\\n        {error && error.response.data.error.statusCode === 404 && (\\n          <div className={\\"alert alert-danger\\"}>Email doesn\'t exist</div>\\n        )}\\n        {error && error.response.data.error.statusCode === 401 && (\\n          <div className={\\"alert alert-danger\\"}>Password is incorrect</div>\\n        )}\\n        {error && error.response.data.error.statusCode === 422 && (\\n          <div className={\\"alert alert-danger\\"}>\\n            Email or Password is invalid\\n          </div>\\n        )}\\n        <form name=\\"form\\" onSubmit={this.handleSubmit}>\\n          <div className=\\"form-group\\">\\n            <label htmlFor=\\"email\\">Email</label>\\n            <input\\n              type=\\"email\\"\\n              className=\\"form-control\\"\\n              name=\\"email\\"\\n              value={email}\\n              onChange={this.handleChange}\\n            />\\n          </div>\\n          {submitted && !email && (\\n            <div className=\\"alert alert-danger\\">Email is required</div>\\n          )}\\n          <div className=\\"form-group\\">\\n            <label htmlFor=\\"password\\">Password</label>\\n            <input\\n              type=\\"password\\"\\n              className=\\"form-control\\"\\n              name=\\"password\\"\\n              value={password}\\n              onChange={this.handleChange}\\n            />\\n          </div>\\n          {submitted && !password && (\\n            <div className=\\"alert alert-danger\\">Password is required</div>\\n          )}\\n          {submitted && shortPassword && (\\n            <div className=\\"alert alert-danger\\">\\n              Password too short - minimum length is 8 characters\\n            </div>\\n          )}\\n          <div className=\\"form-group\\">\\n            <button className=\\"btn btn-primary\\" disabled={loading}>\\n              Login\\n            </button>\\n          </div>\\n          <div>\\n            Don\'t have an account? <a href=\\"/signup\\"> SignUp!</a>\\n          </div>\\n        </form>\\n      </React.Fragment>\\n    );\\n  }\\n}\\nexport { Login };\\n```\\n\\nI have an input form to collect data from users and pass that data to back-end. After the user hit the `Login` button, this `handleSubmit` function will be called.\\n\\n```jsx\\nhandleSubmit = e => {\\n  e.preventDefault();\\n  const { email, password } = this.state;\\n  const { handelUserData } = this.props;\\n\\n  this.setState({ submitted: true });\\n  if (!(email && password)) {\\n    return;\\n  }\\n  if (password.length < 8) {\\n    this.setState({ shortPassword: true });\\n    return;\\n  }\\n\\n  this.setState({ loading: true, shortPassword: false });\\n  authenticationService.login(email, password, this).then(\\n    function() {\\n      if (!this.unmount) this.setState({ loading: false });\\n    }.bind(this)\\n  );\\n  handelUserData();\\n};\\n```\\n\\nIt basically validates all the user input and action. If everything looks good, it will pass the user\'s email and password to back-end, otherwise, it will tell the user there is something wrong.\\n\\nIt also uses `authenticationService` for login API call. We will talk about that later. The `Signup` page is almost the same. You can check my repo for more details.\\n\\n### HomePage\\n\\nAfter login, the user will be navigated to `HomePage`.\\n\\n```jsx\\nimport React, { Component } from \\"react\\";\\nimport { Display, InitCharacter } from \\"../components\\";\\nimport \\"./style.css\\";\\n\\nclass HomePage extends Component {\\n  componentDidMount() {\\n    const { handelUserData, data } = this.props;\\n    if (!data) this.props.history.push(\\"/login\\");\\n    handelUserData();\\n  }\\n\\n  render() {\\n    const { data, gear, currentUser, handelUserData } = this.props;\\n\\n    return (\\n      <React.Fragment>\\n        <div className=\\"basic\\">\\n          {data.name !== \\"nousername\\" && (\\n            <h2>\\n              LV.{data.level} {data.name}\\n            </h2>\\n          )}\\n          {data.name !== \\"nousername\\" && (\\n            <Display className=\\"basic\\" data={data} gear={gear} />\\n          )}\\n\\n          {data.name === \\"nousername\\" && (\\n            <InitCharacter\\n              className=\\"basic\\"\\n              currentUser={currentUser}\\n              data={data}\\n              handelUserData={handelUserData}\\n            />\\n          )}\\n        </div>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\\nexport { HomePage };\\n```\\n\\nWe have two children components in `HomePage`:\\n\\n- `InitCharacter` to create a new character if this is the user\'s first time login.\\n- `Display` to display the user\'s character information, if the user already has one.\\n\\n```jsx\\n{\\n  data.name !== \\"nousername\\" && (\\n    <Display className=\\"basic\\" data={data} gear={gear} />\\n  );\\n}\\n\\n{\\n  data.name === \\"nousername\\" && (\\n    <InitCharacter\\n      className=\\"basic\\"\\n      currentUser={currentUser}\\n      data={data}\\n      handelUserData={handelUserData}\\n    />\\n  );\\n}\\n```\\n\\nWe will store the user\'s information in the `state` of `App`. If the user doesn\'t have a character name, we will show `Display` component, otherwise, we will show `InitCharacter` component.\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part6/firstgame-frontend/src/containers) for the code of `containers`.\\n\\n### Components\\n\\nCreate a `component` folder in `src`. We will put all re-useable components here.\\n\\n#### InitCharacter\\n\\n![init](./images/building-online-game-pt6-init.jpg)\\n\\n```jsx\\nimport React, { Component } from \\"react\\";\\nimport { userService, gearList } from \\"../services\\";\\nimport \\"./style.css\\";\\n\\nclass InitCharacter extends Component {\\n  unmount = false;\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      name: \\"\\",\\n      error: null,\\n      submitted: false,\\n      loading: false,\\n      lastClick: null\\n    };\\n\\n    this.handleChange = this.handleChange.bind(this);\\n    this.handleSubmit = this.handleSubmit.bind(this);\\n  }\\n\\n  componentWillUnmount() {\\n    this.unmount = true;\\n  }\\n\\n  handleChange(e) {\\n    const { name, value } = e.target;\\n    this.setState({ [name]: value });\\n  }\\n\\n  handleSubmit = e => {\\n    e.preventDefault();\\n    const { name, lastClick } = this.state;\\n    const { currentUser, handelUserData } = this.props;\\n\\n    this.setState({ submitted: true });\\n    if (!name && !lastClick) {\\n      return;\\n    }\\n    this.setState({ loading: true });\\n\\n    let gear = {};\\n    switch (lastClick.id) {\\n      case \\"1\\":\\n        gear = {\\n          weapon: gearList.weapons.guideBookJunior,\\n          armor: gearList.armors.silkRobe,\\n          skill: gearList.skills.sacrifice\\n        };\\n        break;\\n      case \\"2\\":\\n        gear = {\\n          weapon: gearList.weapons.surgicalDagger,\\n          armor: gearList.armors.labCoat,\\n          skill: gearList.skills.bloodLetting\\n        };\\n        break;\\n      case \\"3\\":\\n        gear = {\\n          weapon: gearList.weapons.rustyShortSword,\\n          armor: gearList.armors.chainArmor,\\n          skill: gearList.skills.slap\\n        };\\n        break;\\n      default:\\n        break;\\n    }\\n\\n    userService.initCharacter(currentUser, name, gear, this).then(function() {\\n      handelUserData();\\n    });\\n  };\\n\\n  handelClick = e => {\\n    const { lastClick } = this.state;\\n    e.target.classList.toggle(\\"open\\");\\n    if (lastClick) lastClick.classList.toggle(\\"open\\");\\n    if (!this.unmount) this.setState({ lastClick: e.target });\\n  };\\n\\n  render() {\\n    const { name, submitted, loading } = this.state;\\n    return (\\n      <React.Fragment>\\n        <div className=\\"panels\\">\\n          <div id=\\"1\\" className=\\"panel panel1\\" onClick={this.handelClick}>\\n            <p className=\\"classes\\">Demon Scholar</p>\\n          </div>\\n          <div id=\\"2\\" className=\\"panel panel2\\" onClick={this.handelClick}>\\n            <p className=\\"classes\\">Plague Doctor</p>\\n          </div>\\n          <div id=\\"3\\" className=\\"panel panel3\\" onClick={this.handelClick}>\\n            <p className=\\"classes knight\\">Knight of Madness</p>\\n          </div>\\n        </div>\\n        <form name=\\"form\\" onSubmit={this.handleSubmit}>\\n          <div className=\\"form-group\\">\\n            <label className=\\"text\\" htmlFor=\\"name\\">\\n              Character Name\\n            </label>\\n            <input\\n              type=\\"name\\"\\n              className=\\"form-control\\"\\n              name=\\"name\\"\\n              value={name}\\n              onChange={this.handleChange}\\n            />\\n            {submitted && !name && (\\n              <div className=\\"alert alert-danger\\">\\n                Character name is required\\n              </div>\\n            )}\\n          </div>\\n          <div className=\\"form-group button\\">\\n            <button className=\\"btn btn-primary button\\" disabled={loading}>\\n              Start\\n            </button>\\n          </div>\\n        </form>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\\nexport { InitCharacter };\\n```\\n\\nI have three classes for a user to choose from. If the user clicks one of the classes, the `handelClick` function will store that one in `state`. Then we call `userService.initCharacter` to create a new character.\\n\\n#### Display\\n\\nIf the user has one character, we will jump to `Display` page to show all of the user information.\\n\\n![display](./images/building-online-game-pt6-display.jpg)\\n\\n```jsx\\nimport React, { Component } from \\"react\\";\\nimport { DropdownButton, Dropdown, Table } from \\"react-bootstrap\\";\\nimport \\"./style.css\\";\\n\\nclass Display extends Component {\\n  render() {\\n    const { data, gear } = this.props;\\n    return (\\n      <React.Fragment>\\n        <Table striped bordered hover variant=\\"dark\\">\\n          <tbody>\\n            <tr>\\n              <th>EXP</th>\\n              <th>\\n                {data.currentExp}/{data.nextLevelExp}\\n              </th>\\n            </tr>\\n            <tr>\\n              <th>HP</th>\\n              <th>\\n                {data.currentHealth}/{data.maxHealth}\\n              </th>\\n            </tr>\\n            <tr>\\n              <th>MP</th>\\n              <th>\\n                {data.currentMana}/{data.maxMana}\\n              </th>\\n            </tr>\\n            <tr>\\n              <th>Attack</th>\\n              <th>{data.attack}</th>\\n            </tr>\\n            <tr>\\n              <th>defence</th>\\n              <th>{data.defence}</th>\\n            </tr>\\n\\n            <tr>\\n              <th>\\n                <DropdownButton\\n                  title=\\"weapon\\"\\n                  variant=\\"danger\\"\\n                  id=\\"weapon\\"\\n                  key=\\"weapon\\"\\n                >\\n                  {gear[0] === \\"no weapon\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\"> {gear[0]}</Dropdown.Item>\\n                  )}\\n                  {gear[0] && gear[0] !== \\"no weapon\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">{gear[0].name} </Dropdown.Item>\\n                  )}\\n                  {gear[0] && gear[0] !== \\"no weapon\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Attack: {gear[0].attack}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                  {gear[0] && gear[0] !== \\"no weapon\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Defence: {gear[0].defence}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                </DropdownButton>\\n              </th>\\n\\n              <th>\\n                <DropdownButton\\n                  title=\\"armor\\"\\n                  variant=\\"primary\\"\\n                  id=\\"armor\\"\\n                  key=\\"armor\\"\\n                >\\n                  {gear[1] === \\"no armor\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\"> {gear[1]}</Dropdown.Item>\\n                  )}\\n                  {gear[1] && gear[1] !== \\"no armor\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">{gear[1].name} </Dropdown.Item>\\n                  )}\\n                  {gear[1] && gear[1] !== \\"no armor\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Attack: {gear[1].attack}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                  {gear[1] && gear[1] !== \\"no armor\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Defence: {gear[1].defence}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                </DropdownButton>\\n              </th>\\n\\n              <th>\\n                <DropdownButton\\n                  title=\\"skill\\"\\n                  variant=\\"success\\"\\n                  id=\\"skill\\"\\n                  key=\\"skill\\"\\n                >\\n                  {gear[2] === \\"no skill\\" && (\\n                    <Dropdown.Item eventKey=\\"2\\"> {gear[2]}</Dropdown.Item>\\n                  )}\\n                  {gear[2] && gear[2] !== \\"no skill\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">{gear[2].name} </Dropdown.Item>\\n                  )}\\n                  {gear[2] && gear[2] !== \\"no skill\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Attack: {gear[2].attack}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                  {gear[2] && gear[2] !== \\"no skill\\" && (\\n                    <Dropdown.Item eventKey=\\"1\\">\\n                      Cost: {gear[2].cost}{\\" \\"}\\n                    </Dropdown.Item>\\n                  )}\\n                </DropdownButton>\\n              </th>\\n            </tr>\\n          </tbody>\\n        </Table>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\\nexport { Display };\\n```\\n\\nIn `HomePage`, we passed `data` and `gear` to `Display` like this:\\n\\n```jsx\\n<Display className=\\"basic\\" data={data} gear={gear} />\\n```\\n\\nThen, in `Display`, we receive them by using `props`\\n\\n```jsx\\nconst { data, gear } = this.props;\\n```\\n\\nHere I use a library called `react-bootstrap` to decorate this component. Feel free to use anything you like. That is an advantage of React. You can use almost any library you want with React.\\n\\n### Services\\n\\nCreate `services` folder in `src`. Here is where all API calls happen.\\n\\n#### `authenticationService`\\n\\n`authenticationService` is for all authentication API calls.\\n\\n```jsx\\nimport { apiService } from \\"./APIServices\\";\\nexport const authenticationService = {\\n  login,\\n  signup,\\n  logout\\n};\\n\\nconst axios = require(\\"axios\\");\\n\\nfunction login(email, password, self) {\\n  const data = {\\n    email: email,\\n    password: password\\n  };\\n  const header = {\\n    \\"Content-Type\\": \\"application/json\\"\\n  };\\n  return axios\\n    .post(apiService.login, data, header)\\n    .then(function(response) {\\n      localStorage.setItem(\\"currentUser\\", response.data.token);\\n      self.props.history.push(\\"/\\");\\n    })\\n    .catch(function(error) {\\n      if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction signup(email, password, self) {\\n  const header = {\\n    \\"Content-Type\\": \\"application/json\\"\\n  };\\n  const data = {\\n    email: email,\\n    password: password,\\n    name: \\"nousername\\"\\n  };\\n  return axios\\n    .post(apiService.character, data, header)\\n    .then(function() {\\n      self.props.history.push(\\"/login\\");\\n    })\\n    .catch(function(error) {\\n      if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction logout() {\\n  console.log(\\"logout\\");\\n  localStorage.removeItem(\\"currentUser\\");\\n}\\n```\\n\\nWe are using a library called [axios](https://www.npmjs.com/package/axios) to do all API calls. The basic syntax is like this:\\n\\n```\\naxios.get/post/put/patch(<Your_URL>,<Your_body>,<your_header>)\\n```\\n\\nIn the login function:\\n\\n```jsx\\naxios\\n  .post(apiService.login, data, header)\\n  .then(function(response) {\\n    localStorage.setItem(\\"currentUser\\", response.data.token);\\n    self.props.history.push(\\"/\\");\\n  })\\n  .catch(function(error) {\\n    if (!self.unmount) self.setState({ error });\\n  });\\n```\\n\\nWe store the token in `localStorage`. Then we jump to the `HomePage`. `self.props.history.push(\\"/\\")` is how we navigate between different components by using `react-router-dom`.\\n\\n#### `userService`\\n\\n`userService` handles all API calls that related to users, like change name and fetch user data.\\n\\n```jsx\\nimport { authenticationService } from \\"./AuthServices\\";\\nimport { apiService } from \\"./APIServices\\";\\n\\nexport const userService = {\\n  getUserData,\\n  getGearData,\\n  changeCharacterName,\\n  initCharacter,\\n  changeWeapon,\\n  changeArmor,\\n  changeSkill\\n};\\n\\nconst axios = require(\\"axios\\");\\n\\nfunction getUserData(currentUser, self) {\\n  axios\\n    .get(apiService.character, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .then(function(response) {\\n      self.setState({ data: response.data });\\n    })\\n    .catch(function() {\\n      authenticationService.logout();\\n    });\\n}\\n\\nfunction getGearData(currentUser, self) {\\n  axios\\n    .get(apiService.updatecharacter, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .then(function(response) {\\n      self.setState({ gear: response.data });\\n    })\\n    .catch(function() {\\n      authenticationService.logout();\\n    });\\n}\\n\\nfunction changeCharacterName(currentUser, name, self) {\\n  const data = {\\n    name: name\\n  };\\n  axios\\n    .patch(apiService.changename, data, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .catch(function(error) {\\n      if (error.response && error.response.data.error.statusCode === 401)\\n        authenticationService.logout();\\n      else if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction initCharacter(currentUser, name, gear, self) {\\n  const data = {\\n    name: name,\\n    gear\\n  };\\n  return axios\\n    .patch(apiService.initCharacter, data, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .catch(function(error) {\\n      if (error.response && error.response.data.error.statusCode === 401)\\n        authenticationService.logout();\\n      else if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction changeWeapon(currentUser, gear, self) {\\n  axios\\n    .patch(apiService.updateweapon, gear.weapon, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .catch(function(error) {\\n      if (error.response && error.response.data.error.statusCode === 401)\\n        authenticationService.logout();\\n      else if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction changeArmor(currentUser, gear, self) {\\n  axios\\n    .patch(apiService.updatearmor, gear.armor, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .catch(function(error) {\\n      if (error.response && error.response.data.error.statusCode === 401)\\n        authenticationService.logout();\\n      else if (!self.unmount) self.setState({ error });\\n    });\\n}\\n\\nfunction changeSkill(currentUser, gear, self) {\\n  axios\\n    .patch(apiService.updateskill, gear.skill, {\\n      headers: { Authorization: `Bearer ${currentUser}` }\\n    })\\n    .catch(function(error) {\\n      if (error.response && error.response.data.error.statusCode === 401)\\n        authenticationService.logout();\\n      else if (!self.unmount) self.setState({ error });\\n    });\\n}\\n```\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part6/firstgame-frontend/src/services) for the code of `Services`.\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we covered how to create simple login, signup and home pages with React. We also learned how to connect front-end and back-end. React is the most popular front-end framework today. You can easily use it to create your own front-end UI. It doesn\'t have to be React and LoopBack. The basic idea is similar.\\n\\n### What\'s Next?\\n\\nNext time, we will extend our project on back-end APIs. So we can actually have something to play as a game.\\n\\nIn the meantime, learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"loopback4-interceptors-part2","metadata":{"permalink":"/blog/loopback4-interceptors-part2","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-08-14-learning-interceptor-part2.md","source":"@site/blog/2019/2019-08-14-learning-interceptor-part2.md","title":"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors","description":"Originally published on strongloop.com","date":"2019-08-14T00:00:00.000Z","formattedDate":"August 14, 2019","tags":[{"label":"learning","permalink":"/blog/tags/learning"},{"label":"interceptor","permalink":"/blog/tags/interceptor"}],"readingTime":4.11,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors","date":"2019-08-14T00:00:00.000Z","authors":"dhmlau","slug":"loopback4-interceptors-part2","tags":["learning","interceptor"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 - Front-end with React (Part 6)","permalink":"/blog/building-an-online-game-with-loopback-4-pt6"},"nextItem":{"title":"Congratulations to LoopBack, Winner of 2019 API Award for API Middleware","permalink":"/blog/loopback-2019-api-award-api-middleware"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n[Previously](https://strongloop.com/strongblog/loopback4-interceptors-part1/), we looked at how to add a global interceptor. In this article, we are going to build an application that validates the incoming request using class level and method level interceptors\xa0\\n\\nFor the complete application, you can go to this repo: https://github.com/dhmlau/loopback4-interceptors\\n\\n\x3c!--truncate--\x3e\\n\\n## Let\'s Build a Simple Order\xa0App\\n\\nIf you want to skip this part, you can check out the `orginal-app` branch of this github repo: https://github.com/dhmlau/loopback4-interceptors/tree/original-app.\\n\\nIf you want to follow along, take these steps.\\n\\n1. Scaffold the app by calling `lb4 app loopback4-interceptors --yes`\\n\\n2. In the newly created project, create a file called `order.json` with the following content:\\n\\n    ```json\\n    {\\n    \\"name\\": \\"Order\\",\\n    \\"base\\": \\"Entity\\",\\n    \\"properties\\": {\\n        \\"orderNum\\": {\\n            \\"type\\": \\"string\\",\\n            \\"id\\": true,\\n            \\"required\\": true\\n        },\\n        \\"customerNum\\": {\\n            \\"type\\": \\"string\\",\\n            \\"required\\": true\\n        },\\n        \\"customerEmail\\": {\\n            \\"type\\": \\"string\\",\\n            \\"required\\": true\\n        },\\n        \\"total\\": {\\n            \\"type\\": \\"number\\",\\n            \\"required\\": true\\n        }\\n    }\\n    }\\n    ```\\n\\n3. Create the Order model by providing the above json file. Run `lb4 model --config order.json --yes`\\n\\n4. Create a DataSource with the in-memory connector. Run `lb4 datasource ds`.  Then select \\"In-memory db\\" as the type of connector. \\n\\n5. Create a Repository and accept all defaults by running `lb4 repository` command.\\n\\n6. Finally, create a controller. Follow the prompts as below:\\n\\n```\\n$ lb4 controller\\n? Controller class name: Order\\nController Order will be created in src/controllers/order.controller.ts\\n? What kind of controller would you like to generate? REST Controller with CRUD functions\\n? What is the name of the model to use with this CRUD repository? Order\\n? What is the name of your CRUD repository? OrderRepository\\n? What is the type of your ID? string\\n? What is the base HTTP path name of the CRUD operations? /orders\\n\\n   create src/controllers/order.controller.ts\\n   update src/controllers/index.ts\\n\\nController Order was created in src/controllers/\\n```\\n\\nYou now have a LoopBack application ready to run.\\n\\n## Creating Interceptor Function for Validation\\n\\nWhat we\'re doing here is validating user inputs at the REST layer. Note that in real world, you should also consider validating data at the Repository level to ensure the validation is applied even when modifying data from places outside of controllers, e.g. tests or services running in background.\\n\\nFor the `POST /order` endpoint, we are going to validate the order before actually creating the order. The length of `orderNum` has to be 6, otherwise the order is not valid. \\n\\nLet\'s define the interceptor function in the `OrderController` class\xa0just before the class is defined.\xa0\\n\\nIn `src/controllers/order.controller.ts`:\xa0\\n\\n1. Add this statement:\\n    \\n    ```ts\\n    import {intercept, Interceptor} from \'@loopback/core\';\\n    ```\\n\\n2. Add the following function to validate order. \xa0\\n    \\n    ```ts\\n    const validateOrder: Interceptor = async (invocationCtx, next) => {\\n        console.log(\'log: before-\', invocationCtx.methodName);\\n        const order: Order = new Order();\\n        if (invocationCtx.methodName == \'create\')\\n            Object.assign(order, invocationCtx.args[0]);\\n        else if (invocationCtx.methodName == \'updateById\')\\n            Object.assign(order, invocationCtx.args[1]);\\n\\n        if (order.orderNum.length !== 6) {\\n            throw new HttpErrors.InternalServerError(\'Invalid order number\');\\n        }\\n       \\n        const result = await next();\\n        return result;\\n    };\\n    ```\\n\\n## Apply `@intercept` Decorator at the Method Level\\n\\nAfter defining the interceptor function, you can now use this as a method-level or class-level decorator. For class-level interceptor, you just apply it on the class, like this.\\n\\n```ts\\n@intercept(validateOrder)\\nexport class OrderController {\\n    //...\\n}\\n```\\n\\nHowever, we want the validation to run only when the order is being created, so the `@intercept` decorator will be applied at the method level. To do this, add the `@intercept` decorator on the method I want to intercept, i.e. the `POST` method:\\n\\n    ```ts\\n    @intercept(validateOrder) // <--- add here\\n    @post(\'/orders\', {\\n        responses: {\\n        \'200\': {\\n            description: \'Order model instance\',\\n            content: {\'application/json\': {schema: {\'x-ts-type\': Order}}},\\n        },\\n        },\\n    })\\n    async create(@requestBody() order: Order): Promise<Order> {\\n    ```\\n\\n## Let\'s Experiment!\xa0\\n\\nNow that the application is ready to go, start the app by running `npm start` command and go to the API Explorer: http://localhost:3000/explorer.\\n\\n### Calling `GET /orders/count`\\n\\nSince this method doesn\'t have the interceptor, when this endpoint is being called, there shouldn\'t be anything printed to the log.\xa0\\n\\n### Calling `POST /orders`\\n\\nThis is the method where the interceptor is applied to validate the order. Let\'s give it a try with a valid order.\\n\\n```\xa0\\n{\\n  \\"orderNum\\": \\"111111\\",\\n  \\"customerNum\\": \\"12345\\",\\n  \\"customerEmail\\": \\"aa@abc.com\\",\\n  \\"total\\": 100\\n}\\n```\\n\\nYou should expect to get the HTTP 200 response code that the order has been created successfully.\\n\\nNow try another order with `orderNum` is `11`. \\n\\n```\xa0\\n{\\n  \\"orderNum\\": \\"11\\",\\n  \\"customerNum\\": \\"67890\\",\\n  \\"customerEmail\\": \\"bb@abc.com\\",\\n  \\"total\\": 1000\\n}\\n```\\nYou should expect a HTTP 500 error with message saying \\"Internal Server Error\\".\\n\\n## Resources \\n\\n- [Interceptor docs page](https://loopback.io/doc/en/lb4/Interceptors.html)\\n- [Caching enabled via interceptors in Greeter application](https://github.com/strongloop/loopback-next/tree/master/examples/greeting-app)\\n- [Authorization added using interceptors in this tutorial](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/)\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-2019-api-award-api-middleware","metadata":{"permalink":"/blog/loopback-2019-api-award-api-middleware","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-08-08-loopback-2019-api-award-api-middleware.md","source":"@site/blog/2019/2019-08-08-loopback-2019-api-award-api-middleware.md","title":"Congratulations to LoopBack, Winner of 2019 API Award for API Middleware","description":"Originally published on strongloop.com","date":"2019-08-08T00:00:00.000Z","formattedDate":"August 8, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"event","permalink":"/blog/tags/event"}],"readingTime":2.96,"hasTruncateMarker":true,"authors":[{"name":"Dave Whiteley","title":"LoopBack Content Creator","url":"https://github.com/DaveYVR","imageURL":"https://avatars.githubusercontent.com/u/3076411","key":"dwhiteley"}],"frontMatter":{"title":"Congratulations to LoopBack, Winner of 2019 API Award for API Middleware","date":"2019-08-08T00:00:00.000Z","authors":"dwhiteley","slug":"loopback-2019-api-award-api-middleware","tags":["community","event"]},"prevItem":{"title":"Learning LoopBack 4 Interceptors (Part 2) - Method Level and Class Level Interceptors","permalink":"/blog/loopback4-interceptors-part2"},"nextItem":{"title":"LoopBack 4 July 2019 Milestone Update","permalink":"/blog/july-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWe\'re excited to congratulate the LoopBack team for earning the 2019 API Award for the \\"Best in API Middleware\\" category. [LoopBack](https://loopback.io/) is a highly extensible, open source Node.js framework based on Express that enables you to quickly create dynamic end-to-end REST APIs and connect to backend systems such as databases and SOAP or REST services.\\n\\nThe 2019 API Awards celebrate the technical innovation, adoption, and reception in the API & Microservices industries and use by a global developer community. The 2019 API Awards will be presented at the 2019 API Awards Ceremony during the first day of [API World 2019](https://apiworld.co/) (Oct 8-10, 2019, San Jose Convention Center), the world\u2019s largest API & Microservices conference & expo -- the largest event for the API economy -- in its 8th year, with over 3,500 attendees.\\n\x3c!--truncate--\x3e\\n\\n![2019 API Awards - Middleware](./images/API-Middleware.jpg)\\n\\nThe 2019 API Awards received hundreds of nominations, and the Advisory Board to the API Awards selected LoopBack based on three criteria: \\n\\n* attracting notable attention and awareness in the API industry\\n* general regard and use by the developer and engineering community\\n* being a leader in its sector for innovation\\n\\n> \\"IBM is a shining example of the API technologies now empowering developers & engineers to build upon the backbone of the multi-trillion-dollar market for API-driven products and services. Today\u2019s cloud-based software and hardware increasingly runs on an open ecosystem of API-centric architecture, and IBM\u2019s win here at the 2019 API Awards is evidence of their leading role in the growth of the API Economy,\u201d said Jonathan Pasky, Executive Producer & Co-Founder of DevNetwork, producer of API Word & the 2019 API Awards.\\n\\nThe LoopBack team is proud that all of their hard work on LoopBack is being recognized by the larger Node.js community.\\n\\n\\"We\'re thrilled and honored to receive the Best in API Middleware 2019 award from API World,\\" said Raymond Feng, co-creator and architect for LoopBack. \\"It\'s indeed a great recognition and validation of the LoopBack framework, team and community.\\"\\n\\nFeng continued, \\"Six and half years ago, the team created LoopBack at StrongLoop with the goal to help fellow developers kick off their API journey with the ideal Node.js platform. With the support of the fantastic Node.js ecosystem, the team built on top of open source modules such as Express and made it incredibly simple to create REST APIs out of existing datasources and services.\\"\\n\\n\\"The StrongLoop team\'s bet on open APIs and Node.js was right. The project and community have grown significantly.\\"\\n\\n\\"The StrongLoop team joined with IBM API Connect team in 2015 to better position LoopBack as a strategic open source project. LoopBack 4 is the second generation of the framework. Version 4 incorporates what the team has learned with new standards and technologies such as TypeScript, OpenAPI, GraphQL, and cloud-native microservices to build a foundation for even greater flexibility, extensibility, composablity, and scalability.\\"\\n \\n\\"More and more features are shipped and being built by us and the community. The LoopBack team strive to bring best practices and tools. We love Github stars. It\'s simply rewarding to create something valuable for the open source community!\\" concluded Feng.\\n\\nSee the official announcement and read about other winners [here](https://apiworld.co/2019-api-award-winners-announced/).\\n\\n## Call to Action\\n\\nYou can help shape the future of LoopBack with your support and engagement! You can help make LoopBack even better and meaningful for your API creation experience by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"july-2019-milestone","metadata":{"permalink":"/blog/july-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-08-07-july-milestone.md","source":"@site/blog/2019/2019-08-07-july-milestone.md","title":"LoopBack 4 July 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-08-07T00:00:00.000Z","formattedDate":"August 7, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":8.315,"hasTruncateMarker":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 July 2019 Milestone Update","date":"2019-08-07T00:00:00.000Z","authors":"agnes512","slug":"july-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"Congratulations to LoopBack, Winner of 2019 API Award for API Middleware","permalink":"/blog/loopback-2019-api-award-api-middleware"},"nextItem":{"title":"Learning LoopBack 4 Interceptors (Part 1) - Global Interceptors","permalink":"/blog/loopback4-interceptors-part1"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThis July 20th was the 50th anniversary of The Moon Landing and the famous quote, \\"That\'s one small step for man, one giant leap for mankind.\\" This great, memorable event reminds me that every task the LoopBack team finishes will end up enhancing our project. From starting to build new features such as `inclusion`, to enriching the documentation, we believe that we are making LoopBack better by taking all these small steps!\\n\\nWe finished up 85 story points this month. See the [July milestone](https://github.com/strongloop/loopback-next/issues/3241) for an overview of what we have worked on, and read on for more details.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improvements of Developer Experience \\n\\n### Improvement of @loopback/cli\\n\\n- The original CLI version is now stored in the ` .yo.rc.json` file. This allows users to check the version of CLI when upgrading their dependencies. See [PR #3338](https://github.com/strongloop/loopback-next/pull/3338) for details.\\n\\n- We refactored the way that the property generator is invoked in the model generator. Now when generating a new model, the loop prompts for adding properties are more robust. See [PR #412](https://github.com/strongloop/generator-loopback/pull/412) for more information. \\n\\n- For the CLI `lb4 app` can now handle a hyphened path and will generate default names properly. See [PR #2092](https://github.com/strongloop/loopback-next/issues/2092) for more details.\\n\\n### New Features in @loopback/context\\n\\n#### `@config` Decorator\\n\\nIn [PR #3329](https://github.com/strongloop/loopback-next/pull/3329), we introduce new config metadata, which allows `@config.*` to be resolved from a binding other than the current one. For example, before we could inject `@config` this way:\\n\\n```ts\\nexport class MyRestServer {\\n  constructor(\\n    // injects `RestServerConfig.port` to the target\\n    @config(\'host\')\\n    host: string,\\n  )\\n  //...\\n}\\n```\\n\\nNow this kind of injection can be done this way:\\n\\n```ts\\nexport class MyRestServer {\\n  constructor(\\n    // Inject the `rest.host` from the application config\\n    @config({fromBinding: \'application\', propertyPath: \'rest.host\'})\\n    host: string,\\n  )\\n}\\n```\\n\\n#### Parameter Injection\\n\\nThe module `Context` didn\'t use the invocation context to resolve parameter injection. This might limit some use cases such as `@inceptors` which couldn\'t rebind new values. With this implementation, you can use `options.skipParameterInjection` to resolve parameter injection.\\n\\n### New Options for JSON Schema Generation\\n\\nWe enabled the `exclude` and `optional` options to `JsonSchemaOptions`.\\n\\n#### Exclude\\n\\nThe `exclude` option takes in an array of model properties which you can exclude from your `requestBody`. For example, you can exclude the `id` property from the body of a `POST` request:\\n\\n`POST /todos`\\n\\n```ts\\nasync create(\\n  @requestBody({\\n    content: {\\n      \'application/json\': {\\n        schema: getModelSchemaRef(Note, {exclude: [\'id\']}),\\n      },\\n    },\\n  })\\n  note: Omit<Note, \'id\'>,\\n): Promise<Note> {\\n  // ...\\n}\\n```\\n\\nAny new generated controllers scaffolded by `lb4 controller` will have the `id` property excluded by default. See [PR #3297](https://github.com/strongloop/loopback-next/pull/3297/) for details.\\n\\nWe also added support for excluding a custom primary key name (not the default `id`) in [PR #3347](https://github.com/strongloop/loopback-next/pull/3347).\\n\\n#### Optional\\n\\nThe `optional` option takes in an array of model properties which you can mark optional in your `requestBody`. For example, you can mark the foreign key property from the body of a `POST` request as optional:\\n\\n`POST /todo-lists/{id}/todos`\\n\\n```ts\\nasync create(\\n  @param.path.number(\'id\') id: number,\\n  @requestBody({\\n    content: {\\n      \'application/json\': {\\n        schema: getModelSchemaRef(Todo, {\\n          exclude: [\'id\'],\\n          optional: [\'todoListId\'],\\n        }),\\n      },\\n    },\\n  })\\n  todo: Omit<Todo, \'id\'>,\\n): Promise<Todo> {\\n  // ...\\n}\\n```\\n\\nIf this option is set and is not empty, it will override the `partial` option. See [PR #3309](https://github.com/strongloop/loopback-next/pull/3309) for details.\\n\\n### Simplifying @requestBody\\n\\nThe current `@requestBody()` only takes in an entire request body (with very nested content object) or infers the schema from the parameter type. To simplify the signature so that users can describe the schema with concise configure options, we explored a new signature in a [spike story](https://github.com/strongloop/loopback-next/issues/2654): `@requestBody(spec, model, schemaOptions)`. Most of the discussions are tracked in [PR #3398](https://github.com/strongloop/loopback-next/pull/3398), and additional opinions and feedback are welcomed before we start implementing the simplified decorator.\\n\\n### Adding Cloud Native Features\\n\\nTo provide observability for LoopBack 4 applications deployed to a cloud environment, we start to add more integrations to expose health, metrics, and distributed tracing data. These packages are positioned as extensions to the framework.\\n\\nThe [Health extension](https://github.com/strongloop/loopback-next/tree/master/extensions/health) has been released as an experimental feature. Two more PRs are up for review:\\n\\n- Metrics extension for [Prometheus](https://prometheus.io/)\\n  - [strongloop/loopback-next#3339](https://github.com/strongloop/loopback-next/pull/3339)\\n- OpenTracing extension based on [Jaeger](https://www.jaegertracing.io/)\\n  - [strongloop/loopback-next#3389](https://github.com/strongloop/loopback-next/pull/3389)\\n\\n## Documentation Improvements\\n\\n### More Detailed Content for `@model` and `@property` Decorators\\n\\nAs we always try to beef up the documentation for LB4, this month we improved docs of the decorators [`@model`](https://loopback.io/doc/en/lb4/Model.html#model-decorator) and [`@property`](https://loopback.io/doc/en/lb4/Model.html#property-decorator). Before we were simply using docs from LB3 site. However, since the implementation structures are different for LB3 and LB4, some parts of the docs are not precise or correct for LB4. We updated the documentation with more details and pointed out the differences between LB3 and LB4. We also added more links so that users can find more references and join the dicussion on GitHub with us. More details are in [PR #3354](https://github.com/strongloop/loopback-next/pull/3354).\\n\\n### Supporting and Documenting Transactions\\n\\nWe also worked on bridging the gap between LoopBack 3 and 4 in terms of exposing transactions from repositories in [PR #3397](https://github.com/strongloop/loopback-next/pull/3397). We\'ve introduced sugar API `beginTransaction()`\\nat the repository level, which delegates work to the data source that belongs to it to start a transaction. \\n\\nWith it, we\'ve created `TransactionalRepository` interface that is meant to be used with connectors that support transactions and `DefaultTransactionalRepository` which can be used for CRUD repositories that support transactions. Once a transaction object is obtained from `beginTransaction()`, it can be passed into any CRUD calls made for the models attached to the backing datasource. The user can then either call `commit()` or `rollback()` actions for the transaction object to persist or revert the changes made. \\n\\nNote that only select SQL connectors support transactions to use this feature. For more information, check out the [documentation](https://loopback.io/doc/en/lb4/Using-database-transactions.html).\\n\\n### Connector Reference\\n\\n[Connector reference](https://loopback.io/doc/en/lb3/Connectors-reference.html) pages that were missing in the LoopBack 4 docs have been added now. Check [issue #2598](https://github.com/strongloop/loopback-next/issues/2598) for more details.  \\n\\n## Code Base Improvements\\n\\n### Running Shared Tests in Connectors\\n\\nThis month we continued refactoring the tests for `mysql`, `mssql`, and `oracle` connectors in LoopBack 3 so that they can run the imported juggler tests in both 3.x and 4.x versions. Now our `mongodb`, `postgresql`, `kv-redis`, `cloudant`, `mysql`, `mssql`, and `oracle` connectors run shared tests. \\n\\n- For `mysql`, see [PR #390](https://github.com/strongloop/loopback-connector-mysql/pull/390).\\n- For `mssql`, see [PR #205](https://github.com/strongloop/loopback-connector-mssql/pull/205).\\n- For `oracle`, see [PR #180](https://github.com/strongloop/loopback-connector-oracle/pull/180).\\n\\n### Fixing CI Failures\\n\\n- For `dashdb` see [PR #81](https://github.com/strongloop/loopback-connector-dashdb/pull/81) and [PR #82](https://github.com/strongloop/loopback-connector-dashdb/pull/82)\\n- For `db2` see [PR #135](https://github.com/strongloop/loopback-connector-db2/pull/135)\\n\\n## Other Changes\\n\\n- We updated our templates and existing examples to leverage `getModelSchemaRef` in [PR #3402](https://github.com/strongloop/loopback-next/pull/3402).\\n\\n- We updated our `oracle` connector to `oracledb` v4.0.0 in [PR #186](https://github.com/strongloop/loopback-connector-oracle/pull/186).\\n\\n- We tested/enabled Node.js 12 for some of our connectors. \\n  - For SQL connectors, see the PRs in [issue #3110](https://github.com/strongloop/loopback-next/issues/3110).\\n  - For NoSQL connectors, see the PRs in [issue #3111](https://github.com/strongloop/loopback-next/issues/3111).\\n  - For service connectors, see the PRs in [issue #3112](https://github.com/strongloop/loopback-next/issues/3112).\\n\\n- We fixed an edge case where `replaceById` was not working for MongoDB database when the data came from the REST API layer. Check [issue #3431](https://github.com/strongloop/loopback-next/pull/3431) and [issue #1759](https://github.com/strongloop/loopback-datasource-juggler/pull/1759) for more details.\\n\\n- We removed the source code of `@loopback/openapi-v3-types` package from our monorepo. This package was deprecated last month in favor of [`openapi3-ts`](https://www.npmjs.com/package/openapi3-ts) and [`@loopback/openapi-v3`](https://www.npmjs.com/package/@loopback/openapi-v3). Check [PR #3385](https://github.com/strongloop/loopback-next/pull/3385) for more details.\\n\\n- We fixed automigrate & autoupdate to wait until the datasource is connected to the database. This addressed a bug in the npm script `migrate` (scaffolded by `lb4 app`), where errors thrown by the database migration were not caught correctly and thus the script did not indicate the failure via a non-zero exit code. Check [issue #1756](https://github.com/strongloop/loopback-datasource-juggler/pull/1756) for more details.\\n\\n- We improved the type definition of `toJSON` helper from `@loopback/testlab` to better support union types like `MyModel | null` (e.g. as returned by Repository `findOne` method). Check [PR #3823](https://github.com/strongloop/loopback-next/pull/3283) for more details.\\n\\n- We fixed REST API to better handle the case where a custom `basePath` is configured via `app.basePath()` API. As a result, the `server` entry in OpenAPI spec now correctly includes the configured base path again. Check [PR #3266](https://github.com/strongloop/loopback-next/pull/3266) for more details.\\n\\n- We fixed a MongoDB connector bug which caused the id from the input data object to be deleted. See [issue #3267](https://github.com/strongloop/loopback-next/issues/3267) for more details.\\n\\n## New Feature On The Way - Inclusion of Related Models\\n\\nAfter many weeks in making, Miroslav finally finished researching how to resolve included models when querying datasources. This concluded the spike [issue #2634](https://github.com/strongloop/loopback-next/issues/2634).\\n\\nThe essence:\\n\\n- We will introduce a concept of `InclusionResolver` functions. These functions implement the logic for fetching related models.\\n- Base repository classes (e.g. `DefaultCrudRepository`) will handle inclusions by calling resolvers registered for individual relations.\\n- Model-specific repositories (e.g. `TodoRepository` scaffolded in your project) will register inclusion resolvers for relations that are allowed to be traversed.\\n- LoopBack will provide built-in inclusion resolvers for each relation type we implement (`hasMany`, `belongsTo`, `hasOne` at the time of writing).\\n\\nThe [spike PR #3387](https://github.com/strongloop/loopback-next/pull/3387) shows a proof-of-concept implementation and includes high-level description of the proposed design in the [SPIKE document](https://github.com/strongloop/loopback-next/blob/spike/resolve-included-models/_SPIKE_.md), where you can find more details.\\n\\n## Team Changes\\n\\nOur LoopBack core maintainer [Biniam](https://github.com/b-admike) is leaving to join the [API Connect](https://www.ibm.com/ca-en/marketplace/api-management) team. His hard work and dedication were an important part of our team. We appreciate the inspiration he gave us and all the contributions he\'s made. We believe that he will do an outstanding job in the next phase of his career! \\n\\n## Looking for User References\\n\\nWe have updated our [loopback.io](https://loopback.io/) website with our users and their testimonials. If you would like to be a part of it, see the details in this [GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [August milestone](https://github.com/strongloop/loopback-next/issues/3482).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback4-interceptors-part1","metadata":{"permalink":"/blog/loopback4-interceptors-part1","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-07-31-learning-interceptor-part1.md","source":"@site/blog/2019/2019-07-31-learning-interceptor-part1.md","title":"Learning LoopBack 4 Interceptors (Part 1) - Global Interceptors","description":"Originally published on strongloop.com","date":"2019-07-31T00:00:00.000Z","formattedDate":"July 31, 2019","tags":[{"label":"learning","permalink":"/blog/tags/learning"},{"label":"interceptor","permalink":"/blog/tags/interceptor"}],"readingTime":3.255,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Learning LoopBack 4 Interceptors (Part 1) - Global Interceptors","date":"2019-07-31T00:00:00.000Z","authors":"dhmlau","slug":"loopback4-interceptors-part1","tags":["learning","interceptor"]},"prevItem":{"title":"LoopBack 4 July 2019 Milestone Update","permalink":"/blog/july-2019-milestone"},"nextItem":{"title":"Building an Online Game With LoopBack 4 - Deploying our Application to Kubernetes on IBM Cloud (Part 5)","permalink":"/blog/building-an-online-game-with-loopback-4-pt5"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWondering what an interceptor is in LoopBack 4?\xa0\\n\\n> Interceptors are reusable functions to provide aspect-oriented logic around method invocations.\xa0\\n\\nSeems pretty useful, right? There are 3 levels of interceptors: global, class level and method level. In this article, we are going to look into what a global interceptor is and how to use it. \\n\\n\x3c!--truncate--\x3e\\n\\nGlobal interceptors are automatically called for all controller methods. They are called first, before interceptors specified at class and method level. You can insert additional logic before and after method invocation through [interceptors](https://loopback.io/doc/en/lb4/Interceptors.html). Examples of using global interceptors are [caching](https://github.com/strongloop/loopback-next/tree/master/examples/greeting-app) and [authorization](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/).\\n\\nFor the sake of illustration, we\'ll use global interceptors for logging purposes using the default `/ping` endpoint that comes with all scaffolded LB4 application. Note that interceptors are not the best tool for logging. It\'s usually better to implement logging as a new sequence action, as we demonstrate in our [log extension example](https://github.com/strongloop/loopback-next/tree/master/examples/log-extension).\\n\\n## Creating a Global Interceptor\\n\\nAfter you\'ve scaffolded the application, run `lb4 interceptor` command to create an interceptor. Since we are going to have one global interceptor, leave the `group name for the global interceptor` as an empty string which is the default value.\\n\\n```\\n$ lb4 interceptor\\n? Interceptor name: logging\\n? Is it a global interceptor? Yes\\n\\nGlobal interceptors are sorted by the order of an array of group names bound\\nto ContextBindings.GLOBAL_INTERCEPTOR_ORDERED_GROUPS. See \\nhttps://loopback.io/doc/en/lb4/Interceptors.html#order-of-invocation-for-interceptors.\\n\\n? Group name for the global interceptor: (\'\')\\n\\ncreate src/interceptors/logging.interceptor.ts\\nupdate src/interceptors/index.ts\\n\\nInterceptor Logging was created in src/interceptors/\\n```\\n\\n## Adding Logic to the Logging Interceptor\\n\\nLet\'s take a look at the generated interceptor. \\n\\nGo to `src/interceptors/logging.interceptor.ts`. You\'ll see two comments in the try-catch block where you can add your logic: pre-invocation and post-invocation.\xa0We are going to simply print out the method name of the invocationContext before and after the method is being invoked.\\n\\n```\\ntry {\\n  // Add pre-invocation logic here\\n  // ----- ADDED THIS LINE ----\\n  console.log(\'log: before-\' + invocationCtx.targetName);\\n  \\n  const result = await next();\\n\\n  // Add post-invocation logic here\\n  // ----- ADDED THIS LINE -----\\n  console.log(\'log: after-\' + invocationCtx.targetName);\\n\\n  return result;\\n} catch (err) {\\n  // Add error handling logic here\\n  console.error(err);\\n  throw err;\\n}\\n```\\n\\n## Global Interceptor in\xa0Action\\n\\nThat\'s it! The global interceptor is ready for action. \\n\\nStart the application with `npm start` command. Then go to the API Explorer: http://localhost:3000/explorer.\\n\\nYou\'ll now see the following printed to the console:\\n\\n```\\nlog: before-ExplorerController.prototype.index\\nlog: after-ExplorerController.prototype.index\\n```\\n\\nNext, call the `/ping` endpoint by clicking \\"Try it Out\\" > \\"Execute\\". You\'ll see two more lines got printed:\\n\\n```\\nlog: before-PingController.prototype.ping\\nlog: after-PingController.prototype.ping\\n```\\n\\nThe interceptor method was called because it is at the global level.\xa0\\n\\n## Getting HttpRequest from InvocationContext\\n\\nFor more meaningful log messages, you might want to get more information about the HTTP request. To do that, add this import in the interceptor class:\\n\\n```\\nimport {RestBindings} from \'@loopback/rest\';\\n```\\n\\nWe\'re going to print out the endpoint being called. To do that, add the snippet below as the pre-invocation logic:\\n\\n```\\nconst httpReq = await invocationCtx.get(RestBindings.Http.REQUEST, {optional: true,});\\nif (httpReq) {\\n  console.log(\'Endpoint being called:\', httpReq.path);\\n}\\n```\\n\\nRestart the application, go to API Explorer and call the `/ping` endpoint again. You\'ll see the following printed to the console log:\\n\\n```\\nlog: before-ExplorerController.prototype.index\\nEndpoint being called: /explorer/\\nlog: after-ExplorerController.prototype.index\\nlog: before-PingController.prototype.ping\\nEndpoint being called: /ping\\nlog: after-PingController.prototype.ping\\n```\\n\\n## Other Resources\\n\\nFor other interceptor examples, check out: https://loopback.io/doc/en/lb4/Interceptors.html#example-interceptors\\n\\nFor running applications that use interceptors, see:\\n\\n- Caching enabled via interceptors in Greeter application, https://github.com/strongloop/loopback-next/tree/master/examples/greeting-app\\n- Authorization added using interceptors in this tutorial, https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/\\n\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"building-an-online-game-with-loopback-4-pt5","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt5","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-07-24-building-an-online-game-with-loopback-4-pt5.md","source":"@site/blog/2019/2019-07-24-building-an-online-game-with-loopback-4-pt5.md","title":"Building an Online Game With LoopBack 4 - Deploying our Application to Kubernetes on IBM Cloud (Part 5)","description":"Originally published on strongloop.com","date":"2019-07-24T00:00:00.000Z","formattedDate":"July 24, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":8.805,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 - Deploying our Application to Kubernetes on IBM Cloud (Part 5)","date":"2019-07-24T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt5","tags":["how-to"]},"prevItem":{"title":"Learning LoopBack 4 Interceptors (Part 1) - Global Interceptors","permalink":"/blog/loopback4-interceptors-part1"},"nextItem":{"title":"LoopBack 4 2019 Q2 Overview","permalink":"/blog/loopback-4-2019-q2-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 5: Deploying our Application to Kubernetes on IBM Cloud\\n\\n### In This Episode\\n\\nNow that our project has basic features that allow us to create our own characters and log in, it\'s time to deploy it to cloud! So, we will first run our project in Docker and then push it to Kubernetes cluster on IBM Cloud.\\n\\nDocker images are lightweight, portable, and self-sufficient. Once you create a Docker image, you can run it almost everywhere. On the other hand, Kubernetes will handle those high level concepts such as storage, network and scale-up.\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part5/firstgame) for the code from this episode.\\n\\n\x3c!--truncate--\x3e\\n\\n### Introduction\\n\\nIn this series, I\u2019m going to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\u2019ll create a new project I\u2019ve been thinking about: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game also allows multiple players to log in and play with their friends.\\n\\n### Previously on Building an Online Game With LoopBack 4\\n\\nIn last episode, we covered how to combine your self-defined authorization strategies and services with `@loopback/authentication` and how to apply it to your API.\\n\\nHere are the previous episodes:\\n\\n* [Part 1: Building a Simple LoopBack Project With MongoDB](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/)\\n* [Part 2: Generating Universally Unique ID and Managing Models Relationships](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt2/)\\n* [Part 3: Customizing APIs in Controller](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt3/)\\n* [Part 4: User Authentication and Role-Based Access Control](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/)\\n\\n### Prerequisites\\n\\n* [Docker](https://www.docker.com/)\\n* [Kubernetes](https://kubernetes.io/)\\n* Sign up for [IBM Cloud](https://www.ibm.com/cloud/)\\n\\nYou don\'t have to fully understand those concepts before we start. I will show you how to use them step by step.\\n\\n[The Illustrated Children\'s Guide to Kubernetes](https://www.youtube.com/watch?v=4ht22ReBjno) is a wonderful video on YouTube that can give you a clear idea of what is Kubernetes.\\n\\n[Deploying to Kubernetes on IBM Cloud](https://loopback.io/doc/en/lb4/deploying_to_ibm_cloud_kubernetes.html#prerequisite) is a tutorial on the official LoopBack 4 website. Because our project is a bit different and uses MongoDB, we need to set up MongoDB on cloud and connect our project to it.\\n\\n### Adding Docker Feature\\n\\nIn [Episode 1](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/), we disabled Docker when we created our project. Now we need to manually add the Docker feature.\\n\\nIn your project root, create a file called `Dockerfile`.\\n\\n```\\n# Check out https://hub.docker.com/_/node to select a new base image\\nFROM node:10-slim\\n\\n# Set to a non-root built-in user `node`\\nUSER node\\n\\n# Create app directory (with user `node`)\\nRUN mkdir -p /home/node/app\\n\\nWORKDIR /home/node/app\\n\\n# Install app dependencies\\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\\n# where available (npm@5+)\\nCOPY --chown=node package*.json ./\\n\\nRUN npm install\\n\\n# Bundle app source code\\nCOPY --chown=node . .\\n\\nRUN npm run build\\n\\n# Bind to all network interfaces so that it can be mapped to the host OS\\nENV HOST=0.0.0.0 PORT=3000\\n\\nEXPOSE ${PORT}\\nCMD [ \\"node\\", \\".\\" ]\\n```\\n\\nThen create a file called `.dockerignore`.\\n\\n```\\nnode_modules\\nnpm-debug.log\\n/dist\\n```\\n\\n`Dockerfile` and`.dockerignore` are two Docker-related files that are provided by LoopBack 4. We will use them to create a Docker image.\\n\\nOpen `package.json`, add two lines under `scripts`. Those are the commands to build and run Docker image.\\n\\n```\\n\\"docker:build\\": \\"docker build -t firstgame .\\",\\n\\"docker:run\\": \\"docker run -p 3000:3000 -d firstgame\\",\\n```\\n\\n### Building Docker Image\\n\\nInstall [Docker](https://www.docker.com/get-started) if you haven\'t already.\\n\\nRun this command to create Docker image.\\n\\n```\\nnpm run docker:build\\n```\\n\\nIf it succeeds, you will see:\\n\\n```\\nSuccessfully built 0b2c1ff52a2e\\nSuccessfully tagged firstgame:latest\\n```\\n\\nRun this command to show all images:\\n\\n```\\ndocker image ls\\n```\\n\\nYou should see two images like this:\\n\\n```\\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\\nfirstgame           latest              0b2c1ff52a2e        44 seconds ago       430MB\\nnode                10-slim             a41b78200d6f        6 days ago           148MB\\n```\\n\\nNow, our image is ready to run. Run this command to create a container. A container is a running instance of an image.\\n\\n```\\nnpm run docker:run\\n```\\n\\nRun this command to show all running containers.\\n\\n```\\ndocker ps\\n```\\n\\nYou will see:\\n\\n```\\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES\\n88cc8acfbeea        firstgame           \\"node .\\"            5 minutes ago       Up 5 minutes        0.0.0.0:3000->3000/tcp   friendly_archimedes\\n```\\n\\nBecause we didn\'t specify container\'s name, Docker randomly assigned one for it.\\n\\nRun this command to see the log output of your container. Replace `<container id>` with your container id. In my case, it is `88cc8acfbeea`.\\n\\n```\\ndocker logs <container id>\\n```\\n\\nYou should see something like this:\\n\\n```\\nServer is running at http://127.0.0.1:3000\\nTry http://127.0.0.1:3000/ping\\n```\\n\\nNow, you should be able to open the API explorer: http://127.0.0.1:3000/explorer/\\n\\nIf everything is fine, run this command to stop the image.\\n\\n```\\ndocker stop <container id>\\n```\\n\\nWe are now ready to push our Docker image to cloud.\\n\\n### Pushing Docker image to IBM Cloud.\\n\\nSign up for [IBM Cloud](https://cloud.ibm.com/login) and install [IBM Cloud CLI](https://cloud.ibm.com/docs/cli/reference/ibmcloud?topic=cloud-cli-ibmcloud-cli#ibmcloud-cli).\\n\\nRun this command to login IBM Cloud.\\n\\n```\\nibmcloud login\\n```\\n\\nIf you are using a federated IBM ID, use this command instead: \\n\\n```\\nibmcloud login -sso\\n```\\n\\nIf you logged in successfully, you will see something like:\\n\\n```\\nAPI endpoint:      https://cloud.ibm.com\\nRegion:            us-east\\nUser:              wenbo.sun@ibm.com\\nAccount:           IBM (114e44f826b74008a2afbf099e6b3561)\\nResource group:    Default\\nCF API endpoint:\\nOrg:\\nSpace:\\n```\\n\\nLog in to IBM Cloud Container Registry. This is where we store our Docker image.\\n\\n```\\nibmcloud cr login\\n```\\n\\nIf this succeeds, you will see something like:\\n\\n```\\nLogging in to \'us.icr.io\'...\\nLogged in to \'us.icr.io\'.\\n```\\n\\nThis is the container registry region you logged into.\\n\\nAfter we log in, let\'s create a new namespace for our project.\\n\\n```\\nibmcloud cr namespace-add my-lb4-namespace\\n```\\n\\nYou can run `ibmcloud cr namespace-list` to show all of your namespaces.\\n\\nRun this command to tag the local docker image with the IBM Cloud container registry.\\n\\n```\\ndocker tag <image_name>:<tag> <container_registry_region>/<my_namespace>/<new_image_repo>:<new_tag>\\n```\\n\\nIn my case, this command will look like this:\\n\\n```\\ndocker tag firstgame:latest us.icr.io/my-lb4-namespace/firstgame-repo:1.0\\n```\\n\\nThen push the local image to the container registry.\\n\\n```\\ndocker push us.icr.io/my-lb4-namespace/firstgame-repo:1.0\\n```\\n\\nYou will see something like this:\\n\\n```\\nThe push refers to repository [us.icr.io/my-lb4-namespace/firstgame-repo]\\n8f77245a867e: Pushed\\nf3f824dbea6d: Pushed\\n637a53e1e6ed: Pushing [==============================>                    ]  144.1MB/236.6MB\\n69d1baa1ae3c: Pushed\\n30cea096009e: Pushed\\n344e2d688289: Pushed\\n61cb38befba5: Pushed\\naa5a12ea4279: Pushed\\n6270adb5794c: Pushed\\n```\\n\\nWhen it is done, run the following command to show images on your container registry.\\n\\n```\\nibmcloud cr image-list\\n```\\n\\nYou should see this:\\n\\n```\\nREPOSITORY                                     TAG   DIGEST         NAMESPACE             CREATED      SIZE     SECURITY STATUS\\nus.icr.io/my-lb4-namespace/firstgame-repo      1.0   3c853b97ffec   my-lb4-namespace      1 hour ago   144 MB   No Issues\\n```\\n\\nThe `SECURITY STATUS` shows `No Issues`. If you get issues here, you may want to check [Managing image security with Vulnerability Advisor](https://cloud.ibm.com/docs/services/va?topic=va-va_index#va_index) for more related information.\\n\\nLastly, run this command to build Docker image on the container registry. Don\'t forget the ` .` at the end.\\n\\n```\\nibmcloud cr build -t us.icr.io/my-lb4-namespace/firstgame-repo:1.0 .\\n```\\n\\n### Creating Kubernetes Cluster\\n\\nIf you don\'t have a Kubernetes Cluster yet, login to your IBM Cloud in browser and go to https://cloud.ibm.com/kubernetes/catalog/cluster/create to create a free cluster. It may take a while.\\n\\nWhen it is done, run this command to point to Kubernetes cluster. My cluster name is `firstgame-cluster`.\\n\\n```\\nibmcloud cs cluster-config <Cluster Name>\\n```\\n\\nYou will see something like this. Copy and run the last line.\\n\\n```\\nOK\\nThe configuration for firstgame-cluster was downloaded successfully.\\n\\nExport environment variables to start using Kubernetes.\\n\\nexport KUBECONFIG=/Users/xiaocase/.bluemix/plugins/container-service/clusters/firstgame-cluster/kube-config-hou02-firstgame-cluster.yml\\n```\\n\\nRun this command to verify your cluster.\\n\\n```\\nkubectl get nodes\\n```\\n\\nYou should see something like this.\\n\\n```\\nNAME          STATUS    ROLES     AGE       VERSION\\n10.47.84.60   Ready     <none>    5d        v1.13.6+IKS\\n```\\n\\nNow your cluster is ready to use.\\n\\n### Setting up MongoDB and Deploying our Project to Kubernetes\\n\\nBecause our project is using MongoDB, we need to set up a MongoDB container and our project container in one Kubernetes [pod](https://kubernetes.io/docs/concepts/workloads/pods/pod/). A Kubernetes pod is a group of one or more containers. Containers in the same pod will share storage and network.\\n\\nLet\'s first create a file called `first-game.yaml` in our project root. We will use this `yaml` file to specify containers and pod. Check [here](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) for more information about Kubernetes `yaml` file.\\n\\n```yaml\\napiVersion: extensions/v1beta1\\nkind: Deployment\\nmetadata:\\n  name: firstgame\\nspec:\\n  replicas: 1\\n  template:\\n    metadata:\\n      labels:\\n        run: firstgame\\n    spec:\\n      containers:\\n        - name: fg\\n          image: us.icr.io/my-lb4-namespace/firstgame-repo:1.0\\n          ports:\\n            - containerPort: 3000\\n        - name: db\\n          image: mongo\\n          ports:\\n            - containerPort: 27017\\n```\\n\\nAs you can see, we have two containers. `fg` is for our project. `db` is for MongoDB. They will be running in the same pod so they can share network and talk to each other.\\n\\nRun this command to use the `yaml` file to create containers and pod:\\n\\n```\\nkubectl create -f first-game.yaml\\n```\\n\\nYou will see something like this.\\n\\n```\\ndeployment.extensions \\"firstgame\\" deleted\\nwenbo:firstgame wenbo$ kubectl create -f first-game.yaml\\ndeployment.extensions \\"firstgame\\" created\\n```\\n\\nRun this command to verify our pod is running:\\n\\n```\\nkubectl get pods\\n```\\n\\nIf succeeds, you will see this. The `2/2` means there are two containers running in this pod.\\n\\n```\\nNAME                         READY     STATUS    RESTARTS   AGE\\nfirstgame-85ccbd5496-6nmvt   2/2       Running   0          1m\\n```\\n\\nNow our application is running on Kubernetes. The next step is to expose it to the public.\\n\\n```\\nkubectl expose deployment firstgame --type=NodePort --port=3000 --name=firstgame-service --target-port=3000\\n```\\n\\nYou should see this.\\n\\n```\\nservice \\"firstgame-service\\" exposed\\n```\\n\\nRun this command to get NodePort for this service.\\n\\n```\\nkubectl describe service firstgame-service\\n```\\n\\nYou should see:\\n\\n```\\nName:                     firstgame-service\\nNamespace:                default\\nLabels:                   run=firstgame\\nAnnotations:              <none>\\nSelector:                 run=firstgame\\nType:                     NodePort\\nIP:                       172.21.59.175\\nPort:                     <unset>  3000/TCP\\nTargetPort:               3000/TCP\\nNodePort:                 <unset>  30776/TCP\\nEndpoints:                172.30.234.135:3000\\nSession Affinity:         None\\nExternal Traffic Policy:  Cluster\\nEvents:                   <none>\\n```\\n\\nIn my case, the NodePort is `30776`.\\n\\nThe last thing we need is the IP address of our cluster.\\n\\n```\\nibmcloud ks workers firstgame-cluster\\n```\\n\\nYou will get something like this:\\n\\n```\\nID                                                     Public IP         Private IP      Machine Type   State    Status   Zone    Version\\nkube-bkrq1svd0l5j9p3147ng-mycluster-default-000000e0   173.193.106.101   10.76.216.103   free           normal   Ready    hou02   1.13.8_1529\\n```\\n\\nMy cluster IP address is `173.193.106.101`.\\n\\nNow we should be able to access to our application via http://173.193.106.101:30776\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we covered how to deploy our project with Docker and Kubernetes on IBM Cloud. Once you create a Docker image, you can run it almost everywhere. You can also push your own project image to other cloud like AWS, Azure, and Google Cloud. It should be very easy.\\n\\n### What\'s Next?\\n\\nNext time, we will create a simply front-end UI for our project and do a quick demo.\\n\\nIn the meantime, learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"loopback-4-2019-q2-overview","metadata":{"permalink":"/blog/loopback-4-2019-q2-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-07-17-q2-overview.md","source":"@site/blog/2019/2019-07-17-q2-overview.md","title":"LoopBack 4 2019 Q2 Overview","description":"Originally published on strongloop.com","date":"2019-07-17T00:00:00.000Z","formattedDate":"July 17, 2019","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 4 2019 Q2 Overview","date":"2019-07-17T00:00:00.000Z","authors":"dhmlau","slug":"loopback-4-2019-q2-overview","tags":["Quarterly update"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 - Deploying our Application to Kubernetes on IBM Cloud (Part 5)","permalink":"/blog/building-an-online-game-with-loopback-4-pt5"},"nextItem":{"title":"LoopBack 4 June 2019 Milestone Update","permalink":"/blog/loopback-june-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nFor the past few months, we have been focusing on the following stories: \\n\\n- [Authentication](#authentication): released a new `@loopback/authentication` 2.0 version.\\n- [Authorization](#authorization): ability to add authorization through interceptors.\\n- [Inclusion of related models](#inclusion_of_related_models): set up foundation in `repository-json-schema` package.\\n- [Architectural improvements](#architectural_improvements): introduction of lifecycle observers and interceptors.\\n- [Migration](#migration): allows you to migrate incrementally.\\n- [Internal tooling and CI](#internal_tooling_and_ci): Support Node.js 12, reduce build time, etc.\\n- [New Look and Feel on LoopBack Web Site](#new_look_and_feel_on_loopBack_web_site): published a new look on the [loopback.io](https://loopback.io) web site.\\n\\nWe have a monthly blog reviewing what we\'ve done in each milestone. To stay tuned, don\'t forget to follow us on Twitter [@StrongLoop](https://twitter.com/@StrongLoop).\\n\\n\x3c!--truncate--\x3e\\n\\n### Authentication\\n\\nWe have recently released `@loopback/authentication` 2.0. Now you can secure your endpoints with both passport-based and LoopBack native authentication strategies that implement the `AuthenticationStrategy` interface. Our [shopping app example](https://github.com/strongloop/loopback4-example-shopping) has also been updated accordingly to include this capability. More details can be found in this [authentication updates blog post](https://strongloop.com/strongblog/loopback-4-authentication-updates/).\\n\\n### Authorization\\n\\nBesides [creating an authorization component](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html) to add authorization in your LoopBack 4 application, you can now do so by using interceptors. [This tutorial](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt4/) shows how to do it from end to end.\\n\\n### Inclusion of Related Models\\n\\nWe have set up the foundation for inclusion of related models. We made improvements in our `repository-json-schema` package to provide the base for inclusion. We updated our [`TodoList` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list/) to describe navigational properties. The approach we used is a temporary approach to demonstrate how inclusion would work. You can clone the example to check it out.\\n\\n### Architectural Improvements\\n\\nAs one of the major architectural improvements, the concept of interceptor was introduced. Interceptors are reusable functions that provide aspect-oriented logic around method invocations. They can be applied for various uses. See the [interceptors docs page](https://loopback.io/doc/en/lb4/Interceptors.html) for more details.\\n\\nBesides the interceptor, LoopBack 4 now has a basic life cycle support. It allows registration of life cycle observers and actions, and there is a command line interface and a booter to make this even easier.\\n\\nIn addition, extensibility has been a great advancement for LoopBack 4. We\'ve added decorator functions to allow you to [add extensions even more easily](https://loopback.io/doc/en/lb4/Extension-point-and-extensions.html).\\n\\n### Migration\\n\\nIf you have existing LoopBack 3 applications, it\'s a good time to start looking into how to migrate them to LoopBack 4. You can do this incrementally by mounting your LB3 application to LoopBack 4. Read [this docs page](https://loopback.io/doc/en/lb4/Migrating-from-LoopBack-3.html) for steps on how to do that.\\n\\n### Internal Tooling and CI\\n\\nThere has been a lot of enhancement in our tooling. We covered a new major release (v2.0) of `@loopback/build` in our [June milestone blog](https://strongloop.com/strongblog/loopback-june-2019-milestone/). \\n\\nWe have also introduced the concept of experimental features to LoopBack development. The goal is to be able to release experimental features quickly for early feedback while maintaining high code quality on our production-ready code. For details, see https://github.com/strongloop/loopback-next/blob/labs/base/LABS.md. \\n\\nAdditionally, we have put tremendous effort into fixing the CI errors on the connectors, so that we can help land PRs from the community more quickly and more confidently. We\'ve also reduced the build time in loopback-next which improves our development efficiency.\\n\\nLastly, Node.js 12 support has been added to the LoopBack 3 and LoopBack 4 core. The next step is to add Node.js 12 support to the connectors. \\n\\n### New Look and Feel on LoopBack Web Site\\n\\nOur web site [loopback.io](https://loopback.io) now has a new look! We have moved the [LoopBack 4 web site](https://v4.loopback.io) content back to our main web site.\\n\\nWe have rebuilt the \\"Who\'s using LoopBack\\" section to showcase our users. If you would like to be a part of it, see the details in [this GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## What\'s Next?\\n\\nWe\'d like to hear from you! Our [Q3 roadmap](https://github.com/strongloop/loopback-next/tree/master/docs/ROADMAP.md) started with a pull request. We\'ll continue to create future roadmaps in the form of a PR, so feel free to chime in!\\n\\nFor the next 3 months, we\'d like to focus on the following:\\n\\n- Continue with the Q2 stories. e.g. [Authentication](https://github.com/strongloop/loopback-next/issues/3242), [Authorization](https://github.com/strongloop/loopback-next/issues/538) and [Inclusion of related models](https://github.com/strongloop/loopback-next/issues/1352).\\n- Feature parity gap. e.g. [Declarative support](https://github.com/strongloop/loopback-next/issues/2036)\\n- Internal tooling/infrastructure: e.g. [support Node.js 12 in connectors](https://github.com/strongloop/loopback-next/issues/3072), [reduce build time](https://github.com/strongloop/loopback-next/issues/3161), etc.\\n- Juggler-next: If time permits, we\'d like to start looking into the infrastructure to prepare us to work on juggler-next.\\n\\n## Previous Milestone Blogs\\n\\nThere are too many features added and bug fixes that cannot be captured here. Check out our previously published monthly milestone blog posts in Q2 for more details: \\n\\n- [April 2019](https://strongloop.com/strongblog/april-2019-milestone/)\\n- [May 2019](https://strongloop.com/strongblog/may-2019-milestone/)\\n- [June 2019](https://strongloop.com/strongblog/loopback-june-2019-milestone/)\\n\\n## Call for Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"loopback-june-2019-milestone","metadata":{"permalink":"/blog/loopback-june-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-07-09-loopback-june-milestone.md","source":"@site/blog/2019/2019-07-09-loopback-june-milestone.md","title":"LoopBack 4 June 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-07-09T00:00:00.000Z","formattedDate":"July 9, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":7.785,"hasTruncateMarker":true,"authors":[{"name":"Nora Abdelgadir","title":"LoopBack Maintainer","url":"https://github.com/nabdelgadir","imageURL":"https://avatars0.githubusercontent.com/u/42985749","key":"nabdelgadir"}],"frontMatter":{"title":"LoopBack 4 June 2019 Milestone Update","date":"2019-07-09T00:00:00.000Z","authors":"nabdelgadir","slug":"loopback-june-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2019 Q2 Overview","permalink":"/blog/loopback-4-2019-q2-overview"},"nextItem":{"title":"What\'s New in LoopBack 4 Authentication 2.0","permalink":"/blog/loopback-4-authentication-updates"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs the temperature gets warmer the LoopBack team is spending this summer releasing hot deliverables. In June we focused on various enhancements such as releasing version 2.0.0 of `@loopback/build`, replacing `strong-docs`, and improving `@loopback/testlab`. We also focused on authentication, inclusion of related models, and other improvements. You can see the [June milestone](https://github.com/strongloop/loopback-next/issues/3035) for an overview of what we have worked on, and read on for more details.\\n\\n\x3c!--truncate--\x3e\\n\\n## Version 2.0.0 of `@loopback/build`\\n\\nIn the past months, we have significantly evolved our build tooling. The last major change was the switch from `tslint` to `eslint` for linting. We decided it\'s time to clean up the code, remove unused parts and release a new major version.\\n\\nThe release introduced the following breaking changes:\\n\\n- `lb-apidocs` helper is no longer available.\\n- `lb-tslint` helper is no longer available.\\n- `lb-tsc` is no longer choosing `outDir` for you, you have to specify it explicitly.\\n- It is no longer possible to the specify compilation target via a non-option argument like `lb-tsc es2017`.\\n\\nSee the [release notes](https://github.com/strongloop/loopback-next/blob/master/packages/build/CHANGELOG.md#200-2019-06-17) for more details and instructions on migrating your existing projects.\\n\\nAs part of these changes, we removed vulnerable dependencies and thus `npm install` in newly scaffolded projects reports zero vulnerabilities \ud83c\udf89.\\n\\n## Replacing `strong-docs` with `tsdocs`\\n\\nIn [PR#3055](https://github.com/strongloop/loopback-next/pull/3055), we replaced `strong-docs` with `@loopback/tsdocs`. We use `@loopback/tsdocs` to generate markdown files on our website. With this change, we changed the home for our API docs; you can visit the [new home](https://loopback.io/doc/en/lb4/apidocs.index.html) on our website to see the docs. \\n\\nThis change was a breaking change: as mentioned before, `lb-apidocs` is no longer available for use, as it was removed as part of this PR. For alternate solutions, you can use Microsoft\'s [api-extractor](https://www.npmjs.com/package/@microsoft/api-extractor) and [api-documenter](https://www.npmjs.com/package/@microsoft/api-documenter).\\n\\nOn the brighter side, by removing `strong-docs` we also removed dependencies on 3rd party modules that have known security vulnerabilities but are no longer maintained.\\n\\n## Jest and `@loopback/testlab`\\n\\nWe improved our testing helpers to support Jest testing framework.\\n\\n- [PR#3013](https://github.com/strongloop/loopback-next/pull/3013) fixed typings for `itSkippedOnTravis` to remove an implicit dependency on Mocha typings, which was causing conflicts when using our testlab from Jest.\\n\\n- [PR#3040](https://github.com/strongloop/loopback-next/pull/3040) introduced a more generic helper `skipOnTravis` which supports any BDD verbs like `describe` and `it`.\\n\\n    ```ts\\n    skipOnTravis(it, \'does something\', async () => {\\n      // the test code\\n    });\\n    ```\\n\\n- [PR#3138](https://github.com/strongloop/loopback-next/pull/3138) added even more generic helper `skipIf` that allows you to skip a test case or a test suite on arbitrary condition.\\n\\n    ```ts\\n    skipIf(someCondition, it, \'does something\', async () => {\\n      // the test code\\n    });\\n    ```\\n\\nWe are also looking into ways to migrate our test suite from Mocha to Jest. Stay tuned for updates!\\n\\n## Authentication \\n\\nIn [PR#120](https://github.com/strongloop/loopback4-example-shopping/pull/120), the [shopping cart application](https://github.com/strongloop/loopback4-example-shopping) was updated to utilize the latest authentication package `@loopback/authentication2.x`. You can read more about our latest authentication package in our blog [What\'s New in LoopBack 4 Authentication 2.0](https://strongloop.com/strongblog/loopback-4-authentication-updates/).\\n\\nIn [PR#2977](https://github.com/strongloop/loopback-next/pull/2977), we introduced some new documentation to the authentication package we\'ve been updating these past few months. See [Authentication](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html) for details.\\n\\nIn [PR#3046](https://github.com/strongloop/loopback-next/pull/3046), a new authentication tutorial on [How to secure your LoopBack 4 application with JWT authentication](https://loopback.io/doc/en/lb4/Authentication-Tutorial.html) was added.\\n\\nWe released the new adapter for passport-based strategies as [`@loopback/authentication-passport`](https://www.npmjs.com/package/@loopback/authentication-passport); now you can follow the guide in [Use Passport-based Strategies](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html) to learn how to create and register a passport strategy and plug it into the authentication system.\\n\\n## Inclusion of Related Models\\n\\n### `getJsonSchema` Enhancement\\n\\nA community user, [@samarpanB](https://github.com/samarpanB), has contributed [PR#2975](https://github.com/strongloop/loopback-next/pull/2975) adding a new option `includeRelations` to the helper `getJsonSchema`. When the option is enabled, the helper adds navigational properties for inclusion of related models in the emitted model schema.\\n\\n### Navigation Properties Added to TodoList Example\\n\\nAs part of our [Inclusion of Related Models Epic](https://github.com/strongloop/loopback-next/issues/1352), we updated our [TodoList example](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list) to also include navigational properties. After the work done in [PR#3171](https://github.com/strongloop/loopback-next/pull/3171), now when getting a `Todo` with an inclusion filter, its included `TodoList` will be a part of the response and vice versa.\\n\\nWhen you call `GET todos/2`, you get the following response:\\n\\n```json\\n{\\n  \\"id\\": 1,\\n  \\"title\\": \\"Take over the galaxy\\",\\n  \\"desc\\": \\"MWAHAHAHAHAHAHAHAHAHAHAHAHAMWAHAHAHAHAHAHAHAHAHAHAHAHA\\",\\n  \\"todoListId\\": 1\\n}\\n```\\n\\nAnd now when you call `GET todos/2` with the filter `{include: [{relation: \'todo-lists\'}]}`, you get the following response:\\n\\n```json\\n{\\n  \\"id\\": 1,\\n  \\"title\\": \\"Take over the galaxy\\",\\n  \\"desc\\": \\"MWAHAHAHAHAHAHAHAHAHAHAHAHAMWAHAHAHAHAHAHAHAHAHAHAHAHA\\",\\n  \\"todoListId\\": 1,\\n  \\"todoList\\": {\\n    \\"id\\": 1,\\n    \\"title\\": \\"Sith lord\'s check list\\"\\n  }\\n}\\n```\\n\\nYou can check out the new full example by calling `lb4 example todo-list`.\\n\\n## Partial Updates via `PATCH`\\n\\nIn [PR#3199](https://github.com/strongloop/loopback-next/pull/3199), we enabled added a `partial` option for `JsonSchemaOptions`. This addition allowed us to emit schema where all the model properties are optional. By doing this, this lets us to now do `PATCH` requests without having to include all required properties in the request body.\\n\\nFor example, before when trying to update a `Todo` from our [`Todo` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo), you\'d have to include the `title` property in the request body:\\n\\n`PATCH todos/1`\\n\\n```json\\n{\\n   \\"title\\": \\"Take over the galaxy\\", \\n   \\"desc\\": \\"get the resources ready\\" \\n}\\n```\\n\\nBut now even though `title` is still required, it is optional when doing a `PATCH` request. So now the following is a valid request body to pass to the following request:\\n\\n`PATCH todos/1`\\n\\n```json\\n{\\n   \\"desc\\": \\"get the resources ready\\" \\n}\\n```\\n\\nAll newly created projects generated through the CLI will allow partial updates through `PATCH`.\\n\\n## New GitHub Issue Templates\\n\\nIn [PR#3202](https://github.com/strongloop/loopback-next/pull/3202), we updated the GitHub issues template, so that when you open a new issue, you\'re taken to [a page](https://github.com/strongloop/loopback-next/issues/new/choose) (see image below) where you can choose the type of issue to open. The options we offer are: bug report, feature request, question, and security vulnerability. With these new more specific templates, it will be easier for the team to go through and understand new issues. \\n\\n![Issue template](./images/issue-template.png)\\n\\n## CLI Improvement\\n\\nIn [PR#2989](https://github.com/strongloop/loopback-next/pull/2989), we made some improvements to the CLI:\\n\\n- Changed/unified the naming convention to eliminate bugs causing by the input. See the [naming conventions](https://loopback.io/doc/en/lb4/Command-line-interface.html#naming-convention) we follow in LoopBack 4.\\n- Added a prompt message to warn/notify users the change to their inputs and file names in advance. For example:\\n    ```\\n    $ lb4 controller\\n    ? Controller class name: todo\\n    $ Controller Todo will be created in src/controllers/todo.controller.ts\\n    ```\\n\\nWe also made some fixes to our `lb4 discover` command: \\n\\n- In [PR#3127](https://github.com/strongloop/loopback-next/pull/3127), we fixed a bug so that the prompt exits properly when using the command.\\n- In [PR#3015](https://github.com/strongloop/loopback-next/pull/3015/), community member [@samarpanB](https://github.com/samarpanB) contributed a fix that would properly stringify `modelSettings` that go into the `@model` decorator.\\n- In [PR#3115](https://github.com/strongloop/loopback-next/pull/3115), community member [@marvinirwin](https://github.com/marvinirwin) contributed a fix that makes the `schema` field in `modelSettings` use the owner of the schema.\\n\\n## New Team Member\\n\\nWe have a new addition to our LoopBack team: Agnes ([@agnes512 on GitHub](https://github.com/agnes512)) has joined the team as our intern for the next year. She has already contributed improvements to our documentation, our [`cloudant` connector](https://github.com/strongloop/loopback-connector-cloudant/), our CLI, and more. We\'re happy to have her on our team and look forward to see what she accomplishes in the future.\\n\\n## Other Changes\\n\\n- We introduced a shared test suite that allows us to test any Repository implementation against any supported connector, e.g. `DefaultCrudRepository` against `loopback-connector-mongodb`. This suite will help us to catch database-specific problems that went undiscovered so far. See [PR#3097](https://github.com/strongloop/loopback-next/pull/3079).\\n- We reworked the `cloudant` connector test setup so that both juggler versions 3.x and 4.x are triggered. So far connectors `mongodb`, `postgresql`, `kv-redis`, `cloudant` run the shared tests. See [PR#206](https://github.com/strongloop/loopback-connector-cloudant/pull/206).\\n- We honoured the arguments for another two LoopBack 3 CLI commands: `lb remote-method` and `lb middleware`. See [PR#410](https://github.com/strongloop/generator-loopback/pull/410).\\n- We deprecated the `@loopback/openapi-v3-types` package. See [PR#3220](https://github.com/strongloop/loopback-next/pull/3220).\\n- We improved the documentation for our [shopping cart application](https://github.com/strongloop/loopback4-example-shopping). See [PR#183](https://github.com/strongloop/loopback4-example-shopping/pull/183).\\n\\nWe have finished the migration from GreenKeeper to RenovateBot and added documentation for LoopBack developers describing how to work with RenovateBot\'s pull requests. Learn more in the new section [Renovate bot](https://loopback.io/doc/en/contrib/code-contrib-lb4.html#renovate-bot) in our documentation for developers.\\n\\nWe have upgraded our eslint-related infrastructure to eslint version 6 and added few more rules to the default eslint config to catch even more programming errors:\\n\\n- [no-floating-promise](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-floating-promises.md) to detect & reject usage of Promise-like values in statements without handling their errors appropriately. We used to have this rule enabled in our old tslint-based setup but had to switch it temporarily off because it was not available in typescript-eslint until recently.\\n- [no-prototype-builtins](https://eslint.org/docs/rules/no-prototype-builtins) to detect code that can introduce Prototype Poisoning vulnerability. This rule was promoted to recommended rules in eslint version 6.\\n- [require-atomic-updates](https://eslint.org/docs/rules/require-atomic-updates) to report assignments to variables or properties where a race condition may be introduced. This rule was promoted to recommended rules in eslint version 6.\\n\\n## Looking for User References\\n\\nAs you might be aware, the [loopback.io](https://loopback.io/) website has a brand new look. We\'d like to rebuild the \\"Who\'s using LoopBack\\" section and showcase our users and their use cases. If you would like to be a part of it, see the details in this [GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [July milestone](https://github.com/strongloop/loopback-next/issues/3241).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-4-authentication-updates","metadata":{"permalink":"/blog/loopback-4-authentication-updates","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-07-03-loopback-4-authentication-updates.md","source":"@site/blog/2019/2019-07-03-loopback-4-authentication-updates.md","title":"What\'s New in LoopBack 4 Authentication 2.0","description":"Originally published on strongloop.com","date":"2019-07-03T00:00:00.000Z","formattedDate":"July 3, 2019","tags":[{"label":"feature","permalink":"/blog/tags/feature"},{"label":"authentication","permalink":"/blog/tags/authentication"}],"readingTime":1.935,"hasTruncateMarker":true,"authors":[{"name":"Dominique Emond","title":"LoopBack Maintainer","url":"https://github.com/emonddr","imageURL":"https://avatars0.githubusercontent.com/u/6864736","key":"emonddr"}],"frontMatter":{"title":"What\'s New in LoopBack 4 Authentication 2.0","date":"2019-07-03T00:00:00.000Z","authors":"emonddr","slug":"loopback-4-authentication-updates","tags":["feature","authentication"]},"prevItem":{"title":"LoopBack 4 June 2019 Milestone Update","permalink":"/blog/loopback-june-2019-milestone"},"nextItem":{"title":"Building an Online Game With LoopBack 4 - User Authentication and Role-Based Access Control (Part 4)","permalink":"/blog/building-an-online-game-with-loopback-4-pt4"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWe\'ve refactored the authentication component to be more extensible and easier to use.\\n\\nNow you can secure your endpoints with both [passport-based](http://www.passportjs.org/)  and `LoopBack native` authentication strategies that implement the interface [AuthenticationStrategy](https://loopback.io/doc/en/lb4/apidocs.authentication.authenticationstrategy.html).\\n\\nThe new design greatly simplifies the effort of application developers and extension developers since they now only need to focus on binding strategies to the application without having to understand/modify the strategy resolver or the action provider.\\n\\n\x3c!--truncate--\x3e\\n\\nThe core of the authentication component is available in [@loopback/authentication](https://www.npmjs.com/package/@loopback/authentication) version `2.x`, and the passport-based capabilities are now available in [@loopback/authentication-passport](https://www.npmjs.com/package/@loopback/authentication-passport).\\n\\nHere is a **high level** overview of the authentication component.\\n\\n![authentication_overview_highlevel](https://loopback.io/pages/en/lb4/imgs/authentication_overview_highlevel.png)\\n\\n- A decorator to express an authentication requirement on controller methods\\n- A provider to access method-level authentication metadata\\n- An action in the REST sequence to enforce authentication\\n- An extension point to discover all authentication strategies and handle the delegation\\n\\nDetailed documentation about the design and usage of `@loopback/authentication@2.x` can be found [here](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html).\\n\\nAs an **application developer**, you only need 3 steps to secure your endpoints:\\n\\n- Decorate the endpoints of a controller with the `@authenticate(strategyName, options?)` decorator\\n- Insert the authentication action in a custom sequence \\n- Register the authentication strategy\\n\\nAs an **extension developer**, you can **contribute** a `LoopBack native` authentication strategy by following the steps in [Creating a Custom Authentication Strategy](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html#creating-a-custom-authentication-strategy), or a `passport-based` authentication strategy by following the steps in [Wrapping a Passport-based Strategy with the Passport Strategy Adapter](https://www.npmjs.com/package/@loopback/authentication-passport).\\n\\nA tutorial and reference implementation on how to add JWT authentication to a LoopBack 4 application using `@loopback/authentication@2.x` can be found [here](https://loopback.io/doc/en/lb4/Authentication-Tutorial.html). It involves an updated version of the [example shopping cart application](https://github.com/strongloop/loopback4-example-shopping).\\n\\n## Looking for User References\\n\\nAs you might be aware, our [loopback.io](https://loopback.io/) web site has a brand new look. We\'re rebuilding the `\\"Who\'s using LoopBack\\"` section to showcase our users and the use cases. If you would like to be a part of it, see the details in [this GitHub issue](https://github.com/strongloop/loopback-next/issues/3047).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- Opening a pull request on one of our [\\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- Joining our [user group](https://github.com/strongloop/loopback-next/issues/110)."},{"id":"building-an-online-game-with-loopback-4-pt4","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt4","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-06-26-building-an-online-game-with-loopback-4-pt4.md","source":"@site/blog/2019/2019-06-26-building-an-online-game-with-loopback-4-pt4.md","title":"Building an Online Game With LoopBack 4 - User Authentication and Role-Based Access Control (Part 4)","description":"Originally published on strongloop.com","date":"2019-06-26T00:00:00.000Z","formattedDate":"June 26, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":15.795,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 - User Authentication and Role-Based Access Control (Part 4)","date":"2019-06-26T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt4","tags":["how-to"]},"prevItem":{"title":"What\'s New in LoopBack 4 Authentication 2.0","permalink":"/blog/loopback-4-authentication-updates"},"nextItem":{"title":"Migrating from LoopBack 3 to LoopBack 4","permalink":"/blog/migrate-from-loopback-3-to-loopback-4"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 4: User Authentication and Role-Based Access Control\\n\\n### In This Episode\\n\\nWe already have some APIs that allow users to customize their characters. However, a user should not get access to characters that belong to other users. With that in mind, we will add user authentication and role-based access control to this project.\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part4/firstgame) for this episode\'s code.\\n\\n\x3c!--truncate--\x3e\\n\\n### Introduction\\n\\nIn this series, I\u2019m going to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\u2019ll create a new project I\u2019ve been working on: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game also allows multiple players to log in and play with their friends.\\n\\n### Previously on Building an Online Game With LoopBack 4\\n\\nIn the last episode, we created customized APIs to manage `weapon`, `armor`, and `skill` for `character`.\\n\\nHere are the previous episodes:\\n\\n* [Part 1: Building a Simple LoopBack Project With MongoDB](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/)\\n* [Part 2: Generating Universally Unique ID and Managing Models Relationships](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt2/)\\n* [Part 3: Customizing APIs in Controller](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt3/)\\n\\n### Basic Structure\\n\\nLoopBack 4 provides us a built-in authentication package. This package includes an authentication system as the skeleton to verify the identity of a request. It invokes an authentication strategy provided by the developer to process the authentication information in the request and to then return the corresponding user profile.\\n\\nIn this episode, I will combine LoopBack authentication package with my self-defined authorization. This diagram shows the basic structure:\\n\\n![structure](./images/building-online-game-pt4-auth-structure.png)\\n\\n#### LoopBack Authentication Package\\n\\nThe one in the middle is the `@loopback/authentication` package. It has three main components:\\n\\n* Providers:\\n  * AuthMetadataProvider: this reads the decorator metadata from the controller methods wherever the `@authenticate` decorator is used.\\n  * AuthenticateActionProvider: this provides the authentication action which uses AuthenticationStrategyProvider to obtain a registered authentication strategy (if one exists), calls the authenticate(request) method of the given authentication strategy, and places the user profile on the request context.\\n  * AuthenticationStrategyProvider: this is the extension point for you to add your own authentication strategies. I will show you how to do that later. It also has the job of finding a strategy of a given name (if existed), and returning it to AuthenticateActionProvider.\\n\\n* Services: all services in this package are interfaces. You can create your own services as well.\\n  * TokenService: an interface for generating and verifying an authentication token.\\n  * UserService: an interface for performing the login action in an authentication strategy, and for converting a User object into a UserProfile object. To keep this project as simple as possible, I am not going to use this interface. I will integrate this to the TokenService.\\n\\n* Decorators: `@authenticate`. Annotate the APIs that need authentication with this decorator.\\n\\n#### Self-defined Authorization\\n\\nThe one in the bottom left is our self-defined authorization. It has three components:\\n\\n* Providers:\\n  * UserPermissionsProvider: this will check user\'s permission. We will create different user permissions for different users. This provider will be invoked in AuthorizationInterceptor.\\n\\n* Strategies: this is where we add our own authentication strategies.\\n  * JWTStrategy: we are going to create a custom authentication strategy based on [JSON Web Token](https://jwt.io/).\\n\\n* Services:\\n  * JWTService: a service associate with JWTStrategy to generate and verify JWT.\\n\\n* Interceptors:\\n  * AuthorizationInterceptor: a middle layer comes after authentication that use UserPermissionsProvider to verify user\'s permission. You can find more information about LoopBack 4 Interceptor at [here](https://loopback.io/doc/en/lb4/Interceptors.html#order-of-invocation-for-interceptors).\\n\\nHere is a diagram to show you what will happen after an API call.\\n\\n![structure](./images/building-online-game-pt4-auth-activity-flow.png)\\n\\n#### `application.ts`, `sequence.ts` and `controller`\\n\\nIn order to use the all of above in our project, we have three more steps to complete:   \\n\\n * Bind everything in `application.ts`. `application.ts` is like the main function of LoopBack project.\\n * Add authenticate action into `sequence.ts`. A sequence contains a list of actions that is performed for each request.\\n * Put `@authenticate` decorator above your APIs.\\n\\nYou can check [this tutorial](https://github.com/strongloop/loopback-next/blob/master/packages/authentication/docs/authentication-system.md) or [this shopping example](https://github.com/strongloop/loopback4-example-shopping) for more information of LoopBack 4 Authentication package.\\n\\n### Install `@loopback/authentication`\\n\\nSimply run `npm install --save @loopback/authentication@latest` in your project root.\\n\\nReminder: We are using `@loopback/authentication@2.1.0` in this project. If you want to use other versions, you may need to change you code accordingly. You may also need to run `npm outdated` in your project root to see if other LoopBack packages need update.\\n\\n### Refactor Model\\n\\nIn previous episodes, we used UUIDs as our `character` IDs. But UUIDs are 36 digits string IDs. We can not let user use UUIDs to login. So we will use email instead of UUID.\\n\\nTo keep this project as simple as possible, a user can only own one character. So user and character are basically the same thing. `character` model holds all user information.\\n\\nIn `src/controllers/character.models`, remove id and add email and password properties.\\n\\n```ts\\n@property({\\n  type: \'string\',\\n  id: true,\\n  required: true,\\n})\\nemail?: string;\\n\\n@property({\\n  type: \'string\',\\n  required: true,\\n})\\npassword: string;\\n```\\n\\nBesides, we need to add user permission to `character` model.\\n\\n```ts\\nimport {PermissionKey} from \'../authorization\';\\n```\\n\\n```ts\\n@property.array(String)\\npermissions: PermissionKey[];\\n```\\n\\n`permissions` is an array of `PermissionKey`s. We will create `PermissionKey` later.\\n\\n### Self-Defined Authorization Component\\n\\nFirst, let\'s create a folder \'authorization\' in `src` to hold everything in this episode. This will be our self-defined authorization package.\\n\\nI will show you how to create everything step by step. You can also check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part4/firstgame/src/authorization) for my `authorization` folder.\\n\\n#### Users Permissions\\n\\nLet\'s create permissions for users. An API may have one or more required permissions. Users need to have all of the required permissions to access that API.\\n\\nCreate `permission-key.ts` in `src/authorization`.\\n\\n```ts\\nexport const enum PermissionKey {\\n  // For accessing own (logged in user) profile\\n  ViewOwnUser = \'ViewOwnUser\',\\n  // For creating a user\\n  CreateUser = \'CreateUser\',\\n  // For updating own (logged in user) profile\\n  UpdateOwnUser = \'UpdateOwnUser\',\\n  // For deleting a user\\n  DeleteOwnUser = \'DeleteOwnUser\',\\n\\n  //admin\\n  // For updating other users profile\\n  UpdateAnyUser = \'UpdateAnyUser\',\\n  // For accessing other users profile.\\n  ViewAnyUser = \'ViewAnyUser\',\\n  // For deleting a user\\n  DeleteAnyUser = \'DeleteAnyUser\',\\n}\\n```\\nThis file holds all permissions. `ViewOwnUser`, `CreateUser`, `UpdateOwnUser`, `DeleteOwnUser` are for regular users. `UpdateAnyUser`, `ViewAnyUser`, `DeleteAnyUser` are for admins only.\\n\\n#### Interfaces and Types\\n\\nTo make it easier to import, we will put all of useful interfaces, types, and schemas together.\\n\\nCreate `types.ts` in `src/authorization`.\\n\\n```ts\\nimport {PermissionKey} from \'./permission-key\';\\n\\nexport interface UserPermissionsFn {\\n  (\\n    userPermissions: PermissionKey[],\\n    requiredPermissions: RequiredPermissions,\\n  ): boolean;\\n}\\n\\nexport interface MyUserProfile  {\\n  id: string;\\n  email: string;\\n  name: string;\\n  permissions: PermissionKey[];\\n}\\n\\nexport interface RequiredPermissions {\\n  required: PermissionKey[];\\n}\\n\\nexport const UserProfileSchema = {\\n  type: \'object\',\\n  required: [\'email\', \'password\', \'name\'],\\n  properties: {\\n    email: {\\n      type: \'string\',\\n      format: \'email\',\\n    },\\n    password: {\\n      type: \'string\',\\n      minLength: 8,\\n    },\\n    name: {type: \'string\'},\\n  },\\n};\\n\\nexport const UserRequestBody = {\\n  description: \'The input of create user function\',\\n  required: true,\\n  content: {\\n    \'application/json\': {schema: UserProfileSchema},\\n  },\\n};\\n\\nexport interface Credential  {\\n  email: string;\\n  password: string;\\n  permissions: PermissionKey[];\\n}\\n\\nexport const CredentialsSchema = {\\n  type: \'object\',\\n  required: [\'email\', \'password\'],\\n  properties: {\\n    email: {\\n      type: \'string\',\\n      format: \'email\',\\n    },\\n    password: {\\n      type: \'string\',\\n      minLength: 8,\\n    },\\n  },\\n};\\n\\nexport const CredentialsRequestBody = {\\n  description: \'The input of login function\',\\n  required: true,\\n  content: {\\n    \'application/json\': {schema: CredentialsSchema},\\n  },\\n};\\n```\\n\\n`MyUserProfile` is the format of our user profile. It is the information needed to perform authentication and authorization.\\n\\n`UserProfileSchema` and `CredentialsSchema` are the formats of request input. We use them to validate request input in `controller`.\\n\\n#### Binding Self-Defined Authorization Component\\n\\nCreate `keys.ts` in `src/authorization`. `MyAuthBindings` is the self-defined component that we need to bind to `application.ts`. `TokenServiceConstants` is the value we will use later in token service.\\n\\n```ts\\nimport {BindingKey} from \'@loopback/context\';\\nimport {UserPermissionsFn} from \'./types\';\\nimport {TokenService} from \'@loopback/authentication\';\\n/**\\n * Binding keys used by this component.\\n */\\nexport namespace MyAuthBindings {\\n  export const USER_PERMISSIONS = BindingKey.create<UserPermissionsFn>(\\n    \'userAuthorization.actions.userPermissions\',\\n  );\\n\\n  export const TOKEN_SERVICE = BindingKey.create<TokenService>(\\n    \'services.authentication.jwt.tokenservice\',\\n  );\\n}\\n\\nexport namespace TokenServiceConstants {\\n  export const TOKEN_SECRET_VALUE = \'myjwts3cr3t\';\\n  export const TOKEN_EXPIRES_IN_VALUE = \'600\';\\n}\\n```\\n\\n#### Providers\\n\\nThe LoopBack authorization package gives us three providers for authorization: strategies, action, and metadata. We need to customize our own provider for users permissions.\\n\\nCreate folder `providers` in `src`, then inside `providers`, create `user-permissions.provider.ts`.\\n\\n```ts\\nimport {Provider} from \'@loopback/context\';\\nimport {PermissionKey} from \'../permission-key\';\\nimport {UserPermissionsFn, RequiredPermissions} from \'../types\';\\nimport {intersection} from \'lodash\';\\n\\nexport class UserPermissionsProvider implements Provider<UserPermissionsFn> {\\n  constructor() {}\\n\\n  value(): UserPermissionsFn {\\n    return (userPermissions, requiredPermissions) =>\\n      this.action(userPermissions, requiredPermissions);\\n  }\\n\\n  action(\\n    userPermissions: PermissionKey[],\\n    requiredPermissions: RequiredPermissions,\\n  ): boolean {\\n    return intersection(userPermissions, requiredPermissions.required).length\\n      === requiredPermissions.required.length;\\n  }\\n}\\n```\\n\\nIt will compare a user\'s permissions and required permissions, and allow the user to get access if and only if this user has all of the required permissions.\\n\\n#### Strategies\\n\\nThe `AuthenticationStrategyProvider` can find a registered strategy by its name. We will create our own custom authentication strategy and then specify its name in the `@authenticate` decorator. It will based on the [JSON Web Token](https://jwt.io/).\\n\\nFirst, run `npm install jsonwebtoken --save` in your project root to install the JWT package.\\n\\nCreate a folder `strategies` in `src/authorization`. Then inside `strategies`, create a file named `JWT.strategy.ts`. This is our custom authentication strategy.\\n\\n```ts\\nimport {Request, HttpErrors} from \'@loopback/rest\';\\nimport {inject} from \'@loopback/core\';\\nimport {AuthenticationStrategy,\\n        AuthenticationMetadata,\\n        AuthenticationBindings,\\n        TokenService,\\n} from \'@loopback/authentication\';\\nimport {MyUserProfile,\\n        UserPermissionsFn,\\n        RequiredPermissions,} from \'../types\';\\nimport {MyAuthBindings,} from \'../keys\';\\n\\nexport class JWTStrategy implements AuthenticationStrategy{\\n  name: string = \'jwt\';\\n\\n  constructor(\\n    @inject(AuthenticationBindings.METADATA)\\n    public metadata: AuthenticationMetadata,\\n    @inject(MyAuthBindings.USER_PERMISSIONS)\\n    protected checkPermissons: UserPermissionsFn,\\n    @inject(MyAuthBindings.TOKEN_SERVICE)\\n    protected tokenService: TokenService,\\n  ) {}\\n  async authenticate(request: Request): Promise<MyUserProfile | undefined> {\\n    const token: string = this.extractCredentials(request);\\n    try{\\n      const user: MyUserProfile = await this.tokenService.verifyToken(token) as MyUserProfile;\\n      return user;\\n    } catch (err) {\\n      Object.assign(err, {code: \'INVALID_ACCESS_TOKEN\', statusCode: 401,});\\n      throw err;\\n    }\\n  }\\n\\n  extractCredentials(request: Request): string {\\n    if (!request.headers.authorization) {\\n      throw new HttpErrors.Unauthorized(`Authorization header not found.`);\\n    }\\n    const authHeaderValue = request.headers.authorization;\\n\\n    if (!authHeaderValue.startsWith(\'Bearer\')) {\\n      throw new HttpErrors.Unauthorized(\\n        `Authorization header is not of type \'Bearer\'.`,\\n      );\\n    }\\n    const parts = authHeaderValue.split(\' \');\\n    if (parts.length !== 2)\\n      throw new HttpErrors.Unauthorized(\\n        `Authorization header value has too many parts. It must follow the pattern: \'Bearer xx.yy.zz\' where xx.yy.zz is a valid JWT token.`,\\n      );\\n      const token = parts[1];\\n      return token;\\n  }\\n}\\n```\\n\\nYou can even use multiple strategies in one project, if needed.\\n\\n#### Interceptor\\n\\nInterceptor is a middle layer comes after authentication. After the authentication strategy verified user\'s access token, interceptor will verify use\'s permission.\\n\\nRun `lb4 interceptor` in your project root.\\n\\n```\\n? Interceptor name: authorize\\n? Is it a global interceptor? Yes\\n? Global interceptors are sorted by the order of an array of group names bound to ContextBindings.GLOBAL_INTERCEPTOR_ORDERED_GROUPS. See https://loopback.io/doc/en/lb4/Interceptors.html#order-of-invocation-for-interceptors.\\nGroup name for the global interceptor: (\'\')\\n   create src/interceptors/authorize.interceptor.ts\\n   update src/interceptors/index.ts\\n\\nInterceptor authorize was created in src/interceptors/\\n```\\n\\nThen change `src/interceptors/authorize.interceptor.ts` to this:\\n\\n```ts\\nimport {\\n  inject,\\n  globalInterceptor,\\n  Interceptor,\\n  InvocationContext,\\n  InvocationResult,\\n  Provider,\\n  ValueOrPromise,\\n} from \'@loopback/context\';\\nimport {Getter} from \'@loopback/core\';\\nimport {HttpErrors} from \'@loopback/rest\';\\nimport {MyUserProfile,\\n        MyAuthBindings,\\n        UserPermissionsFn,\\n        RequiredPermissions,} from \'../authorization\';\\nimport {AuthenticationMetadata,AuthenticationBindings} from \'@loopback/authentication\';\\n\\n\\n/**\\n * This class will be bound to the application as an `Interceptor` during\\n * `boot`\\n */\\n@globalInterceptor(\'\', {tags: {name: \'authorize\'}})\\nexport class AuthorizationInterceptor implements Provider<Interceptor> {\\n  constructor(\\n    @inject(AuthenticationBindings.METADATA)\\n    public metadata: AuthenticationMetadata,\\n    @inject(MyAuthBindings.USER_PERMISSIONS)\\n    protected checkPermissons: UserPermissionsFn,\\n    @inject.getter(AuthenticationBindings.CURRENT_USER)\\n    public getCurrentUser: Getter<MyUserProfile>,\\n  ) {}\\n\\n  /**\\n   * This method is used by LoopBack context to produce an interceptor function\\n   * for the binding.\\n   *\\n   * @returns An interceptor function\\n   */\\n  value() {\\n    return this.intercept.bind(this);\\n  }\\n\\n  /**\\n   * The logic to intercept an invocation\\n   * @param invocationCtx - Invocation context\\n   * @param next - A function to invoke next interceptor or the target method\\n   */\\n  async intercept(\\n    invocationCtx: InvocationContext,\\n    next: () => ValueOrPromise<InvocationResult>,\\n  ) {\\n    if (!this.metadata) return await next();\\n\\n    const result = await next();\\n\\n    const requiredPermissions = this.metadata.options as RequiredPermissions;\\n    const user = await this.getCurrentUser();\\n    if(!this.checkPermissons(user.permissions, requiredPermissions)){\\n      throw new HttpErrors.Forbidden(\'INVALID_ACCESS_PERMISSION\');\\n    }\\n    return result;\\n  }\\n}\\n```\\n\\nA global interceptor will be automatically applied to all methods in controllers.\\n\\n#### Services\\n\\nCreate a folder `services` in `src/authorization`, then inside `services`, create a file named `JWT.service.ts`. This is a service that generates and verifies JWT tokens, and will be used by JWTStrategy.\\n\\n```ts\\nimport {inject} from \'@loopback/context\';\\nimport {HttpErrors} from \'@loopback/rest\';\\nimport {promisify} from \'util\';\\nimport {TokenService} from \'@loopback/authentication\';\\nimport {TokenServiceConstants} from \'../keys\';\\nimport {MyUserProfile, Credential} from \'../types\';\\nimport {repository} from \'@loopback/repository\';\\nimport {CharacterRepository} from \'../../repositories\';\\nimport * as _ from \'lodash\';\\nimport {toJSON} from \'@loopback/testlab\';\\n\\nconst jwt = require(\'jsonwebtoken\');\\nconst signAsync = promisify(jwt.sign);\\nconst verifyAsync = promisify(jwt.verify);\\n\\nexport class JWTService implements TokenService {\\n  constructor(\\n    @repository(CharacterRepository)\\n    public characterRepository: CharacterRepository,\\n  ) {}\\n\\n  async verifyToken(token: string): Promise<MyUserProfile> {\\n    if (!token) {\\n      throw new HttpErrors.Unauthorized(\\n        `Error verifying token : \'token\' is null`,\\n      );\\n    }\\n\\n    const decryptedToken = await verifyAsync(token, TokenServiceConstants.TOKEN_SECRET_VALUE);\\n    let userProfile = _.pick(decryptedToken, [\'id\', \'email\', \'name\', `permissions`]);\\n    return userProfile;\\n  }\\n\\n  async generateToken(userProfile: MyUserProfile): Promise<string> {\\n    const token = await signAsync(userProfile, TokenServiceConstants.TOKEN_SECRET_VALUE, {\\n      expiresIn: TokenServiceConstants.TOKEN_EXPIRES_IN_VALUE,\\n    });\\n\\n    return token;\\n  }\\n\\n  async getToken(credential: Credential): Promise<string> {\\n    const foundUser = await this.characterRepository.findOne({\\n      where: {email: credential.email},\\n    });\\n    if (!foundUser) {\\n      throw new HttpErrors[\'NotFound\'](\\n        `User with email ${credential.email} not found.`,\\n      );\\n    }\\n\\n    if (credential.password != foundUser.password) {\\n      throw new HttpErrors.Unauthorized(\'The credentials are not correct.\');\\n    }\\n    const currentUser: MyUserProfile = _.pick(toJSON(foundUser), [\'email\', \'name\', \'permissions\']) as MyUserProfile;\\n    const token = await this.generateToken(currentUser);\\n    return token;\\n  }\\n}\\n```\\n\\nYou can also create your own authentication services, like Hash Password service in [the shopping example](https://github.com/strongloop/loopback4-example-shopping/blob/master/packages/shopping/src/services/hash.password.bcryptjs.ts).\\n\\n### Putting Everything Together\\n\\n#### Binding all the Pieces in `application.ts`\\n\\nOpen `src/application.ts`, and add the following imports.\\n\\n```ts\\nimport {asGlobalInterceptor} from \'@loopback/context\';\\nimport {MyAuthBindings,\\n        JWTService,\\n        JWTStrategy,\\n        UserPermissionsProvider\\n} from \'./authorization\';\\nimport {AuthorizationInterceptor} from \'./interceptors\';\\nimport {AuthenticationComponent,\\n       registerAuthenticationStrategy,\\n} from \'@loopback/authentication\';\\n```\\n\\nThen, add the following lines in the constructor.\\n\\n```ts\\nconstructor(options: ApplicationConfig = {}) {\\n  super(options);\\n  //add\\n  // Bind authentication component related elements\\n  this.component(AuthenticationComponent);\\n\\n  // Bind JWT & permission authentication strategy related elements\\n  registerAuthenticationStrategy(this, JWTStrategy);\\n  this.bind(MyAuthBindings.TOKEN_SERVICE).toClass(JWTService);\\n  this.bind(MyAuthBindings.USER_PERMISSIONS).toProvider(UserPermissionsProvider);\\n  ```\\n\\nIf you have more authentication strategies, add them in this way:\\n\\n```ts\\nregisterAuthenticationStrategy(this, NewStrategy);\\n```\\n\\n#### Specifying the Authentication Action in `sequence.ts`\\n\\nIn `src/sequence.ts`, add the following imports.\\n\\n```ts\\nimport {\\n  AuthenticationBindings,\\n  AuthenticateFn,\\n} from \'@loopback/authentication\';\\n```\\n\\nThen add those lines in the `handle` function.\\n\\n```ts\\nasync handle(context: RequestContext) {\\n  try {\\n    const {request, response} = context;\\n    const route = this.findRoute(request);\\n    const args = await this.parseParams(request, route);\\n\\n    //add authentication actions\\n    await this.authenticateRequest(request);\\n\\n    const result = await this.invoke(route, args);\\n    this.send(response, result);\\n  } catch (err) {\\n    if (\\n      err.code === \'AUTHENTICATION_STRATEGY_NOT_FOUND\' ||\\n      err.code === \'USER_PROFILE_NOT_FOUND\'\\n    ) {\\n      Object.assign(err, {statusCode: 401 /* Unauthorized */});\\n    }\\n    this.reject(context, err);\\n    return;\\n  }\\n}\\n```\\n\\nThis will check for authentication for every request.\\n\\n### Authenticate APIs\\n\\nOur Authentication and Authorization components are ready to use. Now we can apply their decorators to our REST API endpoints.\\n\\n#### CharacterController\\n\\nOpen `src/controllers/character.controller.ts`, add the following imports.\\n\\n```ts\\nimport {\\n  MyUserProfile,\\n  Credential,\\n  MyAuthBindings,\\n  PermissionKey,\\n  CredentialsRequestBody,\\n  UserRequestBody,\\n  UserProfileSchema,\\n  JWTService,\\n} from \'../authorization\';\\nimport {authenticate,\\n        TokenService,\\n        AuthenticationBindings,\\n} from \'@loopback/authentication\';\\n```\\n\\nInject `TOKEN_SERVICE` and `CURRENT_USER` in the constructor.\\n\\n```ts\\n@inject(MyAuthBindings.TOKEN_SERVICE)\\npublic jwtService: JWTService,\\n@inject.getter(AuthenticationBindings.CURRENT_USER)\\npublic getCurrentUser: Getter<MyUserProfile>,\\n```\\n\\nThen let\'s make some changes to the `@post /characters` API.\\n\\n```ts\\n@post(\'/characters\', {\\n  responses: {\\n    \'200\': {\\n      description: \'Character model instance\',\\n      content: {\'application/json\': {schema: {\'x-ts-type\': Character}}},\\n    },\\n  },\\n})\\nasync create(\\n  @requestBody(UserRequestBody) character: Character\\n): Promise<Character> {\\n    character.permissions = [PermissionKey.ViewOwnUser,\\n                             PermissionKey.CreateUser,\\n                             PermissionKey.UpdateOwnUser,\\n                             PermissionKey.DeleteOwnUser];\\n    if (await this.characterRepository.exists(character.email)){\\n      throw new HttpErrors.BadRequest(`This email already exists`);\\n    }\\n    else {\\n      const savedCharacter = await this.characterRepository.create(character);\\n      delete savedCharacter.password;\\n      return savedCharacter;\\n    }\\n}\\n```\\n\\nPut `UserRequestBody` in `@requestBody` decorator to specify the format of request body. That is how we validate the format of email and password fields.\\n\\nBecause this API is used to create a regular character, we will assign `ViewOwnUser`, `CreateUser`, `UpdateOwnUser`, and `DeleteOwnUser` permissions to the new character.\\n\\nWe also need to create an API for login.\\n\\n```ts\\n@post(\'/characters/login\', {\\n  responses: {\\n    \'200\': {\\n      description: \'Token\',\\n      content: {},\\n    },\\n  },\\n})\\nasync login(\\n  @requestBody(CredentialsRequestBody) credential: Credential,\\n): Promise<{token: string}> {\\n  const token = await this.jwtService.getToken(credential);\\n  return {token};\\n}\\n```\\n\\nThis API will use `JWTService` to verify user email and password, and then generate a JWT based on necessary credential information, like email, password and permissions.\\n\\nThe next API we need is `@get /characters/me`. It will show the user current logged in.\\n\\n```ts\\n@get(\'/characters/me\', {\\n  responses: {\\n    \'200\': {\\n      description: \'The current user profile\',\\n      content: {\\n        \'application/json\': {\\n          schema: UserProfileSchema,\\n        },\\n      },\\n    },\\n  },\\n})\\n@authenticate(\'jwt\', {\\"required\\": [PermissionKey.ViewOwnUser]})\\nasync printCurrentUser(\\n): Promise<MyUserProfile> {\\n  return await this.getCurrentUser();\\n}\\n```\\n\\nWe will authenticate this API with `@authenticate(\'jwt\', {\\"required\\": [PermissionKey.ViewOwnUser]})`. The first parameter `jwt` specify which authentication strategy you want to use for this API. If you have more than one strategy, make your choice here. The second parameter is an object which has one field `required` (array of `PermissionKey`). It specifies which permissions are required to access this API. In this case, the only required permission is `ViewOwnUser`. Because this API only shows current logged-in user information. You can customize permissions based on your APIs.\\n\\nTo get current logged-in user information, simply call `this.getCurrentUser()`.\\n\\nThe above three APIs show you most of the use cases. You should now have enough knowledge on how to apply LoopBack 4 authentication to your APIs.\\n\\nLet me show you one more example before we\'re done.\\n\\n#### AdminController\\n\\nLet\'s create another controller for admins. Admins should have privilege to view, update, and delete any user.\\n\\nHere is how we create an admin.\\n\\n```ts\\n@post(\'/admin\', {\\n  responses: {\\n    \'200\': {\\n      description: \'create admin\',\\n      content: {\'application/json\': {schema: {\'x-ts-type\': Character}}},\\n    },\\n  },\\n})\\nasync create(\\n  @param.query.string(\'admin_code\') admin_code: string,\\n  @requestBody() character: Character,\\n): Promise<Character> {\\n    if(admin_code != \'901029\'){\\n      throw new HttpErrors.Forbidden(\'WRONG_ADMIN_CODE\');\\n    }\\n\\n    character.permissions = [PermissionKey.ViewOwnUser,\\n                             PermissionKey.CreateUser,\\n                             PermissionKey.UpdateOwnUser,\\n                             PermissionKey.DeleteOwnUser,\\n                             PermissionKey.UpdateAnyUser,\\n                             PermissionKey.ViewAnyUser,\\n                             PermissionKey.DeleteAnyUser];\\n    if (await this.characterRepository.exists(character.email)){\\n      throw new HttpErrors.BadRequest(`This email already exists`);\\n    }\\n    else {\\n      const savedCharacter = await this.characterRepository.create(character);\\n      delete savedCharacter.password;\\n      return savedCharacter;\\n    }\\n}\\n```\\n\\nIt is very similar to the `@post /characters` API. The difference is it requires an `admin_code` to create an admin with three more permissions: `UpdateAnyUser`, `ViewAnyUser`, and `DeleteAnyUser`.\\n\\nThis is an API to show the information of all users that match the filter criteria.\\n\\n```ts\\n@get(\'/admin/characters\', {\\n  responses: {\\n    \'200\': {\\n      description: \'Array of Character model instances\',\\n      content: {\\n        \'application/json\': {\\n          schema: {type: \'array\', items: {\'x-ts-type\': Character}},\\n        },\\n      },\\n    },\\n  },\\n})\\n@authenticate(\'jwt\', {\\"required\\": [PermissionKey.ViewAnyUser]})\\nasync find(\\n  @param.query.object(\'filter\', getFilterSchemaFor(Character)) filter?: Filter,\\n): Promise<Character[]> {\\n  return await this.characterRepository.find(filter);\\n}\\n```\\n\\nAs you can see, this requires `ViewAnyUser` permission.\\n\\nYou can check my controllers [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part4/firstgame/src/controllers)\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we covered how to combine your self-defined authorization strategies and services with `@loopback/authentication` and how to apply it to your API.\\n\\nYou can always design your own strategies and services based on your project needs. For example, you may want to have a password hashing service, so that you don\'t directly save a user\'s raw password in the database. [Here](https://github.com/strongloop/loopback4-example-shopping/blob/master/packages/shopping/src/services/hash.password.bcryptjs.ts) is an example of how to implement a password hashing service.\\n\\n### What\'s Next?\\n\\nNext episode, we will deploy this project to cloud. In the meantime, you can learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"migrate-from-loopback-3-to-loopback-4","metadata":{"permalink":"/blog/migrate-from-loopback-3-to-loopback-4","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-06-12-migrate-from-loopback-3-to-loopback-4.md","source":"@site/blog/2019/2019-06-12-migrate-from-loopback-3-to-loopback-4.md","title":"Migrating from LoopBack 3 to LoopBack 4","description":"Originally published on strongloop.com","date":"2019-06-12T00:00:00.000Z","formattedDate":"June 12, 2019","tags":[{"label":"migration","permalink":"/blog/tags/migration"},{"label":"LoopBack 3","permalink":"/blog/tags/loop-back-3"}],"readingTime":1.25,"hasTruncateMarker":true,"authors":[{"name":"Nora Abdelgadir","title":"LoopBack Maintainer","url":"https://github.com/nabdelgadir","imageURL":"https://avatars0.githubusercontent.com/u/42985749","key":"nabdelgadir"}],"frontMatter":{"title":"Migrating from LoopBack 3 to LoopBack 4","date":"2019-06-12T00:00:00.000Z","authors":"nabdelgadir","slug":"migrate-from-loopback-3-to-loopback-4","tags":["migration","LoopBack 3"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 - User Authentication and Role-Based Access Control (Part 4)","permalink":"/blog/building-an-online-game-with-loopback-4-pt4"},"nextItem":{"title":"LoopBack 4 May 2019 Milestone Update","permalink":"/blog/may-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nFollowing the announcement of LoopBack 4 GA in October, LoopBack 3 entered Active Long Term Support (LTS). In March, we  announced that [LoopBack 3 will receive extended LTS](https://strongloop.com/strongblog/lb3-extended-lts/) until December 2019. We made this choice to provide LoopBack 3 users more time to move to LoopBack 4 and for us to improve the migration experience. In order to incrementally migrate from LoopBack 3 to LoopBack 4, we have since introduced a way to mount your LoopBack 3 applications in a LoopBack 4 project.\\n\\n\x3c!--truncate--\x3e\\n\\n[Miroslav](https://strongloop.com/authors/Miroslav_Bajto%C5%A1/) investigated different approaches for migration which you can see in the [Migration epic](https://github.com/strongloop/loopback-next/issues/1849). He settled on mounting the LoopBack 3 application in a LoopBack 4 project as part of incremental migration (see the [PoC](https://github.com/strongloop/loopback-next/pull/2318) here). In this approach, the entire LoopBack 3 application is mounted, including its runtime dependencies. The LoopBack 3 Swagger spec is also converted to LoopBack 4 OpenAPI v3 and a unified spec is created.\\n\\nIf you are a current LoopBack 3 user who wants to migrate to LoopBack 4, learn all the steps needed to mount your application in this [Migrating from LoopBack 3](https://loopback.io/doc/en/lb4/Migrating-from-LoopBack-3.html) doc.\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"may-2019-milestone","metadata":{"permalink":"/blog/may-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-06-05-may-milestone.md","source":"@site/blog/2019/2019-06-05-may-milestone.md","title":"LoopBack 4 May 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-06-05T00:00:00.000Z","formattedDate":"June 5, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":9.945,"hasTruncateMarker":true,"authors":[{"name":"Biniam Admikew","title":"LoopBack Maintainer","url":"https://github.com/b-admike","imageURL":"https://avatars.githubusercontent.com/u/13950637","key":"b-admike"}],"frontMatter":{"title":"LoopBack 4 May 2019 Milestone Update","date":"2019-06-05T00:00:00.000Z","authors":"b-admike","slug":"may-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"Migrating from LoopBack 3 to LoopBack 4","permalink":"/blog/migrate-from-loopback-3-to-loopback-4"},"nextItem":{"title":"Building an Online Game With LoopBack 4 - Customizing APIs in Controller (Part 3)","permalink":"/blog/building-an-online-game-with-loopback-4-pt3"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs the weather starts to warm up for summer, the LoopBack team has turned up the heat on the milestone tasks we planned for the month of May and beyond. We worked on areas such as:\\n\\n* Improving our documentation pages and API documentation.\\n* Giving users unified website experience on `loopback.io`.\\n* Making CI green across connector repositories and being able to test juggler 3.x and 4.x with connectors.\\n* Implementation of Interceptors in the LoopBack framework.\\n* Authentication extension point, refactoring authentication action, and using the new features in shopping example repository.\\n* Inclusion of related models in model relations.\\n* Testing out ways to roll out experimental features.\\n\\nThese are just the tip of the iceberg. Read on to find out more on what the LoopBack team accomplished this month.\\n\\n\x3c!--truncate--\x3e\\n\\n## Method Interceptor Support\\n\\nInterceptors are reusable functions to provide aspect-oriented logic around method invocations. There are many use cases for interceptors, such as:\\n\\n- Add extra logic before / after method invocation. For example, logging or measuring method invocations.\\n- Validate/transform arguments.\\n- Validate/transform return values.\\n- Catch/transform errors. For example, normalize error objects.\\n- Override the method invocation. For example, return from cache.\\n\\nSee [PR#2687](https://github.com/strongloop/loopback-next/pull/2687) for more details.\\n\\n## Binding Configuration\\n\\nTo allow bound items in the context to be configured, we introduced some conventions and corresponding APIs to make it simple and consistent in [PR#2259](https://github.com/strongloop/loopback-next/pull/2259).\\n\\nWe treat configurations for bound items in the context as dependencies, which can be resolved and injected in the same way of other forms of dependencies. For example, the `RestServer` can be configured with `RestServerConfig`.\\n\\n## New Mounted LoopBack 3 Application in LoopBack 4 Example\\n\\nWe introduced a [new example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application) that illustrates mounting an existing LoopBack 3 application in a LoopBack 4 project. We took the [`CoffeeShop` application](https://github.com/strongloop/loopback-getting-started) from loopback-getting-started and mounted it in a new LoopBack 4 project. The endpoints, including the OpenAPI spec, have also been mounted in the project. You can check out the example by running `lb4 example lb3-application`.\\n\\n## Model Definitions Reference in Operation Spec\\n\\nController methods can now reference model definitions through OpenAPI spec. This replaces the need to use `x-ts-type` extension to reference model schema. In addition, if an operation defines the model, another operation can reference that model without defining it.\\n\\nFor example, in the following code snippet, since the `Todo` model definition is provided by `@get(\'/todos\')`, `@get(\'/todos/{id\')` can now also reference it without defining it.\\n\u2003\\n```ts\\nclass MyController {\\n  @get(\'/todos\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Array of Category model instances\',\\n        content: {\\n          \'application/json\': {\\n            schema: {\\n              $ref: \'#/definitions/Todo\',\\n              definitions: {\\n                Todo: {\\n                  title: \'Todo\',\\n                  properties: {\\n                    title: {type: \'string\'},\\n                  },\\n                },\\n              },\\n            },\\n          },\\n        },\\n      },\\n    },\\n  })\\n  async find(): Promise<object[]> {\\n      /* \u2026 */\\n  }\\n\\n  @get(\'/todos/{id}\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Todo model instance\',\\n        content: {\\n          \'application/json\': {\\n            schema: {\\n              $ref: \'#/components/schemas/Todo\',\\n              },\\n            },\\n          },\\n        },\\n      },\\n    },\\n  })\\n  async findById(): Promise<object> {\\n    /* \u2026 */\\n  }\\n}\\n```\\n\\nTo make model references even easier to use, we have also introduced a new helper `getModelSchemaRef` which builds a `$ref` entry with accompanied schema in `definitions` from the given model instance. See [PR#2971](https://github.com/strongloop/loopback-next/pull/2971).\\n\\n```ts\\nclass MyController {\\n  @get(\'/todos\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Array of Category model instances\',\\n        content: {\\n          \'application/json\': {\\n            schema: getModelSchemaRef(Todo),\\n          },\\n        },\\n      },\\n    },\\n  })\\n  async find(): Promise<object[]> {\\n      /* \u2026 */\\n  }\\n\\n  @get(\'/todos/{id}\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Todo model instance\',\\n        content: {\\n          \'application/json\': {\\n            schema: getModelSchemaRef(Todo),\\n          },\\n        },\\n      },\\n    },\\n  })\\n  async findById(): Promise<object> {\\n    /* \u2026 */\\n  }\\n}\\n```\\n\\nIn the near future, we would like to leverage this new mechanism to emit different model schema for different API endpoints:\\n\\n- Response schema of `find` and `findById` endpoints should include navigational properties for related models.\\n- Response schema of `create` endpoint should exclude `id` and any other database-generated properties (e.g. `_rev` in CouchDB/Cloudant).\\n- Response schema of `updateById` and `updateAll` endpoints should mark all model properties as optional.\\n\\n## Better Formatting of Model Settings Object in Scaffolded Files\\n\\n[PR#2843](https://github.com/strongloop/loopback-next/pull/2843) improved the way how our CLI tool serialized model settings to TypeScript code.\\n\\nBefore this change, model settings object was converted to JSON, which produced non-idiomatic TypeScript code. For example:\\n\\n```ts\\n@model({ settings: {\\"mongodb\\": {\\"collection\\": \\"clients\\"}}})\\nexport class MyModel extends Entity {\\n  // ...\\n}\\n```\\n\\nNow we convert the object into TypeScript object definition. See below for an example:\\n\\n```ts\\n@model({\\n  settings: {\\n    mongodb: {collection: \'clients\'},\\n  }\\n})\\nexport class MyModel extends Entity {\\n  // ...\\n}\\n```\\n\\n## dataType: \'ObjectID\' for MongoDB Connector\\n\\nYou can set a model property\'s `mongodb` property definition `dataType` to \\"ObjectID\\" to enforce ObjectID coercion irrespective of the `strictObjectIDCoercion` setting.\\n\\nIn the following example, the `id` and `xid` will be coerced to `ObjectID` even if `strictObjectIDCoercion` is set to true.\\n\\n```js\\nconst User = ds.createModel(\\n  \'user\',\\n  {\\n    id: {type: String, id: true, mongodb: {dataType: \'ObjectID\'}},\\n    xid: {type: String, mongodb: {dataType: \'ObjectID\'}}\\n  },\\n  {strictObjectIDCoercion: true}\\n);\\n```\\nFor more details, see [PR#517](https://github.com/strongloop/loopback-connector-mongodb/pull/517).\\n\\n## Authentication\\n\\nThis month we implemented [a PoC PR](https://github.com/strongloop/loopback-next/pull/2822) to illustrate plugging in the passport strategy in the new published `@loopback/autthentication` module. The PR proves the new authentication action is able to verify a request with both passport based and non passport based strategy. Therefore we just deprecated the old passport adapter in story [2467](https://github.com/strongloop/loopback-next/issues/2467), and focus on the new adapter creation in story [2311](https://github.com/strongloop/loopback-next/issues/2311). \\n\\nThe initial proposal for the new adapter is wrapping each configured strategy instance so that it fits the `AuthenticationStrategy` interface. Raymond suggested exploring another approach which applies a wrapper to the `passport` module itself. And since the team is discussing the work flow of incrementally adding a new feature, Miroslav suggested moving the new passport adapter to a standalone experimental module along with the comparison between two proposals. Eventually the adapter will be a component that can be plugged into `@loopback/authentication`.\\n\\n## Experimental Feature Development\\n\\nWe\'ve introduced experimental features to achieve a balance between the high code quality and the development speed.\\n\\nAt first we tried keeping the lab packages in a mirror repository `loopback-labs` for the purpose of isolation, then graduate the features into `loopback-next` when they are production ready. During the spike, we realized a better way to isolate each feature: create and release each feature from its own branch, so that features are independent from each other and have their own life cycle. The releasing process is also simpler since it only targets on one package. With this in mind, and considering the synchronization effort between two repositories, we decided to keep lab packages stay in `loopback-next`.\\n\\nThe work flow of adding an experimental package is documented in https://github.com/strongloop/loopback-next/blob/labs/base/LABS.md. It explains how to create your experimental feature branch, incrementally improve the code and graduate the package.\\n\\n## Documentation\\n\\nWe took some time to rework outdated sections of our documentation pages in May. First of all, we updated docs on how to [create stub services](https://loopback.io/doc/en/lb4/Testing-your-application.html#create-a-stub-service) for controller unit tests. At the same time, we updated the status of auto-generated smoke test section and top-down application building. See [PR#2879](https://github.com/strongloop/loopback-next/pull/2879) for more details. Moreover, our [hasOne relation](https://loopback.io/doc/en/lb4/hasOne-relation.html) page also had some typos and errors and we were able to address them in [PR#2959](https://github.com/strongloop/loopback-next/pull/2959).\\n\\nIn [PR#2944](https://github.com/strongloop/loopback-next/pull/2994), we revamped the [Sequences](https://loopback.io/doc/en/lb4/Sequence.html) documentation page with information on what happens behind the scenes for some of the sequence actions like `invoke` and `send`. We also added details on how to retrieve query string parameters.\\n\\nWe added a new [Components](https://loopback.io/doc/en/lb4/Components.html) page to explain the shape and concept of components for extensibility as well as how they contribute artifacts to a LoopBack 4 application. For more details, check\\nout [PR#2702](https://github.com/strongloop/loopback-next/pull/2702) and [PR#2361](https://github.com/strongloop/loopback-next/pull/2361).\\n\\nIn [PR#2834](https://github.com/strongloop/loopback-next/pull/2834), we introduced [`@loopback/tsdocs`](https://github.com/strongloop/loopback-next/tree/master/packages/tsdocs) package which provides API Docs for the rest of the LB4 packages in our `loopback-next` monorepo using Microsoft\'s `api-extractor` and `api-documenter` tools. It also integrates the generated API Docs for consumption in `loopback.io`. You can see them live [here](https://loopback.io/doc/en/lb4/apidocs.index.html).\\n\\n## Examples for New LoopBack 4 Artifacts/ Concepts\\n\\nWe added a new [greeting-app](https://github.com/strongloop/loopback-next/tree/master/examples/greeting-app) that shows how to compose an application from component and controllers, interceptors, and observers. The application is built on top of [example-greeter-extension](https://github.com/strongloop/loopback-next/tree/master/examples/greeter-extension) and can greet users in different languages. It has a caching interceptor to handle multiple requests for the same payload (name and language) within a specific time. See [PR#2941](https://github.com/strongloop/loopback-next/pull/2941) for more details.\\n\\nOn the same note, we added [standalone examples](https://github.com/strongloop/loopback-next/tree/master/examples/context) for `@loopback/context` showing how to use the module as an Inversion of Control (IoC) and Dependency Injection (DI) container. We covered a wide array of usages for the utilities provided by the module such as context chaining, binding types, and customizing injection decorators/resolvers.\\n\\n## Unified Web Site Experience on loopback.io\\n\\nWe created the dedicated [web site for LoopBack 4](v4.loopback.io) last year. Now that LoopBack 4 has become the active release, we are moving the LoopBack 4 pages back to loopback.io web site.\\n\\nIn the meantime, we\'re actively attempting to rebuild the \u201cWho\u2019s using LoopBack\u201d section to showcase our users and the use cases. If you would like to be a part of it, please sign up [here](https://github.com/strongloop/loopback-next/issues/3047)! \\n\\n## Other Changes\\n\\n- [PR#2856](https://github.com/strongloop/loopback-next/pull/2856) fixed REST API Explorer to correctly handle both `basePath` configuration specified at LoopBack application/server level and `mountPath` provided by Express when the LB app is mounted on an Express application.\\n\\n- [PR#2823](https://github.com/strongloop/loopback-next/pull/2823) improved the OpenAPI spec emitted for LoopBack 3 models when the entire LB3 application is mounted in LB4 project. In particular, the schema for request bodies of \\"create\\" requests now excludes `id` (primary key) properties when the model is configured with `forceId: true` (which is the default).\\n\\n- Keeping dependencies up-to-date is time consuming, especially in monorepos. Originally, we were used [GreenKeeper](https://greenkeeper.io) to automate the task. Unfortunately, GreenKeeper does not support the combination of lerna\\n  monorepos with package-locks enabled (see [greenkeeper#1080](https://github.com/greenkeeperio/greenkeeper/issues/1080)).\\n\\n- In May, we migrated our [Shopping example app](https://github.com/strongloop/loopback4-example-shopping) to [RenovateBot](https://renovatebot.com). The migration went well, and we are now migrating the main [loopback-next](https://github.com/strongloop/loopback-next) monorepo too.\\n\\n- [PR#3013](https://github.com/strongloop/loopback-next/pull/3013) removed implicit dependency of `@loopback/testlab` on `@types/mocha`. This dependency was preventing LoopBack projects to use Jest test framework instead of Mocha. Now that the fix was landed and published to npm registry, `@loopback/testlab` should work with any test framework that provides `it` and `it.skip` APIs.\\n\\n- [PR#2996](https://github.com/strongloop/loopback-next/pull/2996) makes sure we stay current with TypeScript and upgrades our project to use version `3.5.1`.\\n\\n## LoopBack 3\\n\\nNode.js 6 went end-of-life at the end of April. We are incrementally removing it from our CI build configurations and updating our `package.json` files to bump up the minimum supported version to Node.js 8.\\n\\nWhen we introduced version 4 of loopback-datasource-juggler back in 2018, we did not update connector repositories to run tests against this new juggler version too. As a result, we were encountering failed builds when back-porting pull requests from juggler 4.x to 3.x. We looked into different ways how to address this problem and decided to go with a solution where a single connector run shared tests from multiple loopback-datasource-juggler versions. Some of the connectors have been already updated, we will be updating the rest in the next months.\\n\\nAdditional changes:\\n\\n- `generator-loopback`: The version of the Node.js engine is updated to >= 8 because Node.js 6 entered EOF in April 2019.\\n- `generator-loopback`: We fixed two regression bugs to honour the name argument of command `lb swagger` and `lb boot-script`.\\n- `loopback-passport-component`: We landed a community PR to support user ldap profile configuration with group search for Microsoft active directory, you can check the details in PR [#267](https://github.com/strongloop/loopback-component-passport/pull/272).\\n- `loopback-connector-cloudant`: The CI failures are fixed after upgrading the dependency version to `loopback-connector-couchdb2@1.4.0`.\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"building-an-online-game-with-loopback-4-pt3","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt3","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-05-28-building-an-online-game-with-loopback-4-pt3.md","source":"@site/blog/2019/2019-05-28-building-an-online-game-with-loopback-4-pt3.md","title":"Building an Online Game With LoopBack 4 - Customizing APIs in Controller (Part 3)","description":"Originally published on strongloop.com","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":7.68,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 - Customizing APIs in Controller (Part 3)","date":"2019-05-28T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt3","tags":["how-to"]},"prevItem":{"title":"LoopBack 4 May 2019 Milestone Update","permalink":"/blog/may-2019-milestone"},"nextItem":{"title":"Building an Online Game With LoopBack 4, Part 2 - Generating Universally Unique ID and Managing Models Relationships","permalink":"/blog/building-an-online-game-with-loopback-4-pt2"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 3: Customizing APIs in Controller\\n\\n### Introduction\\n\\nIn this series, I\u2019m going to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\u2019ll create a new project I\u2019ve been working on: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game also allows multiple players to log in and play with their friends.\\n\\n### Previously on Building an Online Game With LoopBack 4\\n\\nIn the last episode, we used a third-party library to generate UUID and built relations between `character`, `weapon`, `armor`, and `skill`.\\n\\nHere are the previous episodes:\\n\\n* [Part 1: Building a Simple LoopBack Project With MongoDB](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/)\\n* [Part 2: Generating Universally Unique ID and Managing Models Relationships](https://strongloop.com/strongblog/building-an-online-game-with-loopback-4-pt2/)\\n\\n\x3c!--truncate--\x3e\\n\\n### In This Episode\\n\\nWe already have some simple APIs in our project. They are all default CRUD (Create, Read, Update, and Delete) APIs that auto-generated by LoopBack 4. In this episode, we will create our own APIs to achieve the following functions for character updating:\\n\\n![models](./images/my-first-api-p2-models.png)\\n\\n* The ability for users to equip their character with weapon, armor, and skill. This function should also be able to allow users to change weapon, armor, and skill for their character. In any of these cases, we should update `defence` and `attack` accordingly.\\n* The ability for users to unequip their character. We also need to update `defence` and `attack`.\\n* The ability to level up a character when it gets enough experience. We should update `currentExp`, `nextLevelExp`, `level`, `maxHealth`, `currentHealth`, `maxMana`, `currentMana`, `attack`, and `defence`.\\n* The ability to check a character\'s `weapon`, `armor`, and `skill` information.\\n\\n### Create Controller\\n\\nFirst, let\'s create a controller for updating your character. Run `lb4 controller` in your project root.\\n\\n```\\nwenbo:firstgame wenbo$ lb4 controller\\n? Controller class name: UpdateCharacter\\n? What kind of controller would you like to generate? REST Controller with CRUD functions\\n? What is the name of the model to use with this CRUD repository? Character\\n? What is the name of your CRUD repository? CharacterRepository\\n? What is the type of your ID? string\\n? What is the base HTTP path name of the CRUD operations? /updatecharacter\\n   create src/controllers/update-character.controller.ts\\n   update src/controllers/index.ts\\n\\nController UpdateCharacter was created in src/controllers/\\n```\\n\\nOpen `/src/controllers/update-character.controller.ts`. Add the following imports because this controller is\\nassociated with `Armor`, `Weapon`, `skill` as well.\\n\\n```ts\\nimport {Armor, Weapon, Skill} from \'../models\';\\nimport {WeaponRepository, ArmorRepository, SkillRepository } from \'../repositories\';\\n```\\n\\nThen add the following lines into constructor:\\n\\n```ts\\nconstructor(\\n  @repository(CharacterRepository)\\n  public characterRepository : CharacterRepository,\\n\\n  //add following lines\\n  @repository(WeaponRepository)\\n  public weaponRepository : WeaponRepository,\\n  @repository(ArmorRepository)\\n  public armorRepository : ArmorRepository,\\n  @repository(SkillRepository)\\n  public skillRepository : SkillRepository,\\n) {}\\n\\n```\\n\\nThis will connect this controller with `Armor`, `Weapon`, and `skill`. You can now delete all those default APIs since we don\'t need them anymore.\\n\\n### Equip Character\\n\\nThe first API we need is `@patch \'/updatecharacter/{id}/weapon\'`. In this game, a character can only have one weapon. With that in mind, this API\'s job is to equip characters with a weapon and unequip the old weapon if there is one.\\n\\nHere is code for this API:\\n\\n```ts\\n@patch(\'/updatecharacter/{id}/weapon\', {\\n  responses: {\\n    \'200\': {\\n      description: \'update weapon\',\\n      content: {\'application/json\': {schema: Weapon}},\\n    },\\n  },\\n})\\nasync updateWeapon(\\n  @param.path.string(\'id\') id: string,\\n  @requestBody() weapon: Weapon,\\n): Promise<Weapon> {\\n  //equip new weapon\\n  let char: Character = await this.characterRepository.findById(id);\\n  char.attack! += weapon.attack;\\n  char.defence! += weapon.defence;\\n\\n  //unequip old weapon\\n  let filter: Filter = {where:{\\"characterId\\":id}};\\n  if((await this.weaponRepository.find(filter))[0] != undefined){\\n    let oldWeapon: Weapon = await this.characterRepository.weapon(id).get();\\n    char.attack! -= oldWeapon.attack;\\n    char.defence! -= oldWeapon.defence;\\n    await this.characterRepository.weapon(id).delete();\\n  }\\n  await this.characterRepository.updateById(id, char);\\n  return await this.characterRepository.weapon(id).create(weapon);\\n}\\n```\\n\\nLet\'s go over it line by line.\\n\\nThis is the function signature. It means this API expects to get a character ID from URL and weapon entity from body.\\n\\n```ts\\nasync updateWeapon(\\n  @param.path.string(\'id\') id: string,\\n  @requestBody() weapon: Weapon,\\n): Promise<Weapon> {\\n\\n  ...\\n```\\n\\nThe following lines will find the character entity from our database. Then we will update this character\'s `attack` and `defence`. The `!` after `attack` and `defence` tells the compiler we guarantee those variables are not undefined. Otherwise, we will get a compile error. In the `weapon` model, `attack` and `defence` are both required, so these cannot be empty.\\n\\n```ts\\n//equip new weapon\\nlet char: Character = await this.characterRepository.findById(id);\\nchar.attack! += weapon.attack;\\nchar.defence! += weapon.defence;\\n```\\n\\nThis block will check if this character already has a weapon. If so, it will update the character\'s `attack` and `defence` and remove the old weapon from database.\\n\\n```ts\\n//unequip old weapon\\nlet filter: Filter = {where:{\\"characterId\\":id}};\\nif((await this.weaponRepository.find(filter))[0] != undefined){\\n  let oldWeapon: Weapon = await this.characterRepository.weapon(id).get();\\n  char.attack! -= oldWeapon.attack;\\n  char.defence! -= oldWeapon.defence;\\n  await this.characterRepository.weapon(id).delete();\\n}\\n```\\n\\nThose two lines will update the update character information in our database and put the new weapon into it.\\n\\n```ts\\nawait this.characterRepository.updateById(id, char);\\nreturn await this.characterRepository.weapon(id).create(weapon);\\n```\\n\\nWe need to handle `armor` exactly the same. But `skill` is a little bit different, because in this game `skill` will not influence `attack` and `defence`. We just need to update our new skill and delete the old skill.\\n\\n```ts\\n@patch(\'/updatecharacter/{id}/skill\', {\\n  responses: {\\n    \'200\': {\\n      description: \'update skill\',\\n      content: {\'application/json\': {schema: Skill}},\\n    },\\n  },\\n})\\nasync updateSkill(\\n  @param.path.string(\'id\') id: string,\\n  @requestBody() skill: Skill,\\n): Promise<Skill> {\\n  await this.characterRepository.skill(id).delete();\\n  return await this.characterRepository.skill(id).create(skill);\\n}\\n```\\n\\nWhen we delete a character, we also need to delete its `weapon`, `armor`, and `skill`. To do this, open `/src/controllers/character.controller.ts` and add the following lines in `del \'/characters/{id}` API.\\n\\n```ts\\n@del(\'/characters/{id}\', {\\n  responses: {\\n    \'204\': {\\n      description: \'Character DELETE success\',\\n    },\\n  },\\n})\\nasync deleteById(\\n  @param.path.string(\'id\') id: string\\n): Promise<void> {\\n  //delete weapon, armor, and skill\\n  await this.characterRepository.weapon(id).delete();\\n  await this.characterRepository.armor(id).delete();\\n  await this.characterRepository.skill(id).delete();\\n  ///\\n  await this.characterRepository.deleteById(id);\\n}\\n```\\n\\n### Unequip Character\\n\\nUnequipping the character is very easy.\\n\\nFor `weapon` and `armor`, simply remove them from database and update `attack` and `defence`.\\n\\n```ts\\n@del(\'/updatecharacter/{id}/weapon\', {\\n  responses: {\\n    \'204\': {\\n      description: \'DELETE Weapon\',\\n    },\\n  },\\n})\\nasync deleteWeapon(\\n  @param.path.string(\'id\') id: string\\n): Promise<void> {\\n  //unequip old weapon\\n  let filter: Filter = {where:{\\"characterId\\":id}};\\n  if((await this.weaponRepository.find(filter))[0] != undefined){\\n    let oldWeapon: Weapon = await this.characterRepository.weapon(id).get();\\n    let char: Character = await this.characterRepository.findById(id);\\n    char.attack! -= oldWeapon.attack!;\\n    char.defence! -= oldWeapon.defence!;\\n    await this.characterRepository.weapon(id).delete();\\n    await this.characterRepository.updateById(id, char);\\n  }\\n}\\n```\\n\\nFor `skill`, just remove it from database.\\n\\n```ts\\n@del(\'/updatecharacter/{id}/skill\', {\\n  responses: {\\n    \'204\': {\\n      description: \'DELETE Skill\',\\n    },\\n  },\\n})\\nasync deleteSkill(\\n  @param.path.string(\'id\') id: string\\n): Promise<void> {\\n    await this.characterRepository.skill(id).delete();\\n}\\n```\\n\\n### Levelling Up a Character\\n\\nWhen a character has enough experience, we reward it by levelling up. In `/src/controllers/update-character.controller.ts`:\\n\\n```ts\\n@patch(\'/updatecharacter/{id}/levelup\', {\\n  responses: {\\n    \'200\': {\\n      description: \'level up\',\\n      content: {\'application/json\': {schema: Character}},\\n    },\\n  },\\n})\\nasync levelUp(@param.path.string(\'id\') id: string): Promise<Character> {\\n    let char: Character = await this.characterRepository.findById(id);\\n    let levels: number = 0;\\n    while(char.currentExp! >= char.nextLevelExp!){\\n      levels++;\\n      char.currentExp! -= char.nextLevelExp!;\\n      char.nextLevelExp! += 100;\\n    }\\n    char.level! += levels;\\n    char.maxHealth! += 10 * levels;\\n    char.currentHealth! = char.maxHealth!;\\n    char.maxMana! += 5 * levels;\\n    char.currentMana! = char.maxMana!;\\n    char.attack! += 3 * levels;\\n    char.defence! += levels;\\n    await this.characterRepository!.updateById(id, char);\\n    return char;\\n}\\n```\\n\\nLet\'s go over this line by line.\\n\\nIf a character just beat a very strong enemy and gained a lot of experience, it could level up more than once. So the first thing we need to do is figure out how many times we need to level up.\\n\\n```ts\\nlet levels: number = 0;\\nwhile(char.currentExp! >= char.nextLevelExp!){\\n  levels++;\\n  char.currentExp! -= char.nextLevelExp!;\\n  char.nextLevelExp! += 100;\\n}\\n```\\n\\nThen we can update everything accordingly.\\n\\n```ts\\nchar.level! += levels;\\nchar.maxHealth! += 10 * levels;\\nchar.currentHealth! = char.maxHealth!;\\nchar.maxMana! += 5 * levels;\\nchar.currentMana! = char.maxMana!;\\nchar.attack! += 3 * levels;\\nchar.defence! += levels;\\n```\\n\\nLastly, we update this character in database.\\n\\n```ts\\nawait this.characterRepository!.updateById(id, char);\\n```\\n\\n### Check Character Information\\n\\nThe last function we need to achieve is the ability to check character information.\\n\\nHere is the code for this API:\\n\\n```ts\\n@get(\'/updatecharacter/{id}\', {\\n  responses: {\\n    \'200\': {\\n      description: \'armor, weapon, and skill info\',\\n      content: {},\\n    },\\n  },\\n})\\nasync findById(\\n  @param.path.string(\'id\') id: string,\\n): Promise<any[]> {\\n  let res: any[] = [\'no weapon\', \'no armor\', \'no skill\'];\\n\\n  let filter: Filter = {where:{\\"characterId\\":id}};\\n  if((await this.weaponRepository.find(filter))[0] != undefined){\\n    res[0] = await this.characterRepository.weapon(id).get()\\n  }\\n  if((await this.armorRepository.find(filter))[0] != undefined){\\n    res[1] = await this.characterRepository.armor(id).get()\\n  }\\n  if((await this.skillRepository.find(filter))[0] != undefined){\\n    res[2] = await this.characterRepository.skill(id).get()\\n  }\\n  return res;\\n}\\n\\n```\\n\\nWe first create an array contains three elements: \'no weapon\', \'no armor\', \'no skill\'.\\n\\nThen we will check our database. For example, if this character has a weapon, we will replace `no weapon` with the weapon information. Lastly, we return the array as result.\\n\\nThat is all we want to achieve in this episode. If you can follow all those steps, you should be able to try those API at [http://[::1]:3000](http://[::1]:3000)\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part3/firstgame) for the code of this episode.\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we covered the how to customize APIs. You can always implement your own amazing idea in your LoopBack 4 project.\\n\\n### What\'s Next?\\n\\nIn next episode, we will add user authentication and role-based access control to this project.\\n\\nIn the meantime, you can learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"building-an-online-game-with-loopback-4-pt2","metadata":{"permalink":"/blog/building-an-online-game-with-loopback-4-pt2","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-05-15-building-an-online-game-with-loopback-4-pt2.md","source":"@site/blog/2019/2019-05-15-building-an-online-game-with-loopback-4-pt2.md","title":"Building an Online Game With LoopBack 4, Part 2 - Generating Universally Unique ID and Managing Models Relationships","description":"Originally published on strongloop.com","date":"2019-05-15T00:00:00.000Z","formattedDate":"May 15, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":8.415,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4, Part 2 - Generating Universally Unique ID and Managing Models Relationships","date":"2019-05-15T00:00:00.000Z","authors":"wenbo","slug":"building-an-online-game-with-loopback-4-pt2","tags":["how-to"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 - Customizing APIs in Controller (Part 3)","permalink":"/blog/building-an-online-game-with-loopback-4-pt3"},"nextItem":{"title":"LoopBack 4 April 2019 Milestone Update","permalink":"/blog/april-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 2: Generating Universally Unique ID and Managing Models Relationships  \\n\\n### Introduction\\n\\nIn this series, I\u2019m going to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\u2019ll create a new project I\u2019ve been working on: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game also allows multiple players to log in and play with their friends.\\n\\n### Previously on Building an Online Game With LoopBack 4\\n\\nIn the previous episode, we created a foundation for our project. Now we have some basic APIs to create, edit, and delete a character.\\n\\nHere is the previous episode:\\n\\n* [Part 1: Building a Simple LoopBack Project With MongoDB](https://strongloop.com/strongblog/building-online-game-with-loopback-4-pt1/)\\n\\n\x3c!--truncate--\x3e\\n\\n### In This Episode\\n\\nFirst, we will use a third-party library in our LoopBack 4 project to generate unique character IDs. Then we will create `weapon`, `armor`, and `skill` models and build relationships between those models.\\n\\nLoopback 4 supports three relations for now:\\n\\n* [HasMany](https://loopback.io/doc/en/lb4/HasMany-relation.html)\\n* [BelongsTo](https://loopback.io/doc/en/lb4/BelongsTo-relation.html)\\n* [HasOne](https://loopback.io/doc/en/lb4/hasOne-relation.html)\\n\\nWe will use `HasOne` in this episode.\\n\\nYou can check [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part2) for the code of this episode.\\n\\n### Universally Unique ID (UUID)\\n\\nIn the last episode, we used a while loop to generate continuous character IDs. However, that could be disaster in a real world application. Because fetching data from database is expensive. We don\'t want to do that hundreds times to just find a unique character ID. On the other hand, we don\'t really need continuous IDs, just unique IDs to distinguish characters. So we will use a better approach to generate universally unique IDs (UUID).\\n\\nMongoDB can generate unique IDs for us. You can check more details [here](https://github.com/strongloop/loopback-next/issues/1875) for how to do that. However, this approach may result in changing a lot of code.\\n\\nSo, we are going to use a third-party library called [uuid](https://www.npmjs.com/package/uuid). It\'s very easy to use and I think it\'s a good idea to show you how to use a third-party library in LoopBack 4 project. Run `npm install --save @types/uuid` at your project root to install it.\\n\\nThen go back to `src/models/character.model.ts` and change the type of `id` to string. Because [uuid](https://www.npmjs.com/package/uuid) can only generate string IDs.\\n\\n```ts\\n  @property({\\n    //type: \'number\',\\n    type: \'string\',\\n    id: true,\\n  })\\n  //id?: number;\\n  id?: string;\\n```\\n\\nGo to `src/controllers/character.controller.ts`. In the `get /characters/{id}` API, change the type of `id` to `string`.\\n\\n```ts\\n  @get(\'/characters/{id}\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Character model instance\',\\n        content: {\'application/json\': {schema: {\'x-ts-type\': Character}}},\\n      },\\n    },\\n  })\\n  async findById(\\n    //@param.path.number(\'id\') id: number\\n    @param.path.string(\'id\') id: string\\n  ): Promise<Character> {\\n    return await this.characterRepository.findById(id);\\n  }\\n```\\nThen do the same thing for `patch /characters/{id}`, `put /characters/{id}`, and `del /characters/{id}` APIs.\\n\\nThe [uuid](https://www.npmjs.com/package/uuid) can generate 36 digits string IDs. The implementation of uuid library is using some high distinction values (like DNS, local time, IP address etc) as the seed to randomly generate strings to reduce the chance of duplication. We can simply call the function `uuid()` to use this library.\\n\\nRemember how we generated a character ID in the last episode? We can do it in a very elegant way by using `default` keyword in `model`.\\n\\nOpen `src/controllers/character.controller.ts` and remove following code from `post /characters` API:\\n\\n```ts\\n@post(\'/characters\', {\\n  responses: {\\n    \'200\': {\\n      description: \'Character model instance\',\\n      content: {\'application/json\': {schema: {\'x-ts-type\': Character}}},\\n    },\\n  },\\n})\\nasync create(@requestBody() character: Character): Promise<Character> {\\n  /**remove this\\n  let characterId = 1;\\n  while(await this.characterRepository.exists(characterId)){\\n    characterId ++;\\n  }\\n  character.id = characterId;\\n  */\\n    return await this.characterRepository.create(character);\\n}\\n```\\n\\nOpen `src/models/character.model.ts`, and add the following import. This will import `uuid` so we can use it in our code.\\n\\n```ts\\nimport {v4 as uuid} from \'uuid\';\\n```\\n\\nAdd the following line to generate character ID as `default`:\\n\\n```ts\\n  @property({\\n    type: \'string\',\\n    id: true,\\n    //add this line\\n    default: () => uuid(),\\n  })\\n  id?: string;\\n```\\n\\nThat is how we generate UUID for `character`. We will use the same way to generate UUID for other models later.\\n\\n### Model Relations\\n\\nWe will create `weapon`, `armor`, and `skill` models. Each `character` may have one `weapon`, one `armor`, and one `skill`. It is a [HasOne](https://loopback.io/doc/en/lb4/hasOne-relation.html) relationship.\\n\\n![Models](./images/my-first-api-p2-models.png)\\n\\nLast episode, we built APIs for `character` in the order of model, datasource, repository, and controller. Now we will do it in the same way for `weapon`, `armor`, and `skill`. Note that we are not going to cover controller today, because I will have a whole episode focused on the work required (and there is a lot!).\\n\\n#### Model\\n\\nFirst, we need to create `weapon` model. It\'s very similar to what we did in last episode. Run `lb4 model` at project root.\\n\\n```\\nwenbo:firstgame wenbo$ lb4 model\\n? Model class name: weapon\\n? Please select the model base class Entity (A persisted model with an ID)\\n? Allow additional (free-form) properties? No\\nLet\'s add a property to Weapon\\nEnter an empty property name when done\\n\\n? Enter the property name: id\\n? Property type: string\\n? Is id the ID property? Yes\\n? Is it required?: No\\n? Default value [leave blank for none]:\\n\\nLet\'s add another property to Weapon\\nEnter an empty property name when done\\n\\n? Enter the property name: name\\n? Property type: string\\n? Is it required?: Yes\\n? Default value [leave blank for none]:\\n\\nLet\'s add another property to Weapon\\nEnter an empty property name when done\\n\\n? Enter the property name: attack\\n? Property type: number\\n? Is it required?: Yes\\n? Default value [leave blank for none]:\\n\\nLet\'s add another property to Weapon\\nEnter an empty property name when done\\n\\n? Enter the property name: defence\\n? Property type: number\\n? Is it required?: Yes\\n? Default value [leave blank for none]:\\n```\\nDo the same thing for `armor` and `skill`.\\n\\n#### Defining `hasOne` Model Relation in Model\\n\\nNow let\'s add relationships to `character` model to indicate that a `character` has one `weapon`, `armor`, and `skill`. You can check [here](https://loopback.io/doc/en/lb4/Relations.html) for more details on model relationship. You can also take a look at the [TodoList tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial-model.html) to see how it handles a relationship.\\n\\nAdd the following imports to the head of `character.model.ts`.\\n\\n```ts\\nimport {Armor} from \'./armor.model\';\\nimport {Weapon} from \'./weapon.model\';\\nimport {Skill} from \'./skill.model\';\\n```\\n\\nThen add the following code into `character.model.ts` after those auto-generated properties. That means each `character` may have one `weapon`, `armor`, and `skill`.\\n\\n```ts\\n  @hasOne(() => Armor)\\n  armor?: Armor;\\n\\n  @hasOne(() => Weapon)\\n  weapon?: Weapon;\\n\\n  @hasOne(() => Skill)\\n  skill?: Skill;\\n```\\n\\nNext, we need to add a relationship for `weapon.model.ts` as well. Add the following imports to the head.\\n\\n```ts\\nimport {Character} from \'./character.model\';\\nimport {v4 as uuid} from \'uuid\';\\n```\\n\\nThen add this code after those auto-generated properties.\\n\\n```ts\\n  @belongsTo(() => Character)\\n    characterId: string;\\n```\\n\\nThis gives `weapon` another property `characterId` means identifies the character this weapon belongs to. It\'s similar to the foreign key in a relational database.\\n\\nDon\'t forget to generate UUID for `weapon`:\\n\\n```ts\\n@property({\\n  type: \'string\',\\n  id: true,\\n  //add this line\\n  default: () => uuid(),\\n})\\nid?: string;\\n```\\n\\nDo the same thing for `armor.model.ts` and `skill.model.ts`. Now our models are all set.\\n\\nYou can check my code for all models at [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part2/firstgame/src/models).\\n\\n#### Datasource\\n\\nThere is no need to create new datasource. We can use the MongoDB we created in last episode.\\n\\n#### Repository\\n\\nRun `lb4 repository` at your project root.\\n\\n```\\n? Please select the datasource MongoDatasource\\n? Select the model(s) you want to generate a repository Weapon\\n? Please select the repository base class DefaultCrudRepository (Legacy juggler bridge)\\n   create src/repositories/weapon.repository.ts\\n   update src/repositories/index.ts\\n```\\n\\nThen create repositories for `armor` and `skill` in the same way.\\n\\n#### Defining `hasOne` Model Relation in Repository\\n\\nLet\'s add relations for `character.repository.ts` first. Add following imports:\\n\\n```ts\\nimport {HasOneRepositoryFactory, juggler, repository} from \'@loopback/repository\';\\nimport {Armor, Weapon, Skill} from \'../models\';\\nimport {Getter} from \'@loopback/core\';\\nimport {ArmorRepository} from \'./armor.repository\';\\nimport {WeaponRepository} from \'./weapon.repository\';\\nimport {SkillRepository} from \'./skill.repository\';\\n```\\n\\nAdd the following code before the constructor:\\n\\n```ts\\n  public armor: HasOneRepositoryFactory<\\n    Armor,\\n    typeof Character.prototype.id\\n  >;\\n\\n  public weapon: HasOneRepositoryFactory<\\n    Weapon,\\n    typeof Character.prototype.id\\n  >;\\n\\n  public skill: HasOneRepositoryFactory<\\n    Skill,\\n    typeof Character.prototype.id\\n  >;\\n```\\n\\nThis means `character` may have one `weapon`, `armor`, and `skill` ID. Then we are able to find the correct entity by that ID.\\n\\nThen change the constructor to this:\\n\\n```ts\\n  constructor(\\n    @inject(\'datasources.mongo\') dataSource: MongoDataSource,\\n    @repository.getter(ArmorRepository)\\n    protected armorRepositoryGetter: Getter<ArmorRepository>,\\n    @repository.getter(WeaponRepository)\\n    protected weaponRepositoryGetter: Getter<WeaponRepository>,\\n    @repository.getter(SkillRepository)\\n    protected skillRepositoryGetter: Getter<SkillRepository>,\\n  ) {\\n    super(Character, dataSource);\\n    this.armor = this.createHasOneRepositoryFactoryFor(\'armor\', armorRepositoryGetter);\\n    this.weapon = this.createHasOneRepositoryFactoryFor(\'weapon\', weaponRepositoryGetter);\\n    this.skill = this.createHasOneRepositoryFactoryFor(\'skill\', skillRepositoryGetter);\\n  }\\n```\\n\\nThis can help you to assign `weapon`, `armor`, and `skill` to `character.`\\n\\nOn the other hand, what we need to do for the `weapon.repository.ts` is kind of the same. Instead of `HasOneRepositoryFactory`, we add `BelongsToAccessor` before constructor.\\n\\n```ts\\n  public readonly character: BelongsToAccessor<\\n    Character,\\n    typeof Weapon.prototype.id\\n  >;\\n```\\n\\nAnd change the constructor to this:\\n\\n```ts\\n  constructor(\\n    @inject(\'datasources.mongo\') dataSource: MongoDataSource,\\n    @repository.getter(\'CharacterRepository\')\\n    protected characterRepositoryGetter: Getter<CharacterRepository>,\\n  ) {\\n    super(Weapon, dataSource);\\n    this.character = this.createBelongsToAccessorFor(\'character\',characterRepositoryGetter);\\n  }\\n```\\n\\nDon\'t forget to add imports at the head of `weapon.repository.ts`.\\n\\n```ts\\nimport {BelongsToAccessor, juggler, repository} from \'@loopback/repository\';\\nimport {Character} from \'../models\';\\nimport {inject} from \'@loopback/core\';\\nimport {CharacterRepository} from \'./character.repository\';\\n```\\nThen do the same thing for `armor.repository.ts` and `skill.repository.ts`. And our repositories are all set.\\n\\nYou can check my code for all repositories at [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part2/firstgame/src/repositories).\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we used a third-party library to generate UUID. You can easily use any external library in you LoopBack 4 project.\\n\\nWe also built relations between `character`, `weapon`, `aromr`, and `skill`. In a real world application, most of entities have relationships between each other. You can use LoopBack 4 to easily manage that in your project.\\n\\n### What\'s Next?\\n\\nIn our next episode, we will do a lot of coding in `controller` to create `weapon`, `armor`, `skill` and equip a character with them. Controller is where you achieve most of your project functions and business logic. I am sure we will have a lot of fun in next episode.\\n\\nIn the meantime, you can learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"april-2019-milestone","metadata":{"permalink":"/blog/april-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-05-03-april-milestone.md","source":"@site/blog/2019/2019-05-03-april-milestone.md","title":"LoopBack 4 April 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-05-03T00:00:00.000Z","formattedDate":"May 3, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":8.87,"hasTruncateMarker":true,"authors":[{"name":"Dominique Emond","title":"LoopBack Maintainer","url":"https://github.com/emonddr","imageURL":"https://avatars0.githubusercontent.com/u/6864736","key":"emonddr"}],"frontMatter":{"title":"LoopBack 4 April 2019 Milestone Update","date":"2019-05-03T00:00:00.000Z","authors":"emonddr","slug":"april-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"Building an Online Game With LoopBack 4, Part 2 - Generating Universally Unique ID and Managing Models Relationships","permalink":"/blog/building-an-online-game-with-loopback-4-pt2"},"nextItem":{"title":"Building an Online Game With LoopBack 4 (Part 1)","permalink":"/blog/building-online-game-with-loopback-4-pt1"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nApril was a very productive month for the LoopBack team! We focused on the following areas:\\n\\n* Strong referential integrity for relations\\n* Model discovery\\n* Basic Life Cycle Support\\n* Adding more architectural patterns to support extensions\\n* Authentication\\n* Node 12 is now officially supported by LoopBack 4\\n* Exposing LoopBack 3 applications in LoopBack 4 projects\\n\\nBesides the items above, we landed several additional improvements. Keep reading to learn more details.\\n\\n\x3c!--truncate--\x3e\\n\\n## Spike on UNIQUE and FOREIGN KEY Constraints\\n\\nRelations like HasMany, HasOne and BelongsTo depend on the underlying database to enforce integrity and referential constraints. At the moment, LoopBack assumes those constraints are either already defined (when working with existing database schema) or created manually by the user (when creating schema from LoopBack models). This manual step is very cumbersome. Secondly, the database migration provided by LoopBack does not provide any information about such steps and thus it\'s easy for inexperienced users to unknowingly create database schema allowing race conditions and creating room for inconsistency in the stored data.\\n\\nIdeally, we want developers to include any additional constraints in the definition of models and properties, and have our connectors translate these constraints to database-specific setup instruction as part of schema migration.\\n\\nHistorically, LoopBack did provide some level of support for indexes and foreign keys. Unfortunately, this was implemented at connector level and each connector provided a slightly different flavor.\\n\\nTo improve this situation, we started with some research on the current status of support in different connectors and proposed a new definition syntax that will become a new standard for LoopBack models.\\n\\nFor example, a HasOne relation needs to define a UNIQUE index and a FOREIGN KEY constraint for the property storing relational link. The proposed syntax makes this very easy to express directly in your TypeScript source code:\\n\\n```ts\\n@model()\\nexport class TodoListImage extends Entity {\\n\\n  @belongsTo(\\n    () => TodoList,\\n    {},\\n    {\\n      unique: true,\\n      references: {\\n        model: () => TodoList,\\n        property: \'id\',\\n        onUpdate: \'RESTRICT\',\\n        onDelete: \'CASCADE\',\\n      },\\n    },\\n  )\\n  todoListId?: number;\\n  \\n  // other properties, etc.\\n}\\n```\\n\\nPlease refer to [PR#2712](https://github.com/strongloop/loopback-next/pull/2712) to learn more about the proposed syntax and for a list of follow-up stories created to implement the proposed functionality.\\n\\n## HasMany/BelongsTo/HasOne Relation Limitations for NoSQL Databases\\n\\nThese relations work best with relational databases that support foreign key and unique constraints and attempting to use them with NoSQL databases will lead to unexpected behaviour. Our model relation documentation has been updated to reflect these limitations. See [HasMany Relation](https://loopback.io/doc/en/lb4/HasMany-relation.html), [BelongsTo Relation](https://loopback.io/doc/en/lb4/BelongsTo-relation.html), and [HasOne Relation](https://loopback.io/doc/en/lb4/hasOne-relation.html).\\n\\n## Model Discovery\\n   \\nModels can now be discovered from a supported datasource by running the `lb4 discover` command. See [Discovering models from relational databases](https://loopback.io/doc/en/lb4/Discovering-models.html). This new feature was contributed by the community.\\n\\n## Basic Life Cycle Support\\n\\nIt\'s often desirable for various types of artifacts to participate in certain life cycles events and perform some related processing. Basic life cycle support introduces these capabilities:\\n\\n- Registration of life cycle observers and actions using context bindings.\\n- An `lb4 observer` command to generate life cycle scripts.\\n- Discover and boot life cycle scripts.\\n\\nSee [Life cycle events and observers](https://loopback.io/doc/en/lb4/Life-cycle.html).\\n\\n## Added @inject.binding and Improved @inject.setter\\n\\n[PR#2657](https://github.com/strongloop/loopback-next/pull/2657) improves `@inject.setter` to allow binding creation policy. It also adds `@inject.binding` to resolve/configure a binding via dependency injection.\\n\\nSee [@inject.setter](https://loopback.io/doc/en/lb4/Decorators_inject.html#injectsetter) and [@inject.binding](https://loopback.io/doc/en/lb4/Decorators_inject.html#injectbinding).\\n\\n## Decorator/Helper Functions for Extension Point/Extensions\\n\\n[Extension Point/extension](https://wiki.eclipse.org/FAQ_What_are_extensions_and_extension_points%3F) is a very powerful design pattern that promotes loose coupling and offers great extensibility. There are many use cases in LoopBack 4 that fit into design pattern. For example:\\n\\n- `@loopback/boot` uses `BootStrapper` that delegates to `Booters` to handle different types of artifacts.\\n- `@loopback/rest` uses `RequestBodyParser` that finds the corresponding `BodyParsers` to parse request body encoded in different media types.\\n- `@loopback/core` uses `LifeCycleObserver` to observe `start` and `stop` events of the application life cycles.\\n\\nTo add a feature to the framework and allow it to be extended, we divide the responsibility into two roles:\\n\\n- Extension point: it represents a **common** functionality that the framework depends on and interacts with. Examples include booting the application, parsing http request bodies, and handling life cycle events. Meanwhile, the extension point also defines contracts for its extensions to follow so that it can discover corresponding extensions and delegate control to them without having to hard code such dependencies.\\n\\n- Extensions: they are implementations of **specific** logic for an extension point, such as, a booter for controllers, a body parser for xml, and a life cycle observer to load some data when the application is started. Extensions must conform to the contracts defined by the extension point.\\n\\nSee [Extension point and extensions](https://loopback.io/doc/en/lb4/Extension-point-and-extensions.html).\\n\\n## Authentication\\n\\nTo support multiple authentication strategies in the revised [authentication system](https://github.com/strongloop/loopback-next/blob/master/packages/authentication/docs/authentication-system.md) in `@loopback/authentication` that we started last month, we introduced:\\n\\n- An authentication strategy interface that contributed authentication strategies must implement.\\n- An authentication strategy extension point to which contributed authentication strategies must register themselves as an extension.\\n- Documentation demonstrating how a contributed authentication strategy implements the authentication strategy interface and registers itself as an extension of the extension point.\\n- Documentation demonstrating how a custom sequence is defined to introduce the authentication action,.\\n- Documentation demonstrating how the authentication action calls the authentication strategy provider to resolve a strategy by name.\\n- Documentation demonstrating how a controller method is decorated with the `@authenticate(\'strategy_name\')` decorator to define an endpoint the requires authentication.\\n\\n## Node.js 12\\n\\nWith Node.js 12.0.0 officially released (see [Introducing Node.js 12](https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f)), we are investigating effort required to support this new Node.js version.\\n\\nLoopBack 4 has been already updated for Node.js 12.0.0. We had to tweak few places in `loopback-datasource-juggler` to make our test suite pass on the new runtime version, which you can learn more about in [PR#1728](https://github.com/strongloop/loopback-datasource-juggler/pull/1728).\\n\\nLoopBack 3 core packages `loopback` and `strong-remoting` work on Node.js 12.0.0 out of the box, `loopback-datasource-juggler` version 3 was fixed [PR#1729](https://github.com/strongloop/loopback-datasource-juggler/pull/1729).\\n\\nIn the next weeks and months, we are going to check our connectors and other LoopBack 3 packages like `loopback-cli`. If all goes well, then all LoopBack components and connectors will support Node.js 12 by the time it enters LTS mode in October this year.\\n\\n## Working with Express Middleware\\n\\nWe added a new section called [Working with Express middleware](https://loopback.io/doc/en/lb4/Sequence.html#working-with-express-middleware). This describes the differences between LoopBack REST layer and Express middleware and explains how to map different kinds of Express middleware to LoopBack concepts and APIs.\\n\\n## Migration from LoopBack 3 to LoopBack 4\\n\\nAfter we implemented [`mountExpressRouter`](https://loopback.io/doc/en/lb4/Routes.html#mounting-an-express-router), we continued on the [Migration epic](https://github.com/strongloop/loopback-next/issues/2479) and implemented a booter component for booting LoopBack 3 applications on a LoopBack 4 project. `Lb3AppBooterComponent` can be used to boot the LoopBack 3 application, convert its Swagger spec into OpenAPI version 3, and mount the LoopBack 3 application on the LoopBack 4 project. \\n\\nThe component offers two modes to mount your LoopBack 3 application: the full application or only the REST router. By default, it will mount the full application, but you have the option to modify it to only the REST routes along with the base path the routes are mounted on top of. \\n\\nTo see how to use the component, see [Boot and Mount a LoopBack 3 application](https://loopback.io/doc/en/lb4/Boot-and-Mount-a-LoopBack-3-application.html).\\n\\n## Build Tools\\n\\n- To allow the TypeScript compiler to catch even more bugs for us, we have enabled the following additional checks: `noImplicitThis`, `alwaysStrict` and `strictFunctionTypes`, see [PR#2704](https://github.com/strongloop/loopback-next/pull/2704). This exercise discovered few problems in our current codebase, the non-trivial ones were fixed by standalone pull requests [PR#2733](https://github.com/strongloop/loopback-next/pull/2733), [PR#2711](https://github.com/strongloop/loopback-next/pull/2711) and [PR#2728](https://github.com/strongloop/loopback-next/pull/2728).\\n\\nPlease note that projects scaffolded by our `lb4` tool are using `@loopback/build` and our shared `tsconfig.json` by default. As a result, these projects may start failing to compile if they are violating any of the newly enabled checks.\\n\\n## Bug Fixes / Improvements\\n\\n- We have relaxed the relation constraint checks to allow requests that include the constrained property as long as they provide the same property value as the one imposed by the constraint. See [PR#2754](https://github.com/strongloop/loopback-next/pull/2754).\\n\\n- In the spike of the inclusion filter, we realized the importance of supporting cyclic references. \\n\\nFor example: \\n  \\nModel `CategoryWithRelations` has a property `products` containing an array of model `ProductWithRelations`. `ProductWithRelations` has a property `category` containing `CategoryWithRelations`.\\n\\nIn April we fixed generating the JSON schema for models with circular dependencies as the pre-work of the inclusion filter. Given the following model definitions:\\n  \\n  ```ts\\n    @model()\\n  class Category {\\n    @property.array(() => Product)\\n    products?: Product[];\\n  }\\n\\n  @model()\\n  class Product {\\n    @property(() => Category)\\n    category?: Category;\\n  }\\n  ```\\n  \\nNow you can call `getJsonSchema(Category)` and `getJsonSchema(Product)` to get the JSON schemas without running into an infinite reference error.\\n\\n- OpenAPI code generation for naming and typing was improved. See [PR#2722](https://github.com/strongloop/loopback-next/pull/2722).\\n\\n- Allow \'-\' to be used in in path template variable names. See [PR#2724](https://github.com/strongloop/loopback-next/pull/2724).\\n\\n## Connector Bug Fixes/Improvements\\n\\n- When using protocol mongodb+srv, the port must not be set in the connection url. See [PR#497](https://github.com/strongloop/loopback-connector-mongodb/pull/497) provided by the community.\\n\\n- We now support the `fields` filter in the `loopback-connector-couchdb2`, you can retrieve the data in the Couchdb 2.0 database with specified fields. Check out the syntax of the filter in our [documentation](https://loopback.io/doc/en/lb3/Fields-filter.html).\\n\\n- Add possibility to configure the foreign key constraint with 2 optional triggers for mysql : onUpdate and onDelete. See [PR#370](https://github.com/strongloop/loopback-connector-mysql/pull/370) provided by the community.\\n\\n- We fixed our CI failing tests in Cloudant and MongoDB connectors to have green builds on master. The Cloudant fixes required changes in [Juggler](https://github.com/strongloop/loopback-datasource-juggler/pull/1720) and [Cloudant](https://github.com/strongloop/loopback-connector-couchdb2/pull/59) for Cloudant/CouchDB connectors. See [PR#505](https://github.com/strongloop/loopback-connector-mongodb/pull/505) for the MongoDB fix. We aim to remove unneccessary MongoDB downstream builds in [Issue#509](https://github.com/strongloop/loopback-connector-mongodb/issues/509).\\n\\n- We\'ve made some fixes in both Juggler and MongoDB connector to address coercion of deeply nested primitive datatypes (Number, Date etc.) as well as `Decimal128` MongoDB type, These changes address coercion of the nested properties on Create and Update operations. See [PR#501](https://github.com/strongloop/loopback-connector-mongodb/pull/501) and [PR#1702](https://github.com/strongloop/loopback-datasource-juggler/pull/1702) for the details. Unfortunately, a regression was introduced with Juggler [PR#1702](https://github.com/strongloop/loopback-datasource-juggler/pull/1702), and [PR#1726](https://github.com/strongloop/loopback-datasource-juggler/pull/1726) aims to fix it.\\n\\n## LoopBack 2.x Reached End of Life\\n\\nAfter almost 5 years since the initial release, LoopBack version 2 has reached end of life and will not receive any new bug fixes. Specifically, no security vulnerabilities will be fixed in this version going forward. If you haven\'t done so yet, then you should migrate all projects running on LoopBack 2 to a newer framework version as soon as possible. See [LoopBack 3 Receives Extended Long Term Support](https://strongloop.com/strongblog/lb3-extended-lts/).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"building-online-game-with-loopback-4-pt1","metadata":{"permalink":"/blog/building-online-game-with-loopback-4-pt1","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-04-30-building-online-game-with-loopback-4-pt1.md","source":"@site/blog/2019/2019-04-30-building-online-game-with-loopback-4-pt1.md","title":"Building an Online Game With LoopBack 4 (Part 1)","description":"Originally published on strongloop.com","date":"2019-04-30T00:00:00.000Z","formattedDate":"April 30, 2019","tags":[{"label":"how-to","permalink":"/blog/tags/how-to"}],"readingTime":9.21,"hasTruncateMarker":true,"authors":[{"name":"Wen Bo","title":"LoopBack Maintainer","url":"https://github.com/gobackhuoxing","imageURL":"https://avatars.githubusercontent.com/u/22156589","key":"wenbo"}],"frontMatter":{"title":"Building an Online Game With LoopBack 4 (Part 1)","date":"2019-04-30T00:00:00.000Z","authors":"wenbo","slug":"building-online-game-with-loopback-4-pt1","tags":["how-to"]},"prevItem":{"title":"LoopBack 4 April 2019 Milestone Update","permalink":"/blog/april-2019-milestone"},"nextItem":{"title":"LoopBack 4 2019 Q1 Overview","permalink":"/blog/loopback-4-2019-q1-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n## Part 1: Building a Simple LoopBack Project With MongoDB  \\n\\n### Introduction\\n\\n\\"Ready to build amazing things?\\" asks the LoopBack 4 homepage before encouraging you to try the open source framework.\\n\\n\\"Try LoopBack 4 now.\\"\\n\\nIn this series, I\'m going to do exactly that! Join me as I create an API web game using LoopBack 4.\\n\\n\x3c!--truncate--\x3e\\n\\nThe main purpose of this series is to help you learn LoopBack 4 and how to use it to easily build your own API and web project. We\'ll do so by creating a new project I\'m working on: an online web text-based adventure game. In this game, you can create your own account to build characters, fight monsters and find treasures. You will be able to control your character to take a variety of actions: attacking enemies, casting spells, and getting loot. This game should also allow multiple players to log in and play with their friends.\\n\\nSome brief background on myself, first. I graduated from college last year. I don\'t have any background on web or game development. I am sure most of you have better understanding than me on those fields. If I can do this, you can do it too - perhaps even better!\\n\\n### Why LoopBack 4?\\n\\nLoopBack 4 is an open source framework that can help you build REST API. You can use LB4 to automatically generate simple APIs in couple of minutes without any coding. You can even easily connect your project to many popular databases. For this project, I will use MongoDB as my database. I don\'t even need to know how to use MongoDB as LB4 will handle everyting for me. Isn\'t this like magic?\\n\\nAnother great advantage of LB4 is that it is extensible. LoopBack artifacts can be managed by types. New artifact types can be introduced. Instances for a given type can be added, removed, or replaced. Organizing artifacts in a hierarchy of extension points/extensions decouples providers and consumers. You can write your own extensions to augment the framework.\\n\\n### Project Plan\\n\\nIn this series, my goals are to build the following functionality into the game:\\n\\n* The ability for users to create their own character and customize their character.\\n* The ability for users to equip their character with weapon, armor, and skill.\\n* Establish basic functionality for the game: attack, defend, and cast spells.\\n* User authorization and role-based access control.\\n* The ability for multiple users login and play at the same time.\\n* User Interface (UI).\\n* Deploying to the cloud, such as IBM cloud, AWS, Google Cloud or Azure.\\n\\nThis is a diagram for the relationships between `character`, `weapon`, `armor`, and `skill`.\\n\\n![relations](./images/my-first-api-p1-models.png)\\n\\nIn this first part of the series, we will cover `character` model.\\n\\nYou can check my code [here](https://github.com/gobackhuoxing/first-web-game-lb4/tree/part1) for this episode.\\n\\n### In this Episode\\n\\nTo begin things, I will start with the easiest task: auto-generate APIs for users to create their character and connect to MongoDB.\\n\\n### Before We Start\\n\\nThere are some prerequisites you may want to catch up on before we start.\\n\\n* Basic concepts of [TypeScript](https://www.typescriptlang.org/docs/home.html), [Javascript](https://www.w3schools.com/js/) and [Node.js](https://www.w3schools.com/nodejs/nodejs_intro.asp).\\n\\n* [Install LoopBack 4](https://loopback.io/doc/en/lb4/Getting-started.html).\\n\\nI also highly recommend you to check these two examples:\\n\\n* [Todo tutorial](https://loopback.io/doc/en/lb4/todo-tutorial.html).\\n* [TodoList tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial.html).\\n\\nThis episode is based on those examples. You don\'t have to understand how they work, just keep in mind what function we can achieve. We will dig deep into that later.\\n\\n### Initializing Scaffolding\\n\\nLoopBack 4 provides a CLI (command line interface) to help create your project.\\n\\nSimply run `lb4 app` in a folder you want to use the CLI. Disable \\"Docker\\" when it asks you to \\"Select features to enable in the project\\"\\n\\n```\\nwenbo:firstgameDemo wenbo$ lb4 app\\n? Project name: firstgame\\n? Project description: firstgameDemo\\n? Project root directory: firstgame\\n? Application class name: FirstgameApplication\\n? Select features to enable in the project Enable tslint, Enable prettier,\\nEnable mocha, Enable loopbackBuild, Enable vscode, Enable repositories, Ena\\nble services\\n```\\n\\nThere are four important components in a LB4 project: Model, Datasource, Repository, and Controller. Let\'s create them one by one.\\n\\n### Model\\n\\nA model is like the class in Java or a table in relational database. It is an entity with one or more properties. A model may also have relationships with other models. For example, a `student` model could have properties like `studentID`, `name`, and `GPA`. It may also have one or more entity of `course` model and belong to a `school` model.\\n\\nWe will delve more deeply into the model relationship in next blog. In this episode let\'s simply create a `character` model first. The `character` model has following properties:\\n\\n* id: number (id property)\\n* name: string (required)\\n* level: number (1)\\n* nextLevelExp: number (100)\\n* currentExp: number (0)\\n* maxHealth: number (100)\\n* currentHealth: number (100)\\n* maxMana: number (50)\\n* currentMana: number (50)\\n* attack: number (20)\\n* defence: number (5)\\n\\nRun `lb4 model` in the project folder we just created by using CLI (run `cd firstgame` first).\\n\\n```\\n? Model class name: character\\n? Please select the model base class Entity (A persisted model with an ID)\\n? Allow additional (free-form) properties? No\\nLet\'s add a property to Character\\nEnter an empty property name when done\\n\\n? Enter the property name: id\\n? Property type: number\\n? Is id the ID property? Yes\\n? Is it required?: No\\n? Default value [leave blank for none]:\\n\\nLet\'s add another property to Character\\nEnter an empty property name when done\\n\\n? Enter the property name: name\\n? Property type: string\\n? Is it required?: Yes\\n? Default value [leave blank for none]:\\n\\nLet\'s add another property to Character\\nEnter an empty property name when done\\n\\n? Enter the property name: level\\n? Property type: number\\n? Is it required?: No\\n? Default value [leave blank for none]: 1\\n\\n...\\n```\\n\\nThe first property is `id`. It\'s like the primary key in relational database. We don\'t need to specify `id` as we will auto generate `id`.\\n\\nThe second property is `name`. That is the only thing we need to specify.\\n\\nAll of other properties like `level`, `attack` and `defence` are default. We will not need to provide specifics.\\n\\nIf you go to `/src/models`, you will see `character.model.ts`. We don\'t need to do anything about it at this point. We will come back in following episode.\\n\\n### DataSource\\n\\nWe connect to the database in LB4 using datasource. LB4 supports almost all of the popular databases. In this project and series I will use [MongoDB](https://www.mongodb.com/). If you don\'t know how to use MongoDB, don\'t worry! LB4 will take care everything for you. You only need to [install mongoDB](https://docs.mongodb.com/manual/administration/install-community) first.\\n\\nAfter installation, run `lb4 datasource` in your project root.\\n\\n```\\nwenbo:firstgame wenbo$ lb4 datasource\\n? Datasource name: mongo\\n? Select the connector for mongo: MongoDB (supported by StrongLoop)\\n? Connection String url to override other settings (eg: mongodb://username:password@hostna\\nme:port/database):\\n? host: localhost\\n? port: 27017\\n? user:\\n? password: [hidden]\\n? database: mongo\\n```\\nFill `host` with `localhost` and `port` with `27017`.\\n\\nThis will build a connection between your project and MongoDB.\\n\\n### Repository\\n\\nThe repository is like a connecter between the datasource and models. One of its jobs is to act like database injecter and extracter: when you want to create or fetch an entity of a model, repository will help you inject data into database or extract data from database.\\n\\nRun `lb4 repository` in your project root.\\n\\n```\\nwenbo:firstgame wenbo$ lb4 repository\\n? Please select the datasource MongoDatasource\\n? Select the model(s) you want to generate a repository Character\\n? Please select the repository base class DefaultCrudRepository (Legacy juggler bridge)\\n   create src/repositories/character.repository.ts\\n   update src/repositories/index.ts\\n```\\n\\nYou will find `character.repository.ts` in `src/repositories`. It\'s all we need at this point.\\n\\n### Controller\\n\\nController is the most important component. It contains the code for all of your project functions and handles all business logic. In this series We will spend the majority of our time on controller.\\n\\nRun `lb4 controller` in your project root to create default controller.\\n\\n```\\nwenbo:firstgame wenbo$ lb4 controller\\n? Controller class name: character\\n? What kind of controller would you like to generate? REST Controller with CRUD functions\\n? What is the name of the model to use with this CRUD repository? Character\\n? What is the name of your CRUD repository? CharacterRepository\\n? What is the type of your ID? number\\n? What is the base HTTP path name of the CRUD operations? /characters\\n   create src/controllers/character.controller.ts\\n   update src/controllers/index.ts\\n```\\n\\nThis will generate all basic APIs for `character`, including `post`, `get`, `patch`, `put`, and `delete`.\\n\\nIf you have tried the [Todo tutorial](https://loopback.io/doc/en/lb4/todo-tutorial.html), you probably already noticed the auto increment id feature. When you call the `post` API multiple times (leave `id` blank), the `id` increased by 1 every time. This feature is supported by the in-memory database. But we are using MongoDB in this project. If we want to have that feature, we need to do that programmatically.\\n\\nGo to `src/controllers` and open `character.controller.ts` with your favourite editor.\\n\\n```ts\\n  @post(\'/characters\', {\\n    responses: {\\n      \'200\': {\\n        description: \'Character model instance\',\\n        content: {\'application/json\': {schema: {\'x-ts-type\': Character}}},\\n      },\\n    },\\n  })\\n  async create(@requestBody() character: Character): Promise<Character> {\\n    //add following lines\\n    let characterId = 1;\\n    while(await this.characterRepository.exists(characterId)){\\n      characterId ++;\\n    }\\n    character.id = characterId;\\n    //add above lines\\n    return await this.characterRepository.create(character);\\n  }\\n```\\n\\nAdd those lines into the `post /character`. That will traverse your database to find a unique character id. Since this is a very bad programing practice, we will try to improve it in next episode.\\n\\n### API Explorer\\n\\nLoopBack 4 has a build-in API explorer for you to play and test your API.\\n\\nTo start your project, run `npm start` in the project root.\\n\\n```\\nwenbo:firstgame wenbo$ npm start\\n\\n> firstgame@1.0.0 prestart /Users/xiaocase/Documents/learnlb/MyAPI/firstgameDemo/firstgame\\n> npm run build\\n\\n\\n> firstgame@1.0.0 build /Users/xiaocase/Documents/learnlb/MyAPI/firstgameDemo/firstgame\\n> lb-tsc es2017 --outDir dist\\n\\n\\n> firstgame@1.0.0 start /Users/xiaocase/Documents/learnlb/MyAPI/firstgameDemo/firstgame\\n> node .\\n\\nServer is running at http://[::1]:3000\\nTry http://[::1]:3000/ping\\n```\\n\\nGo to [http://[::1]:3000](http://[::1]:3000) and open explorer. You will see this:\\n\\n![explorer](./images/my-first-api-p1-api-explorer.png)\\n\\nThis shows the basic APIs we just created.\\n\\nNow let\'s try to create a character. Open `post /character` and click \\"try it out\\". You only need to input a name for character, so you can leave the others blank.\\n\\n![post](./images/my-first-api-p1-post-character.png)\\n\\nThen we can try to get information for the character. Open `get /character/{id}` and click \\"try it out\\". Input \\"1\\" as character Id.\\n\\n![get](./images/my-first-api-p1-get-character.png)\\n\\n### Applying This to Your Own Project\\n\\nIn this episode, we covered the how to create simple APIs. You can do the same to create a start point for your own project, for example, a student registration system which has a `student` model with properties like `studentId`, `name`, `major`, and `course`.\\n\\nOn the other hand, you have the freedom to choose any database you want. LB4 supports most databases very well. [Here](https://loopback.io/doc/en/lb4/soap-calculator-tutorial-add-datasource.html) is an example that uses SOAP webservices as datasource.\\n\\n### What\'s Next?\\n\\nIn next episode, we will add `weapon`, `armor`, `skill` model and handle the relationship between models.\\n\\nIn the meantime, you can learn more about LoopBack in [past blogs](https://strongloop.com/strongblog/tag_LoopBack.html)."},{"id":"loopback-4-2019-q1-overview","metadata":{"permalink":"/blog/loopback-4-2019-q1-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-04-11-loopback-4-2019-q1-overview.md","source":"@site/blog/2019/2019-04-11-loopback-4-2019-q1-overview.md","title":"LoopBack 4 2019 Q1 Overview","description":"Originally published on strongloop.com","date":"2019-04-11T00:00:00.000Z","formattedDate":"April 11, 2019","tags":[{"label":"Quarterly update","permalink":"/blog/tags/quarterly-update"}],"readingTime":4.25,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 4 2019 Q1 Overview","date":"2019-04-11T00:00:00.000Z","authors":"dhmlau","slug":"loopback-4-2019-q1-overview","tags":["Quarterly update"]},"prevItem":{"title":"Building an Online Game With LoopBack 4 (Part 1)","permalink":"/blog/building-online-game-with-loopback-4-pt1"},"nextItem":{"title":"LoopBack 4 March 2019 Milestone Update","permalink":"/blog/march-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWhen the LoopBack team released [LoopBack 4 GA version](https://strongloop.com/strongblog/loopback-4-ga) last October, they didn\'t stop to rest on their laurels. The team has been busy enhancing the framework, closing feature parity gaps, and helping community onboard with LoopBack 4.\\n\\nSince GA, we have been focusing on implementing/enhancing the following major areas:\\n\\n- [Authentication](#authentication)\\n- [Model relations](#model-relations)\\n- [Migration](#migration)\\n- [Extensibility](#extensibility)\\n\\n\x3c!--truncate--\x3e\\nMany thanks to your support and contributions! We are seeing more than double in our monthly download numbers in [npmjs.com](https://www.npmjs.com/) since GA. We are also seeing an increase in activities from the community, in terms of answering others\' questions and submitting pull requests. For the last 3 months, more than 15% of the merged pull requests are coming from the community. Want to help but new to open source contribution? Don\'t worry, this [step by step guide](https://loopback.io/doc/en/lb4/submitting_a_pr.html) will guide you through the contribution process.\\n\\nLet\'s take a closer look at each epic.\\n\\n### Authentication\\n\\nAs part of the scenario-driven approach, we have added a reference implementation using JWT authentication in the [shopping example](https://github.com/strongloop/loopback4-example-shopping). We have also worked on a more [detailed design](https://github.com/strongloop/loopback-next/tree/master/packages/authentication/docs) and started the implementation to enable extension points for plugging in different authentication strategies.\\n\\n### Model Relations\\n\\nBesides `hasMany` and `belongsTo`, we have added one more relation type:\\n\\n[`hasOne`](https://loopback.io/doc/en/lb4/hasOne-relation.html). \\n\\nWe received lots of interests around other relation types, such as `hasManyThrough`. Some of you are implementing the command line interface for creating model relations (`lb4 relation`). It\'s on the way!\\n\\nInclusion of related model when querying data is a popular feature that is not available in LoopBack 4 yet. The initial research was concluded with a need to better investigate how to represent navigational properties used to include data of related models. We have explored multiple alternatives and came up with a solution that not only nicely addresses both TypeScript types and OpenAPI schema, but is also flexible enough to support other use cases like partial updates and exclusion of auto-generated properties when creating new model instances. You can learn more in our [March milestone blog post](https://strongloop.com/strongblog/march-2019-milestone/).\\n\\n### Migration\\n\\nEarlier this year, we have made the announcement to extend the long term support for LoopBack 3. If you\'re using an older LoopBack version, don\'t miss [the announcement blog post](https://strongloop.com/strongblog/lb3-extended-lts/).\\n\\nMeanwhile, we did a lot of investigation to improve the developer experience for migrating LoopBack 3 applications to LoopBack 4. One of the goals is to allow you to migrate your application incrementally. We have investigated on how to [mount Express router with OpenAPI spec](https://github.com/strongloop/loopback-next/issues/2389) and completed a spike for [mounting an LoopBack 3 app and include its REST API in OpenAPI spec](https://github.com/strongloop/loopback-next/issues/2318).\\n\\nIn the coming weeks and months, we are going to implement stories identified by the spike and grouped in the epic [Mount LB3 app in LB4](https://github.com/strongloop/loopback-next/issues/2479). Stay tuned!\\n\\n### Extensibility\\n\\nOne of our goals for LoopBack 4 is to build a minimal core while enabling everything else to be implemented via extensions. We continued to enhance the extensibility of the framework. We have introduced `context.view` and related events and added a `greeter-extension` [example](https://github.com/strongloop/loopback-next/tree/master/examples/greeter-extension). Lifecycle support and binding configuration/injection are coming soon.\\n\\n### User Adoption\\n\\nAs LoopBack is a Node.js framework, we\'ve looked at the common use cases for Node.js developers to think of ways to make your adoption to LoopBack easier. Receiving feedback from various sources, we have:\\n\\n- Investigated the possibility to use JavaScript when developing LoopBack 4 applications. Check out our recent [blog post](https://strongloop.com/strongblog/loopback4-javascript-experience/) for details.\\n\\n- Added [an example](https://github.com/strongloop/loopback-next/tree/master/examples/express-composition) on how to mount Express middleware to a LoopBack application.\\n\\n### Experimental\\n\\nOn top of the features mentioned in the above stories, we are always looking to use and/or integrate with popular technologies. Here is a list of experimental features we\'re working on:\\n\\n- [Kafka](https://github.com/strongloop/loopback4-example-kafka)\\n- [Socket.io](https://github.com/strongloop/loopback-next/pull/2648)\\n- [Native support of GraphQL](https://github.com/strongloop/loopback-next/pull/2670)\\n- [OpenAPI connector](https://github.com/strongloop/loopback-connector-openapi/pull/2)\\n- [gRPC extension](https://github.com/strongloop/loopback4-extension-grpc)\\n- [Support for method interceptors](https://github.com/strongloop/loopback-next/pull/2687)\\n\\nWhile we want to make sure high quality of code goes into our codebase which may take multiple iterations, we\'re looking for ways to release experimental features so that our users can take a peek earlier and give early feedback. We are looking for your feedback on how we can roll out the experimental features in GitHub [issue #2676](https://github.com/strongloop/loopback-next/issues/2676).\\n\\n## What\'s Next?\\n\\nGoing forward, we will continue to improve the migration experience, close feature parity gaps and bring compelling features to you. Please see the [Q2 roadmap](https://github.com/strongloop/loopback-next/issues/2692) for our plan.\\n\\n## Previous Milestone Blogs\\n\\nIf you have been following our blog, you probably notice that we have monthly milestone blogs to update our users on the progress that we\'re making. Here are the previous monthly milestone blogs if you want more details:\\n\\n- [October 2018](https://strongloop.com/strongblog/loopback-4-october-2018-milestone/)\\n- [November 2018](https://strongloop.com/strongblog/november-2018-milestone/)\\n- [December 2018](https://strongloop.com/strongblog/december-2018-milestone/)\\n- [January 2019](https://strongloop.com/strongblog/january-2019-milestone/)\\n- [February 2019](https://strongloop.com/strongblog/february-2019-milestone/)\\n- [March 2019](https://strongloop.com/strongblog/march-2019-milestone/)\\n\\n## Call for Actions\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"march-2019-milestone","metadata":{"permalink":"/blog/march-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-04-09-march-milestone.md","source":"@site/blog/2019/2019-04-09-march-milestone.md","title":"LoopBack 4 March 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-04-09T00:00:00.000Z","formattedDate":"April 9, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.455,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 March 2019 Milestone Update","date":"2019-04-09T00:00:00.000Z","authors":"jannyhou","slug":"march-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2019 Q1 Overview","permalink":"/blog/loopback-4-2019-q1-overview"},"nextItem":{"title":"Experimenting with Plain JavaScript Programming in LoopBack 4","permalink":"/blog/loopback4-javascript-experience"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWe landed an outstanding number of code contributions in March, making for a very productive month! We merged 63 PRs in total, and 10 out of them are from the community. Cheers!\\n\\nThe team was able to make good progress of the epics we are focusing on, like LB3 to LB4 migration, adding `@loopback/context` features, JavaScript experience, the authentication system, and describing model properties to be more flexible. Read more to see the details of our achievements in March.\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration from LoopBack 3 to LoopBack 4\\n\\nWe started to incrementally work on the migration stories created from the [PoC PR](https://github.com/strongloop/loopback-next/pull/2318). This month we implemented the Express router to allow LoopBack 4 app developers to add arbitrary set of Express routes and provide OpenAPI specifications. You can call `mountExpressRouter` on either the app level or the rest server level to mount external routes. For details please check the [router\'s documentation](https://loopback.io/doc/en/lb4/Routes.html#mounting-an-express-router).\\n\\n## Extension Pattern Example\\n\\nAs a framework built on top of the IoC (Inversion of Control) and DI (Dependency Injection), the [extension point](https://wiki.eclipse.org/FAQ_What_are_extensions_and_extension_points%3F) is commonly used in LoopBack 4 to declare contracts for extension contributors to plug-in components. The existing usages of extension point include the request body parser and the boot strapper. It is also needed for supporting multiple authentication strategies. Check out the [greeter extension point](https://github.com/strongloop/loopback-next/tree/master/examples/greeter-extension) to learn the best practice of registering an extension point along with its extensions. \\n\\n## Context Improvement\\n\\nThe discussion and review of a series of context enhancement PRs keeps moving. This month we landed the PR that implemented the context view feature. A context view is created to track artifacts and is able to watch the come and go bindings. More details can be found in the [Context document](https://loopback.io/doc/en/lb4/Context.html#context-view).\\n\\nWe have also enforced the dependency injection for bindings with the `SINGLETON` scope to make sure their dependencies can only be resolved from the owner context and its ancestors, but **NOT** from any of the child contexts. This is required as the value for a singleton binding is shared in the subtree rooted at the context where the binding is contained. Dependencies for a singleton cannot be resolved from a child context which is not visible and it may be recycled. See [the Dependency Injection documentations](https://loopback.io/doc/en/lb4/Dependency-injection.html#dependency-injection-for-bindings-with-different-scopes) for more details.\\n\\nNow users can specify the scope in the `@bind` decorator when annotating an artifact class with `@bind`. The application level bindings are improved by honoring more configurations in the `@bind` decorator. Now users could specify the binding scope and the namespace of tags as the inputs of `@bind`. Details can be found in [the binding document](https://loopback.io/doc/en/lb4/Binding.html#configure-binding-attributes-for-a-class).\\n\\n## Relations\\n\\nWe solved the self relation issue and created corresponding test cases as the reference usage. You can check [the documentation for handling recursive relations](https://loopback.io/doc/en/lb4/BelongsTo-relation.html#handling-recursive-relations) to learn how to create a `hasMany` and `belongsTo` relation to the same entity.\\n\\n## Authentication and Authorization\\n\\nBefore writing the extension point for plugging in different authentication strategies, we decided to do some investigation of the popular authentication mechanisms and adopted the user scenario driven development. This is to make sure the abstractions for services are common enough. The design documents for our authentication system can be found [here](https://github.com/strongloop/loopback-next/blob/master/packages/authentication/docs/authentication-system.md). The document begins with illustrating a LoopBack 4 application that supports multiple authentication approaches and finally divides the responsibilities among different artifacts. The abstractions we created in March are two interfaces for the user service and the token service in `@loopback/authentication`.\\n\\n## Inclusion of Related Models\\n\\nThe initial inclusion spike left us a question: how to distinguish the navigational property from the normal model properties? This month we had a PoC to demonstrate describing the navigational model properties with a new interface along with how to generate the corresponding OpenAPI schema.\\n\\nThe proposed solution has two major parts:\\n\\n1. At TypeScript level, we will introduce a new interface to describe navigational properties and a new type to describe data object holding both own properties and navigational properties. For example, when a `Category` model has many `Product` instances:\\n\\n    ```ts\\n    // Navigation properties of the Category model.\\n    interface CategoryRelations {\\n      products?: ProductWithRelations[];\\n\\t  }\\n    \\n    // Category\'s own properties and navigation properties.\\n    export type CategoryWithRelations = Category & CategoryRelations;\\n    ```\\n    \\n2. When decorating controller methods with OpenAPI metadata, we need to include navigational properties in the schema generated from the model definition. This will be achieved by replacing `x-ts-type` extension with a call of a new helper function `getModelSchemaRef` with a new flag `includeRelations`:\\n\\n    ```diff\\n     schema: {\\n       type: \'array\',\\n    -   items: {\'x-ts-type\': Category},\\n    +   items: getModelSchemaRef(Category, {includeRelations: true})\\n       },\\n     }\\n    ```\\n\\nUnder the hood, `getModelSchemaRef` will create a new OpenAPI Schema describing both own and navigational properties of the given model and give the schema a unique title so that we can reference it from multiple places.\\n    \\nPlease check [PR 2592](https://github.com/strongloop/loopback-next/pull/2592) for more details and the discussions we had. And the [follow-up stories](https://github.com/strongloop/loopback-next/issues/2152#issuecomment-475575548) are created as our next target.\\n\\n## Partial Update\\n\\nWhile researching options for describing navigational model properties, Miroslav realized that the proposed solution is easy to extend to support other kinds of schema generated from model.\\n\\n1. To describe request body of a `PATCH` request, we can introduce a new `getModelSchemaRef` flag called `partial`:\\n\\n    ```ts\\n    schema: getModelSchemaRef(Category, {partial: true}),\\n    ```\\n\\n   At TypeScript level, such data object can be described using TypeScript\'s `Partial` type:\\n   \\n   ```ts\\n   obj: Partial<Category>\\n   ```\\n   \\n2. To exclude certain properties from `POST` request (e.g. `id` that will be generated by the database), we can introduce another new flag called `exclude`:\\n\\n    ```ts\\n    schema: getModelSchemaRef(TodoList, {exclude: [\'id\']}),\\n    ```\\n    \\n    At TypeScript level, such data object can be described using `Pick` and `Exclude` types:\\n  \\n    ```ts\\n    obj: Pick<TodoList, Exclude<keyof Category, \'id\'>>\\n    ```\\n\\nOnce these two new flags are implemented, we will be able to fix validation of request bodies to correctly enforce required properties for operations like `POST` & `PUT`, and treat all properties as optional for `PATCH` operations.\\n\\nYou can find more details in [PR 2646](https://github.com/strongloop/loopback-next/pull/2646), and the follow-up stories are outlined [here](https://github.com/strongloop/loopback-next/pull/2646#issuecomment-477503186).\\n\\n\\n## JavaScript Experience\\n\\nAfter a thorough exploration and discussion of writing the LoopBack 4 application in Javascript this month, we summarized our findings and achievements in our [\\"Experimenting with Plain JavaScript Programming in LoopBack 4\\"](https://strongloop.com/strongblog/loopback4-javascript-experience/) blog post. It talks about the LoopBack 4 artifacts that we are able to create in JavaScript and also the limitations. A plan of subsequent stories is included in the blog.\\n\\n## Other Updates\\n\\n* LoopBack 3 improvement: Now we allow people to define a model property called `type` instead of having `type` as a preserved word. [Link](https://github.com/strongloop/loopback/issues/4131)\\n\\n* We added the steps to call SOAP services by running `lb4 service`, see the [document for calling other APIs](https://loopback.io/doc/en/lb4/Calling-other-APIs-and-web-services.html). \\n\\n* There have been several conference and meet-up events happened over the last year, so we added a new section \\"Presentations\\" in the [resources page](https://v4.loopback.io/resources.html) to display the videos.\\n\\n* Add operationId based on the controller and method names. [Link](https://github.com/strongloop/loopback-next/pull/2533)\\n\\n* Make sure the `basePath` is included in the url of `RestServer`. [Link](https://github.com/strongloop/loopback-next/pull/2560)\\n\\n## Community Contributions\\n\\nHere is a summary of the contributions from our community in March. We appreciate all your attention and help!\\n\\n* Added the `PATCH` and `DELETE` method for the `HasOne` relation. [Link](https://github.com/strongloop/loopback-next/commit/5936fb9c7224a024f7d406e8f05894cce460a4d4)\\n\\n* Support specifying the type of nested properties as a model. [Link](https://github.com/strongloop/loopback-next/commit/d298ec898f3c52224a1844c5e41f0d52cd7ff569)\\n\\n* Allow the model\'s id property to be a number for supporting the composed key. [Link](https://github.com/strongloop/loopback-next/commit/71292e9ac1b3d89ebfe284a659264cbb83dbe814)\\n\\n* Update the mocha configuration in `@loopback/build`. [Link](https://github.com/strongloop/loopback-next/commit/c3d800700b253e97316fd0871641ea80fcb457f3)\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback4-javascript-experience","metadata":{"permalink":"/blog/loopback4-javascript-experience","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-03-28-loopback4-javascript-experience.md","source":"@site/blog/2019/2019-03-28-loopback4-javascript-experience.md","title":"Experimenting with Plain JavaScript Programming in LoopBack 4","description":"Originally published on strongloop.com","date":"2019-03-28T00:00:00.000Z","formattedDate":"March 28, 2019","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"experiment","permalink":"/blog/tags/experiment"}],"readingTime":4.715,"hasTruncateMarker":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"}],"frontMatter":{"title":"Experimenting with Plain JavaScript Programming in LoopBack 4","date":"2019-03-28T00:00:00.000Z","authors":"hacksparrow","slug":"loopback4-javascript-experience","tags":["javascript","experiment"]},"prevItem":{"title":"LoopBack 4 March 2019 Milestone Update","permalink":"/blog/march-2019-milestone"},"nextItem":{"title":"LoopBack 3 Receives Extended Long Term Support","permalink":"/blog/lb3-extended-lts"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nLoopBack is a popular open source Node.js framework. Its latest version (4) is written in TypeScript, while the older version were written in JavaScript. We chose to write LoopBack 4 to make it [more extensible, scalable, and sustainable](https://loopback.io/doc/en/lb4/FAQ.html#why-typescript). TypeScript features made it easy for us to build dependency injection in the framework and leverage it for controllers, models, and other constructs using TypeScript decorators.\\n\\nWe believe that TypeScript is the right move and it will help you and us in the long run. However, some developers are constrained to use plain JavaScript at the moment for various reasons. We didn\'t want to leave our JavaScript users behind and decided to explore the possibilities of creating a JavaScript interface to LoopBack 4. This blog post is about what we did in that regard and what we will be doing next.\\n\\n\x3c!--truncate--\x3e\\n\\nWe worked on a spike to enable [LoopBack 4 development using JavaScript](https://github.com/strongloop/loopback-next/issues/1978). You can take a look at a [proof of concept](https://github.com/strongloop/loopback4-example-javascript/tree/class-factory/server) LoopBack 4 app which uses the JavaScript API we have experimented with.\\n\\n## Our Findings\\n\\nA typical LoopBack 4 app is composed of several elements: \\n\\n- A controller to define the endpoints.\\n- A sequence to customize and contain the request-response process.\\n- Models for defining the data.\\n- A datasource to connect to database.\\n- A repository to link the model to the datasource.\\n- The application class which brings all of these together.\\n\\nThe application also supports the ability to create custom routes to define non-REST enpoints.\\n\\nThe proof of concept listed above demonstrates how writing LoopBack 4 applications in JavaScript would enable all the above features.\\n\\n**What was Achieved**\\n\\n1. Ability to create [application class](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/application.js) in JavaScript.\\n\\n2. Ability to create [route](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/application.js#L15) in JavaScript.\\n\\n3. Ability to create [custom sequence](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/sequence.js) in JavaScript.\\n\\n4. Ability to create [CRUD controller](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/controllers/color.controller.js) in JavaScript.\\n\\n5. Ability to create [custom controller](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/controllers/ping.controller.js) in JavaScript.\\n\\n6. Ability to create [datasource](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/datasources/memory.datasource.js) in JavaScript.\\n\\n7. Ability to create [model](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/models/color.model.js) in JavaScript.\\n\\n8. Ability to create [repository](https://github.com/strongloop/loopback4-example-javascript/blob/class-factory/server/repositories/color.repository.js) in JavaScript.\\n\\nAlthough it allows the creation of some simple apps, it is pretty limited and inflexible in what it can do.\\n\\n**Limitations**\\n\\n1. The class factory pattern is not idiomatic ES6. Ideally, we should be able to use classes like in TypeScript. Making this possible is not easy, since we have to come up with a good interface and developer experience for dependency injection. This will be possible when [decorators for ES6 classes](https://github.com/tc39/proposal-decorators) becomes a JavaScript feature.\\n\\n2. Routes are limited to simple responses and has no access to the LoopBack request object, which contains a lot of additional information.\\n\\n3. Controller methods are hard-coded in the helper library and leave no room for customization.\\n\\n4. Models are defined using a JSON files, instead of JavaScript classes.\\n\\nThe TypeScript LoopBack 4 API has a very neat and intuitve developer experience when it comes to customization and extension because of the in-built dependecny injection capability. Replicating this capability in JavaScript is the biggest hurdle in creating the JavaScript API for LoopBack 4.\\n\\nWe realized that creating a parallel LoopBack 4 JavaScript framework would be lot of work in terms of development and maintenace. A better approach to providing a JavaScript API for LoopBack 4 would be to identify most practical use cases and then try to come up with appropriate solutions.\\n\\n## Next Steps\\n\\nTo help decide our approach to creating the usecase-specific JavaScript LoopBack 4 API, instead of porting the whole framework to JavaScript, we identified [several personas](https://github.com/strongloop/loopback-next/issues/2567) and went through each of them and considered their use cases.\\n\\nThe personas we identified are:\\n\\n1. Large scale application developer. Since large scale application are best developed with TypeScript, we concluded that this persona should be using the TypeScript version of LoopBack 4.\\n\\n2. Extension developer. This persona wants to extend the capabilities of LoopBack 4 by writing custom extensions. Being technical enough, this persona should also be comfortable using TypeScript.\\n\\n3. API developer. This persona is understands the importance of OpenAPI support and the ORM capabilities provided by LoopBack 4, has only a few endpoints to expose, and prefers a simpler JavaScript API to interact with, instead of having to create controllers and classes.\\n\\n4. Plain Express developer. This persona primarily uses Express for application development, and is interested in using the features provided by LoopBack 4, using JavaScript.\\n\\nWe combined personas 3 and 4 to a single one - a developer who likes the simplicity of JavaScript and wants to use LoopBack 4 APIs in Express-style routes.\\n\\nSo instead of porting the TypeScript LoopBack 4 to JavaScript, we have decided to cater to this specific usecase. Developers will be able to setup and customize their routes using [OpenAPI specifications](https://swagger.io/specification/) and will have access to the LoopBack 4 request object. Apart from providing access to other metadata added by LoopBack 4, such as authentication details, this object is the link to the LoopBack 4 internals. Via this object, developers can access  repositories, datasources, models, and context.\\n\\nWe have started work on porting the [Todo example](https://github.com/strongloop/loopback-next/issues/2501) to JavaScript. This port will show how to create LoopBack 4 [routes](https://github.com/strongloop/loopback-next/issues/2474) and [datasources](https://github.com/strongloop/loopback-next/issues/2557) in JavaScript.\\n\\nWe would like to hear from you what you think of JavaScript experience in LoopBack 4. Is it required? What are your expectations?\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"lb3-extended-lts","metadata":{"permalink":"/blog/lb3-extended-lts","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-03-12-lts-schedule.md","source":"@site/blog/2019/2019-03-12-lts-schedule.md","title":"LoopBack 3 Receives Extended Long Term Support","description":"Originally published on strongloop.com","date":"2019-03-12T00:00:00.000Z","formattedDate":"March 12, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"news","permalink":"/blog/tags/news"},{"label":"LoopBack 3","permalink":"/blog/tags/loop-back-3"}],"readingTime":3.33,"hasTruncateMarker":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack 3 Receives Extended Long Term Support","date":"2019-03-12T00:00:00.000Z","authors":["dhmlau","bajtos"],"slug":"lb3-extended-lts","tags":["community","news","LoopBack 3"]},"prevItem":{"title":"Experimenting with Plain JavaScript Programming in LoopBack 4","permalink":"/blog/loopback4-javascript-experience"},"nextItem":{"title":"LoopBack 4 February 2019 Milestone Update","permalink":"/blog/february-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThis past October, we announced LoopBack 4 GA is ready for production use and updated the Long Term Support (LTS) schedule in our [LTS page](https://loopback.io/doc/en/contrib/Long-term-support.html). Due to popular requests, LoopBack 3 now receives an extended long term support with updated timeline as shown in the table below.\\n\\nVersion | Status | Published | Active LTS Start | Maintenance LTS Start | End-of-life \\n-- | -- | -- | -- | -- | --\\nLoopBack 4 | Current | Oct 2018 | -- | -- | Apr 2021(minimum) \\nLoopBack 3 | Active LTS | Dec 2016 | Oct 2018 | Dec 2019 (revised) | Dec 2020 (revised)\\nLoopBack 2 | Maintenance LTS | Jul 2014 | Dec 2016 | Oct 2018 | Apr 2019\\n\\n\x3c!--truncate--\x3e\\n\\nThe extended period gives more time for our users to move to the new version which is a different programming model and language. It also allows us to improve the migration experience and migration guide.\\n\\nBelow are a few questions that our users frequently asked about different versions of LoopBack. \\n\\n### If I\'m starting a new project, what should I do?\\n\\nIf you\'re considering using LoopBack for your next project, our recommendation is to first create a proof-of-concept application using LoopBack 4 (LB4). You may want to check if there are any features that your application requires that LB4 does not provide out of the box yet. Search [LB4 GitHub issues](https://github.com/strongloop/loopback-next/issues) to find any existing discussions around those missing features, as there may be 3rd-party extensions or workaround available. If you run into a missing feature that\'s not discussed in our issue tracker yet, then please [open a new issue](https://github.com/strongloop/loopback-next/issues/new) to let us know! \\n\\nHopefully, you will find a way how to implement all major requirements in your PoC application and can thus build your project on LB4. \\n\\nIf some of your requirements cannot be feasibly implemented in LB4, then you have two options:\\n\\n1. You can work with the LoopBack team and contribute the missing parts yourself. It will cost you time to implement framework features, but you will save time on migrating your project from LB3 to LB4 later on. \\n\\n2. Alternatively, if LB3 provides all what your project needs, then you can save upfront investment and build your project on LB3 now, preparing to pay the migration costs later in the future.\\n\\n### If I\'m a LoopBack 3 user, what should I do?\\n\\nIf you already have LoopBack 3 applications running in production, it is a good time for you to review the [difference between LoopBack 3 and LoopBack 4](https://loopback.io/doc/en/lb4/LoopBack-3.x.html). Even with the extended end-of-life date for LoopBack 3, it is never too early to start migrating your LoopBack 3 application to LoopBack 4. Please also note  the [feature parity gap we had identified](https://github.com/strongloop/loopback-next/issues/1920). Your feedback is always appreciated! \\n\\nWe\'re actively working on improving the migration story! Please check out [GitHub issue #1849](https://github.com/strongloop/loopback-next/issues/1849) for discussions and progress. [Miroslav](https://strongloop.com/authors/Miroslav_Bajto%C5%A1/) is currently investigating different approaches of having a compatibility layer between LoopBack 3 and LoopBack 4 artifacts. The first step is to allow developers to mount their LoopBack 3 applications in a new LoopBack 4 project. You can follow the progress of this work in [GitHub issue #2479](https://github.com/strongloop/loopback-next/issues/2479).\\n\\n### If I\'m a LoopBack 2 user, what should I do? \\n\\nIf you\'re a LoopBack 2 user, you should at least migrate your LoopBack 2 applications to LoopBack 3. The effort should be minimal and the process should be smooth. You can read more details in the [3.0 migration guide](https://loopback.io/doc/en/lb3/Migrating-to-3.0.html). When LB2 goes end of life (EOL), you should not be using LB2 in production because there will be no security fixes.\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"february-2019-milestone","metadata":{"permalink":"/blog/february-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-03-06-february-milestone.md","source":"@site/blog/2019/2019-03-06-february-milestone.md","title":"LoopBack 4 February 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-03-06T00:00:00.000Z","formattedDate":"March 6, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.31,"hasTruncateMarker":true,"authors":[{"name":"Nora Abdelgadir","title":"LoopBack Maintainer","url":"https://github.com/nabdelgadir","imageURL":"https://avatars0.githubusercontent.com/u/42985749","key":"nabdelgadir"}],"frontMatter":{"title":"LoopBack 4 February 2019 Milestone Update","date":"2019-03-06T00:00:00.000Z","authors":"nabdelgadir","slug":"february-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 3 Receives Extended Long Term Support","permalink":"/blog/lb3-extended-lts"},"nextItem":{"title":"Watch Video from our Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","permalink":"/blog/watch-meetup-quickly-build-apis-with-loopback"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIt feels like 2019 just started, but we are somehow already in March. February flew by, but while the month was short, the list of things the LoopBack team accomplished in the month was the opposite. In February, we tackled authentication and authorization, spikes on migration from LoopBack 3 to LoopBack 4, preparation for events, and others. You can see the [February milestone](https://github.com/strongloop/loopback-next/issues/2313) and see the [March milestone](https://github.com/strongloop/loopback-next/issues/2516) to see what we are working on next. Read more to see the details of our progress in February.\\n\\n\x3c!--truncate--\x3e\\n\\n## Authentication and Authorization\\n\\nWe refactored the JWT authentication strategy in `loopback4-example-shopping` to be more modular and leveraged functions from `jsonwebtoken` to perform a more robust password hashing and comparison. The token based utilities are refactored into a token service, so that it can be injected into the controller and strategy classes using Dependency Injection. The `bcrypt` password hasher service is created similarly.\\n\\nOur next step is to write a guide for plugging in different authentication strategies and depicting the API flow of authenticating the endpoints. In the meantime, we will be adding more abstractions to shape the authentication system as the groundwork before opening the extension points for the authentication system. You could check the subsequent stories in [issue #1035](https://github.com/strongloop/loopback-next/issues/1035) and track our progress there.\\n\\n## Migration from LoopBack 3 to LoopBack 4\\n\\nLoopBack has a guide on [migrating](https://loopback.io/doc/en/lb3/Migrating-to-3.0.html) applications from LoopBack 2 to LoopBack 3, and it\'s only fitting that we include a guide on migrating applications from LoopBack 3 to LoopBack 4 as they reach feature parity. However, the latter\'s transition is more complicated than the former\'s transition. We have an [epic](https://github.com/strongloop/loopback-next/issues/1849), if you would like to see more details. \\n\\nThis month, we did two spikes to work on this transition. We started with a proof of concept demonstrating how to take LoopBack 3 model definition files (e.g. `common/models/product.json` and `common/models/product.js`) and drop them without any modifications into a LoopBack 4 project. You can find the original idea in [issue #2224](https://github.com/strongloop/loopback-next/issues/2224) and the working code in [pull request #2274](https://github.com/strongloop/loopback-next/pull/2274).\\n\\nUnfortunately, this approach turned out to be too expensive to implement and maintain, and we decided to abandon it.\\n\\nNot all is lost, though! While discussing the proof of concept, we realized there is a simpler way how to build a bridge between LoopBack 3 and LoopBack 4: mount the entire LoopBack 3 application as a REST component of the LoopBack 4 project.\\n\\nThe [pull request #2318](https://github.com/strongloop/loopback-next/pull/2318) presents a proof of concept that we will use to drive the actual implementation tracked by [Epic #2479](https://github.com/strongloop/loopback-next/issues/2479).\\n\\nWe have also identified few new stories to bridge the gap preventing LoopBack 3 applications to be migrated to LoopBack 4, see the following [GitHub comment](https://github.com/strongloop/loopback-next/issues/1849#issuecomment-467471409).\\n\\n## Generate Docker Files through the CLI\\n\\nWe added a new feature to the CLI: the [`--docker`](https://www.docker.com/) option when generating a LoopBack application. This option generates `Dockerfile`, `.dockerignore`, and two Docker scripts: `docker:build` and `docker:run`. See [Application generator](https://loopback.io/doc/en/lb4/Application-generator.html) to see how to generate an application with `--docker`. \\n\\nFollowing this feature, we added a [fix](https://github.com/strongloop/loopback-next/pull/2433) that forces the test host to be `HOST` environment variable or IPv4 interface, which makes it easier to run LoopBack 4 application tests inside a Docker container.\\n\\n## Documentation on Submitting a Pull Request\\n\\nWe introduced a detailed list of steps to follow if you want to submit a pull request for LoopBack 4. This [guide](https://loopback.io/doc/en/lb4/submitting_a_pr.html) includes steps for [beginners](https://loopback.io/doc/en/lb4/submitting_a_pr.html#beginner-instructions) and for [experienced](https://loopback.io/doc/en/lb4/submitting_a_pr.html#expert-instructions) users. It took a lot of [discussion](https://github.com/strongloop/loopback-next/pull/2364) to finally nail a balanced read that was both concise and informative. You can now follow this handy resource if you would like to submit a PR to [`loopback-next`](https://github.com/strongloop/loopback-next).\\n\\n## Tutorial on Mounting LoopBack REST API on an Express Application\\n\\nWe added a new tutorial demonstrating how to mount LoopBack 4\'s REST API on an Express application. Users can now mix both the Express and LoopBack 4 frameworks in order to best match their own use cases. In this tutorial, we mounted a `Note` application created by the LoopBack 4 CLI on top of a simple Express server and served a static file. You can follow the [tutorial](https://loopback.io/doc/en/lb4/express-with-lb4-rest-tutorial.html) or see the completed example by using the command `lb4 example express-composition`.\\n\\n## New Layout for Test Files\\n\\nIn a series of incremental pull requests, we reworked our project layout, moved all test files from `test` to `src/__tests__` directory and updated TypeScript build configuration to place files directly to `dist` folder, instead of `dist/src` and `dist/test`. This change simplifies the build setup and unifies file references between TypeScript sources and JavaScript runtime. It allows us to further improve our project infrastructure, for example start using TypeScript [Project References](https://www.typescriptlang.org/docs/handbook/project-references.html).\\n\\nLoopBack 4 projects scaffolded with recent versions of `lb4` tool will use the new layout too. \\n\\nExisting projects can be updated with a bit of manual work:\\n\\n- Move your test files from `test` to `src/__tests__`.\\n- Edit script in `package.json` to use the new test location.\\n- Change `tsconfig.json`: set `rootDir` to `\\"src\\"`, remove `\\"index.ts\\"` and `\\"test\\"` entries from the `include` field.\\n- Fix any broken `import` statements.\\n\\nThe [pull request #2316](https://github.com/strongloop/loopback-next/pull/2316/files) shows how we updated our example applications; you can use it as a reference guide. \\n\\n## Other Updates\\n\\n- You can now disable the OpenAPI spec endpoints (e.g. `/openapi.json`) which will also disable the `/explorer` endpoint by setting your rest\'s `openApiSpec.disabled` option to true. See [Customize How OpenAPI Spec is Served](https://loopback.io/doc/en/lb4/Server.html#customize-how-openapi-spec-is-served) for more `rest.openApiSpec` options. [PR #2470](https://github.com/strongloop/loopback-next/pull/2470).\\n\\n- Another `rest` option introduced is `requestBodyParser`, so you can now [configure the request body parser](https://loopback.io/doc/en/lb4/Server.html#configure-the-request-body-parser-options). [PR #2432](https://github.com/strongloop/loopback-next/pull/2432).\\n\\n- LoopBack cares a lot about your security. A security issue related to `JSON.parse()` was [discovered](https://github.com/hapijs/bourne#introduction) and this PR added a sanitizer for JSON. [PR #2348](https://github.com/strongloop/loopback-next/pull/2348).\\n\\n- Now you can override the default [Express settings](https://loopback.io/doc/en/lb4/Server.html#express-settings) and also add your own. [PR #2423](https://github.com/strongloop/loopback-next/pull/2423).\\n\\n- You can now use a custom repository base class in your LoopBack application. [PR #2235](https://github.com/strongloop/loopback-next/pull/2235).\\n\\n## Events\\n\\nThis month, the team went to downtown Toronto for a [meetup](https://www.meetup.com/Toronto-Cloud-Integration-Meetup/events/257171001/). This included an overview of LoopBack 4, along with demonstrations of what LoopBack 4 can do. Check out the [blog post](https://strongloop.com/strongblog/watch-meetup-quickly-build-apis-with-loopback/) about it. There was also a [Quick Lab](https://developer.ibm.com/tutorials/create-rest-apis-minutes-with-loopback-4/) and [Master Class session](https://myibm.ibm.com/events/think/all-sessions/session/7764A) for LoopBack 4 in IBM\'s Code@Think in mid-February. And finally, [Raymond](https://strongloop.com/authors/Raymond_Feng/) presented at DeveloperWeek 2019 where he talked about [Building APIs with Node.js, TypeScript, and LoopBack](https://developerweek2019.sched.com/event/JXDc/pro-talk-speed-and-scale-building-apis-with-nodejs-typescript-and-loopback).\\n\\nIf you want to come to our future events, keep an eye out on the [Strongblog](https://strongloop.com/strongblog/) for announcements.\\n\\n## Community Contributions\\n\\nAs the number of contributions from our community rises, we are spending an increasing part of our time on reviewing these pull requests and helping our volunteers to get their changes landed. In fact, every fifth pull request opened this month was contributed by you! Check out the [community-contribution label](https://github.com/strongloop/loopback-next/pulls?q=is%3Apr+is%3Aopen+label%3Acommunity-contribution) to see pull requests by the community.\\n\\nWe would like to take a moment to thank everyone who has submitted a pull request; the team really appreciates your contributions.\\n\\nThere are also other ways for getting involved beyond code contributions. Triaging issues and reviewing pull requests are examples of activities that would help us to accelerate the success of LoopBack as an open-source project. You can learn more about different contribution opportunities in [Contributing to LoopBack](https://loopback.io/doc/en/contrib/index.html).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"watch-meetup-quickly-build-apis-with-loopback","metadata":{"permalink":"/blog/watch-meetup-quickly-build-apis-with-loopback","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-02-27-watch-meetup-quickly-build-apis-with-loopback.md","source":"@site/blog/2019/2019-02-27-watch-meetup-quickly-build-apis-with-loopback.md","title":"Watch Video from our Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","description":"Originally published on strongloop.com","date":"2019-02-27T00:00:00.000Z","formattedDate":"February 27, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"event","permalink":"/blog/tags/event"}],"readingTime":0.945,"hasTruncateMarker":true,"authors":[{"name":"Dave Whiteley","title":"LoopBack Content Creator","url":"https://github.com/DaveYVR","imageURL":"https://avatars.githubusercontent.com/u/3076411","key":"dwhiteley"}],"frontMatter":{"layout":"post","title":"Watch Video from our Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","date":"2019-02-27T00:00:00.000Z","authors":"dwhiteley","slug":"watch-meetup-quickly-build-apis-with-loopback","tags":["community","event"]},"prevItem":{"title":"LoopBack 4 February 2019 Milestone Update","permalink":"/blog/february-2019-milestone"},"nextItem":{"title":"New Developer Page - Create Dynamic End-to-End REST APIs with LoopBack 4","permalink":"/blog/create-dynamic-end-to-end-REST-APIs-with-loopback4"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe Toronto Cloud Integration Meetup hosted an event on Tuesday, February 5, 2019: \\"Quickly Build APIs with Existing Services and Data Using LoopBack!\\" Since not everyone is local, we filmed the meetup so we could share it with our community.\\n\\n\x3c!--truncate--\x3e\\n\\n![Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!](./images/meetup-feb-5-video-still.png)\\n\\nOur goal was to bring awareness of LoopBack to the Node.js community in Toronto. We also brought snacks and swag to share. Here\'s a snapshot of what was covered.\\n\\n- [Janny Hou](https://twitter.com/houjanny) explained what LoopBack is, what you can do with it, and the rationale behind the rewrite of the framework. You can find the link to relevant LB4 docs [here](https://loopback.io/doc/en/lb4/).\\n\\n- [Biniam Admikew](https://twitter.com/badmikew) demonstrated how how easy it is to expose REST API from your database with just a few steps.  \\n\\n- [Jamil Spain](https://twitter.com/iamjamilspain) provided an additional demo while also taking care of capturing the meetup on video. \\n\\nYou can view each videos on our YouTube channel playlist [here](https://www.youtube.com/playlist?list=PL2I5I38o2kSCPCIxd8IjzYAMZnxcy3BYo).\\n\\nYou can view the slides from the meetup on [Slideshare](https://www.slideshare.net/DaveWhiteley1/2019-02-05-toronto-cloud-integration-meetup).\\n\\n## What\'s Next?\\n\\n- Visit the [LoopBack 4 GithHub page](https://github.com/strongloop/loopback-next/) to contribute!"},{"id":"create-dynamic-end-to-end-REST-APIs-with-loopback4","metadata":{"permalink":"/blog/create-dynamic-end-to-end-REST-APIs-with-loopback4","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-02-21-create-dynamic-end-to-end-REST-APIs-with-loopback4.md","source":"@site/blog/2019/2019-02-21-create-dynamic-end-to-end-REST-APIs-with-loopback4.md","title":"New Developer Page - Create Dynamic End-to-End REST APIs with LoopBack 4","description":"Originally published on strongloop.com","date":"2019-02-21T00:00:00.000Z","formattedDate":"February 21, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":1.495,"hasTruncateMarker":true,"authors":[{"name":"Dave Whiteley","title":"LoopBack Content Creator","url":"https://github.com/DaveYVR","imageURL":"https://avatars.githubusercontent.com/u/3076411","key":"dwhiteley"}],"frontMatter":{"title":"New Developer Page - Create Dynamic End-to-End REST APIs with LoopBack 4","date":"2019-02-21T00:00:00.000Z","authors":"dwhiteley","slug":"create-dynamic-end-to-end-REST-APIs-with-loopback4","tags":["community","news"]},"prevItem":{"title":"Watch Video from our Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","permalink":"/blog/watch-meetup-quickly-build-apis-with-loopback"},"nextItem":{"title":"LoopBack 4 January 2019 Milestone Update","permalink":"/blog/january-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWe\'ve provided news, tutorials, and updates on LoopBack for almost as long as the StrongLoop site existed, and continued to do so after IBM acquired StrongLoop in 2015. Recently, IBM created another resource for LoopBack! In addition to accessing news of the open-source Node.js API Framework on this site, you can now also find news, code and more on the official [IBM Developer LoopBack page](https://developer.ibm.com/open/projects/loopback/). \\n\x3c!--truncate--\x3e\\n\\nThe site clearly explains what LoopBack is, what you can use it for, and what it includes:\\n\\n> LoopBack is a highly extensible, open-source Node.js framework based on Express that enables you to quickly create dynamic end-to-end REST APIs and connect to backend systems such as databases and SOAP or REST services.\\n\\n>With LoopBack, you can easily create models based on a schema (if you have one) or define models if you don\u2019t and build relationships between models.\\n\\n> LoopBack 4 is the latest release from the LoopBack team and includes:\\n\\n> - A new core to deliver great extensibility and flexibility written in TypeScript/ES2017.\\n> - Creation experience for defining REST APIs and handling API requests and responses.\\n> - Programming model with dependency injection and concepts like components, mixins, and repositories to make LoopBack extensible.\\n> - GraphQL support through OASGraph.\\n\\nIn addition, the site provides a diagram displaying how LoopBack interacts with incoming requests and outgoing integrations as well as LoopBack\'s various capabilities. It also outlines the benefits of contributing to the project and how LoopBack addresses certain business problems. \\n\\nCheck it all out on the official [IBM Developer page](https://developer.ibm.com/open/projects/loopback/)! \\n\\n## What Next?\\n\\n* Learn about other [open source projects](https://strongloop.com/projects/) that provide key technologies for the API economy: API Microgateway; OpenAPI Spec; and of course LoopBack. \\n\\n* Be sure to follow StrongLoop on [Facebook](https://www.facebook.com/strongloop/) and [Twitter](https://twitter.com/StrongLoop)!"},{"id":"january-2019-milestone","metadata":{"permalink":"/blog/january-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-02-06-january-milestone.md","source":"@site/blog/2019/2019-02-06-january-milestone.md","title":"LoopBack 4 January 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2019-02-06T00:00:00.000Z","formattedDate":"February 6, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":6.265,"hasTruncateMarker":true,"authors":[{"name":"Biniam Admikew","title":"LoopBack Maintainer","url":"https://github.com/b-admike","imageURL":"https://avatars.githubusercontent.com/u/13950637","key":"b-admike"}],"frontMatter":{"title":"LoopBack 4 January 2019 Milestone Update","date":"2019-02-06T00:00:00.000Z","authors":"b-admike","slug":"january-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"New Developer Page - Create Dynamic End-to-End REST APIs with LoopBack 4","permalink":"/blog/create-dynamic-end-to-end-REST-APIs-with-loopback4"},"nextItem":{"title":"Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","permalink":"/blog/meetup-quickly-build-apis-using-loopback"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWe\'re one month into the new year! While the team had some time off extending into January, we still managed to work and spike on authentication, migration from LB3, user adoption, extensibility, and documentation. Read more to find out how it all unfolded.\\n\\n\x3c!--truncate--\x3e\\n\\n## Authentication Epic\\n\\nLast month we implemented the strategy resolver, JWT strategy class and authentication action and created the diagram that depicts their dependency relations. Based on those efforts, in January we enriched the `loopback4-example-shopping` repository with a working JWT authentication system, and added two endpoints for model `User` to make use of it:\\n\\n* `POST /Users/login` verify a user\'s credentials and return a valid JWT access token\\n* `GET /Users/me` display the logged in user of the application\\n\\nThe following picture describes how the authentication mechanism works:\\n\\n<img src=\\"https://strongloop.com/blog-assets/2019/01/auth_endpoints.png\\" alt=\\"authentication endpoints in the example\\"/>\\n\\nThis month our discussion focused on dividing the responsibilities among controller, repository and services/utilities. \\n\\nThe login related logic should be extracted into a service which could be shared among different clients, like REST, gRPC and WebSocket. Those logic include taking in credentials, verifying users, generating and decoding access token. The login service receives User\'s repository via DI. As the first implementation, we simply keep them as utils. They will be refactored into service in story [Refactor authentication util functions into a service](https://github.com/strongloop/loopback4-example-shopping/issues/40)\\n\\nThe controller function should extract credentials like email, username and password from the request. And calls the service to perform login. The service is injected via DI. \\n\\nWe also discovered there are three extension points that are needed in order to make LoopBack\'s authentication system more flexible. We need extension points such as:\\n\\n- plugin Passport based strategies leveraging the existing auth action in [`@loopback/authentication`](https://github.com/strongloop/loopback-next/blob/master/packages/authentication/src/providers/authentication.provider.ts).\\n- plugin non-passport based strategies like the JWT strategy created by us.\\n- a more flexible user profile type that allow people return custom properties.\\n\\nPR https://github.com/strongloop/loopback-next/pull/2249 illustrates extension point/extension pattern is in progress. It provides a standard to make extension point that the 3 above stories could follow.\\n\\nA more detailed tutorial will be created after finishing the story [Refactor authentication util functions into a service](https://github.com/strongloop/loopback4-example-shopping/issues/40).\\n\\n## User Adoption\\n\\nIn order to cater to users developing LoopBack applications with JavaScript, [Yaapa](https://strongloop.com/authors/Hage_Yaapa/) conducted a spike on how to get a LoopBack 4 JavaScript application up and running in [#1978](https://github.com/strongloop/loopback-next/issues/1978).\\n\\nYou can checkout the [hack](https://github.com/strongloop/loopback4-example-javascript/tree/hack) branch of `loopback4-example-javascript` and preview the progress and the possible JavaScript API for LoopBack 4. It is a working example, feel free to experiment.\\n\\nAlso, in [PR #795](https://github.com/strongloop/loopback.io/pull/795), [Nora](https://github.com/nabdelgadir) improved the UX for users on `loopback.io` by setting up redirects for the current LoopBack 4 website and LoopBack 3 in Active LTS, akin to how Node.js has the split for the different version downloads in their main landing page.\\n\\n## Extensibility\\n\\nWe continue to refine our extensibility story as we build more extensions.\\n\\n- [2289](https://github.com/strongloop/loopback-next/pull/2289)\\n  - Introduced `BindingFilter` to match multiple bindings using a function.\\n  - Refactored code to use it for Context APIs such as `find` and `findByTag`.\\n  - Exposed `filterByKey` and `filterByTag` utility functions.\\n\\nTo make it easy to implement the extension point/extension pattern, we\'re building up new features for `@loopback/context`. There are number of PRs under review.\\n\\n- [PR#2291](https://github.com/strongloop/loopback-next/pull/2291)\\n  - Add support for `context` to emit `bind` and `unbind` events\\n  - Allow observers to register with the context chain and respond to come and go of bindings of interest\\n\\n- [PR#2122](https://github.com/strongloop/loopback-next/pull/2122) (depends on #2291)\\n  - Introduce `ContextView` to dynamically resolve values of matching bindings\\n  - Introduce `@inject.view` to support dependency injection of multiple bound values\\n  - Extend `@inject` and `@inject.getter` to support multiple bound values\\n\\n- [PR#2249](https://github.com/strongloop/loopback-next/pull/2249)\\n  - Add an example package to illustrate how to implement extension point/extension pattern using LoopBack 4\'s IoC and DI container\\n\\n- [PR#2259](https://github.com/strongloop/loopback-next/pull/2259)\\n  - Propose new APIs for `Context` to configure bindings\\n  - Add `@inject.config` to simplify injection of configuration\\n\\nYou are welcome to join our discussions in these pull requests. Please be aware that such PRs can be changed or abandoned during the review process.\\n\\n## Documentation updates\\n\\nWe\'re always striving to have better documentation for our users. In [PR#2214](https://github.com/strongloop/loopback-next/pull/2214), [Nora](https://github.com/nabdelgadir) added much needed descriptions to our [relation decorators](https://loopback.io/doc/en/lb4/Decorators_repository.html#relation-decorators) page with clear examples on how they are applied. Moreover, [Dominique](https://github.com/emonddr) wrote an excellent guide on how to publish a LoopBack 4 application to Kubernetes on IBM Cloud in [PR#2160](https://github.com/strongloop/loopback-next/pull/2160). Check it out [here](https://loopback.io/doc/en/lb4/deploying_to_ibm_cloud_kubernetes.html).\\n\\n## LoopBack v3 compatibility layer\\n\\nIn January, Miroslav implemented a proof of concept showing a compatibility layer that would allow application developers to take their model files (`.json` and `.js`) from an existing LB3 project and drop them mostly as-is to a LB4 application.\\n\\nThe idea is to simplify the migration path from LB3 to LB4 by allowing developers to update their existing applications from LB3 to LB4 runtime (and dependencies) without having to rework their source code to the new programming model yet.\\n\\nWith the proposed compatibility layer, LB3 models are \\"upgraded\\" to use:\\n - `loopback-datasource-juggler` version 4.x (instead of 3.x)\\n - `@loopback/rest` for REST APIs (instead of `strong-remoting`)\\n - OpenAPI v3 (instead of Swagger a.k.a. OpenAPI v2)\\n - `@loopback/rest-explorer` for API Explorer (instead of `loopback-component-explorer`)\\n\\nThe migrated models will run fully on LB4 runtime and thus enjoy longer LTS.\\n\\nIf you have an LB3 application and considering upgrading to LB4, then please join the discussion in [PR#2274](https://github.com/strongloop/loopback-next/pull/2274). Your feedback is very important to us!\\n\\nWhile waiting for more feedback from our users, Miroslav reviewed early input and started to look into ways to mount an entire LB3 application inside an LB4 project. While such solution still depends on LB3 runtime that will eventually go out of support, it will provide almost 100% backwards compatibility and require very little code changes. Let us know if this option would be useful for your project and leave a comment in [PR#2318]strongloop/loopback-next#2318).\\n\\n## Community Engagement Events\\n\\n### Toronto LoopBack Meetup\\n\\nThe LoopBack team hosted a meetup in downtown Toronto on February 5th, 2019. We taught users all about LoopBack 4 and demonstrated the capabilities and integrations of the framework. We worked hard to prepare presentations and demos for the meetup during this month. If you are in the Toronto area and are interested in future meetups, check out the [Toronto Cloud Integration Meetup Group](https://www.meetup.com/Toronto-Cloud-Integration-Meetup/) and make sure to sign up!\\n\\nFebruary is an event-filled month. Besides the meetup in Toronto, there will be LoopBack coverage at [Code @ Think](https://www.ibm.com/events/think/code/) in Node.js Master Class and as one of the Quick Labs. [Raymond](https://strongloop.com/authors/Raymond_Feng/) will be presenting at DeveloperWeek on Feb 21 on the topic -- [Speed and Scale: Building APIs with Node.js, TypeScript and LoopBack](https://sched.co/JXDc). \\n\\nTwitter is a great way to stay in the loop with StrongLoop and LoopBack news. The best way to learn about events we are part of is generally https://strongloop.com/events/.\\n\\n## Welcome New Core Maintainer\\n\\nWe\'d like to introduce our new LoopBack development team member [Dominique](https://github.com/emonddr) at our Markham lab. Dominique brings lots of experience and knowledge from working in Message Broker and App Connect development team in the past. He has already given us a step-by-step tutorial on how to deploy a LoopBack 4 application to Kubernetes in IBM Cloud [here](https://loopback.io/doc/en/lb4/deploying_to_ibm_cloud_kubernetes.html). Welcome, Dominique!\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"meetup-quickly-build-apis-using-loopback","metadata":{"permalink":"/blog/meetup-quickly-build-apis-using-loopback","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-01-16-meetup-quickly-build-apis-using-loopback.md","source":"@site/blog/2019/2019-01-16-meetup-quickly-build-apis-using-loopback.md","title":"Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","description":"Originally published on strongloop.com","date":"2019-01-16T00:00:00.000Z","formattedDate":"January 16, 2019","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"event","permalink":"/blog/tags/event"}],"readingTime":1.88,"hasTruncateMarker":true,"authors":[{"name":"Dave Whiteley","title":"LoopBack Content Creator","url":"https://github.com/DaveYVR","imageURL":"https://avatars.githubusercontent.com/u/3076411","key":"dwhiteley"}],"frontMatter":{"title":"Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","date":"2019-01-16T00:00:00.000Z","authors":"dwhiteley","slug":"meetup-quickly-build-apis-using-loopback","tags":["community","event"]},"prevItem":{"title":"LoopBack 4 January 2019 Milestone Update","permalink":"/blog/january-2019-milestone"},"nextItem":{"title":"LoopBack 4 December 2018 Milestone Update","permalink":"/blog/december-2018-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe Toronto Cloud Integration Meetup is hosting an event on Tuesday, February 5, 2019. The subject is near and dear to our hearts: \\"Quickly Build APIs with Existing Services and Data Using LoopBack!\\" If you are in town, we\'d love to meet you as we cover this topic.\\n\\n\x3c!--truncate--\x3e\\n\\n![Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!](./images/loopback-4-logo-sample.png)\\n\\nWe interact with APIs regularly through our mobile and desktop devices! Modern apps and websites integrate them, and we want to help you build APIs off of existing services and data quickly and easily. To do so, some of our LoopBack 4 developers will demonstrate creating an API on top of databases and services in just a few steps, as well as show you how to test it. We will also have developers discuss integrating LoopBack with the latest technologies - Blockchain, Kafka, and more!\\n\\nOne of the purposes of this meetup is to bring awareness of this awesome Node.js framework to the Node.js community in Toronto. Of course, if you\u2019re not using Node.js at this moment, feel free to join us and learn more!\\n\\nSpeakers from the LoopBack and IBM team include:\\n\\n- Janny Hou - Since it\u2019s our first LB4 Meetup, we\u2019ll keep things light and interactive in this main presentation. We will share what LoopBack is and what you can do with it. We will also tell some of the story about the rationale behind the rewrite of the framework.\\n\\n- Biniam Admikew - This demonstration will show how easy it is to expose REST API from your database with just a few steps.  We will go a bit deeper on the concepts and what\u2019s happening in each steps.\\n\\n- Jamil Spain will provide an additional demo.\\n\\nThe meetup will be held at 120 Bloor Street East in Toronto, Ontario. There will also be some snacks and swag on hand, as well as a great chance to network with like-minded folks. \\n\\nYou can register for the event [here](https://www.meetup.com/Toronto-Cloud-Integration-Meetup/events/257171001/)!\\n\\n## What\'s Next?\\n\\n- Visit the [LoopBack 4](http://v4.loopback.io/) homepage to learn more. \\n\\n- Do a deeper dive to learn how to [simplify your database migrations](https://strongloop.com/strongblog/simplify-your-database-migrations) using LoopBack 4.\\n\\n- See how you can [deploy LoopBack 4 applications to IBM Cloud](https://strongloop.com/strongblog/deploying-to-ibm-cloud/)."},{"id":"december-2018-milestone","metadata":{"permalink":"/blog/december-2018-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2019/2019-01-09-december-milestone.md","source":"@site/blog/2019/2019-01-09-december-milestone.md","title":"LoopBack 4 December 2018 Milestone Update","description":"Originally published on strongloop.com","date":"2019-01-09T00:00:00.000Z","formattedDate":"January 9, 2019","tags":[{"label":"Milestone update","permalink":"/blog/tags/milestone-update"}],"readingTime":8.135,"hasTruncateMarker":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 December 2018 Milestone Update","date":"2019-01-09T00:00:00.000Z","authors":"jannyhou","slug":"december-2018-milestone","tags":["Milestone update"]},"prevItem":{"title":"Meetup - Quickly Build APIs with Existing Services and Data Using LoopBack!","permalink":"/blog/meetup-quickly-build-apis-using-loopback"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nHappy New Year! We hope everyone had a wonderful holiday and warmly welcomed 2019. This past December was a short month due to the vacation days, but we were still able to complete several fixes and take off in our next focused epics like authentication and building a JavaScript LoopBack 4 application. You can read more about our progress below.\\n\\n\x3c!--truncate--\x3e\\n\\n![LoopBack 4 December 2018 Milestone Update](./images/LoopBack-4-December-2018-Milestone-Update.png)\\n\\n## Community Contribution\\n\\nIn December we received several document updates and code refactor PRs to improve our code base and user experience. Our LoopBack team appreciates all the contributions that community members have made through the past year. We look forward to continually improving LoopBack 4 with you in the new year! Thank you for participating in the new era of LoopBack.\\n\\n## Authentication and Authorization\\n\\nFor the first refactoring task of the authentication component, we started by implementing a JWT strategy in the shopping example. We did this to discover the common abstractions among different authentication strategies, and to explore ways of defining the default LoopBack 4 User model integrated with authorization methods like login and logout.\\n\\nDuring the implementation, we found some twisted concepts that could confuse people in terms of how each layer\'s metadata are injected and the mechanism of how the authentication component works. We created a diagram depicting the dependency relations and functionality of each concept to guide community contributors. You can find it in this [comment](https://github.com/strongloop/loopback-next/issues/1997#issuecomment-450998083).\\n\\nWe were able to write a PoC PR with the following elements:\\n\\n* A JWT strategy that verifies a request\'s permission by the authentication metadata from its header\\n* A custom strategy resolver which returns the JWT strategy\\n* An AccessToken model that has a one-to-many relation to the User model\\n* A sign in endpoint in the User controller that finds a user and creates the JWT access token\\n\\nThe PR is still in progress. We will summarize the required elements and the steps to create them in the document when it\'s done. Our next focus would be extracting the pieces in the PoC PR into proper modules, including our existing `@loopback/authentication` package or a new created extension package. You can check story [#1997](https://github.com/strongloop/loopback-next/issues/1997) to track the discussions.\\n\\n## Relation Epic\\n\\n### Support hasOne relation\\n\\nWith the `hasMany` relation feature in place and with a lot of request from our community, it made logical sense to implement `hasOne` relation next. The first iteration [1879](https://github.com/strongloop/loopback-next/pull/1879) involved an acceptance test to drive the feature with tests for `create` and `get` or `find` methods. However, it was using a race-condition prone approach in order to guarantee that a single related model instance was created for a source instance. The code called the `find()` and `create()` methods on the target repository which can lead to multiple target instances based on the asynchronous nature of those methods (see [this comment](https://github.com/strongloop/loopback-next/pull/1879#discussion_r227363386) for a clear example). \\n\\nIn order to address this issue, [Miroslav](https://github.com/bajtos) proposed using the target model\'s Primary Key as the Foreign Key from the source model and let the underlying database enforce uniqueness. With it came `belongsToUniquely()` decorator which is used as part of the target model definition to mark a property as a non-generated `id` field for use with `hasOne` relation. After making sure it works with in-memory and MySQL databases, we concluded that it was universal enough and made sense to delegate uniqueness enforcement at the database level and landed the PR. \\n\\nHowever, [Raymond](https://github.com/raymondfeng) pointed out that this approach does not indeed enforce uniqueness across all supported connectors. Instead, he proposed to mark the foreign key as a unique index. While [Biniam](https://github.com/b-admike) started the implementation in [2126](https://github.com/strongloop/loopback-next/pull/2126), he discovered that some connectors like `in-memory` and `cloudant` do not have support for `unique indexes`. Raymond, Miroslav, and Biniam discussed HasOne\'s unique constraint for the foreign key and discovered a new way of looking at relations and constraints:\\n\\n* Weak relations, where the developer primarily wants to navigate related models (think of GraphQL) and referential integrity is either not important or already enforced by the (SQL) database.\\n \\n* Strong relations, where the referential integrity is guaranteed by the framework together with the database.\\n \\nGiven this and the fact that we don\'t have a concrete way to enforce referential integrity in LoopBack from the approaches taken thus far, [#2126](https://github.com/strongloop/loopback-next/pull/2126) was put on hold and [2147](https://github.com/strongloop/loopback-next/pull/2147) aimed to remove the implementation which used target model\'s PK as the FK for a `hasOne` relation. The onus is now on users to make sure that referential integrity is enforced by the database they\'re using by defining a unique index as shown in our [docs](https://loopback.io/doc/en/lb4/hasOne-relation.html#setting-up-your-database-for-hasone-relation---mysql). For more discussion, see [2127](https://github.com/strongloop/loopback-next/issues/2127) and [1718](https://github.com/strongloop/loopback-next/issues/1718).\\n\\n### Inclusion Spike\\n\\nTo explore a good approach for doing the inclusion traverse, we did a spike that implemented an inclusion handler as a function to fetch the included items. When a one to many relation is established, the repository of the source model registers the inclusion handler, which takes in the target model\'s repository getter, applies constraints and invoke the target repository\'s `find` method with the inclusion filter.\\n\\nThis works well for `hasMany` relation but exposes more high level design problems when implementing the `belongsTo` inclusion handler. The [circular dependency restriction](https://github.com/strongloop/loopback-next/issues/1799) results in two models could not define each other as a property in the model class. Therefore the `belongsTo` relation only has a foreignKey id property but not a relation property in the source model, and as a consequence, the source model couldn\'t really describe the data included from its parent.\\n\\nHere is a summary of the things we could re-design and improve:\\n\\n* The Filter interface is not designed to describe related entities\\n* The relation(inclusion) property shouldn\'t be part of the model class\\n* We need a new design to resolve and describe the inclusion property\\n\\nThe discussion is tracked in [story 2152](https://github.com/strongloop/loopback-next/issues/2152).\\n\\n## Documents\\n\\n### Contribution Guide\\n\\nTo make users more easier to contribute the code, we cleaned up the [Reporting issues](https://loopback.io/doc/en/contrib/Reporting-issues.html) page with a more detailed guide of reporting in appropriate channels, and updated the instructions of filing Loopback 2/3 and Loopback 4 bugs separately.\\n\\n### API Documents\\n\\nWe fixed the `AuthenticationBindings` and `StrategyAdapter`\'s API document in the authentication module.\\n\\n## Extensible Request Body Parsing Blog\\n\\nThe API client sends an HTTP request with `Content-Type` header to indicate the media type of the request body. Now we added 6 built-in body parsers for different content types and also allow users to register custom body parser as extensions by implementing the `BodyParser` interface and bind it to the application.\\n\\nTo know more about the details, you can read the blog [The journey to extensible request body parsing](https://strongloop.com/strongblog/the-journey-to-extensible-request-body-parsing)\\n\\n## Write Loopback 4 App in JavaScript\\n\\nWe are working on a JavaScript abstraction for LoopBack 4. Using this, JavaScript developers will be able to develop LoopBack 4 applications without having to use TypeScript. You can preview an app using the progress we have made so far at https://github.com/strongloop/loopback4-example-javascript.\\n\\nThe next step is to further optimize the abstraction and make it as seamless as possible.\\n\\n## OpenAPI Specifications\\n\\n### Base Path\\n\\nWe enabled adding the base path of the REST server by calling the app method `app.basePath(\'/abasepath\')` or server method `server.basePath(\'/abasepath\')`. The base path can be provided in the configuration too:\\n\\n```ts\\n const app = new RestApplication({\\n   rest: {\\n     basePath: \'/api\',\\n   },\\n });\\n ```\\n\\n### Models for Anonymous Schema\\n\\nPreviously when creating LoopBack 4 artifacts by `lb4 openapi`, the controller class used inline TypeScript type literals to describe the object/array parameters for anonymous schemas. Therefore we introduced a flag called `--promote-anonymous-schemas` to generate separate model classes/types for them. A good use case for turning on the flag would be generating models for the anonymous objects that describe a POST/PATCH operation\'s responses. For a more detailed usage of the flag and the conventions of the created LoopBack 4 model, please check [the documentation of OpenAPI generator](https://loopback.io/doc/en/lb4/OpenAPI-generator.html)\\n\\n## Context Improvement\\n\\nTo avoid duplicating the binding configuration every time the users are applying the same attributes such as tags and scope, we allow applying a template function to a binding in the following way:\\n\\n```ts\\n\\nexport const serverTemplate = (binding: Binding) =>\\n  binding.inScope(BindingScope.SINGLETON).tag(\'server\');\\n\\nconst serverBinding = new Binding<RestServer>(\'servers.RestServer1\');\\nserverBinding.apply(serverTemplate);\\n```\\n\\nWe also polished the binding related documentation and extracted them into a standalone page [Binding](https://loopback.io/doc/en/lb4/Binding.html)\\n\\n## Tslint Configurations\\n\\nThe built-in `no-unused-variable` rule raised many issues like conflicts with other rules and it\'s also been deprecated. As a solution, we are replacing it with another configuration property `no-unused`. This causes a possible breaking change and therefore a new standalone package `@loopback/tslint-config` is created to separate the major version bump for changing the tslint configurations from `@loopback/build`. You can check [PR#2159](https://github.com/strongloop/loopback-next/pull/2159) for details.\\n\\n## LoopBack 3 Support\\n\\nSince LB2 will reach its end of line by April 2019, we\'re searching through the modules in the StrongLoop organization and updating LoopBack dependencies from version to 2 to version 3. We updated `loopback-workspace` from a LoopBack 2 application to LoopBack 3 application without changing any behaviours of its APIs. As part of the update, the `WorkspaceEntity` and `Definition` models were removed from the model configuration file, as they are not meant to be accessed directly and they are not attached to a datasource. Finally, the application has been updated to use Node 6+ and the application\'s dependencies have also been updated to their latest versions.\\n\\nYou can find out more in our [LTS schedule](https://loopback.io/doc/en/contrib/Long-term-support.html).\\n\\n## Call to Action\\n\\nLoopBack\'s future success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Joining](https://github.com/strongloop/loopback-next/issues/110) our user group."}]}')}}]);